<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一支红杏</title>
      <link href="/2019/09/14/2019/%E4%B8%80%E6%94%AF%E7%BA%A2%E6%9D%8F/"/>
      <url>/2019/09/14/2019/%E4%B8%80%E6%94%AF%E7%BA%A2%E6%9D%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h1><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><pre><code>任何协议,任何IP都有可能被封.</code></pre><h2 id="CDN技术"><a href="#CDN技术" class="headerlink" title="CDN技术"></a><a href="!https://www.cnblogs.com/zousong/p/10925445.html">CDN技术</a></h2><p><img src="/blog_images/2019-12-08-10-36-09.png" alt=""><br>简单来说CDN服务器代理了我们的访问原服务器的流量. 由于CDN服务器具有众多的IP, 而且更容易伪装成网页访问, 因此用来分发请求可以减少被封的可能.</p><pre><code>请求&lt;-&gt;CDN集群&lt;-&gt;服务器</code></pre><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="websocket代理"><a href="#websocket代理" class="headerlink" title="websocket代理"></a>websocket代理</h2><p>由于CDN服务的特殊性, 必须伪装成正常的网页访问, 所以必须使用websocket代理. </p><h2 id="宝塔linux面板"><a href="#宝塔linux面板" class="headerlink" title="宝塔linux面板"></a>宝塔linux面板</h2><p>简化安装过程,尤其是安装证书那一块. 由于ssl证书的安装比较繁琐, 用caddy的时候也出现了问题.</p><p>安装</p><pre><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</code></pre><p>查看端口占用</p><pre><code>ss -lntpd netstat -tnlp lsof -i tcp:22fuser </code></pre><p>默认的安装方式会出错,改用用DNS安装ssl证书.<br><img src="/blog_images/2019-12-08-18-45-18.png" alt=""></p><p>开启反向代理,把这个网站做的更像一回事.<br><img src="/blog_images/2019-12-08-18-46-07.png" alt=""></p><p>再站点的配置页面修改nginx的配置文件.</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs config">location /ray <br>    &#123;<br>    proxy_pass http://127.0.0.1:10000;<br>        proxy_redirect off;<br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>        proxy_set_header Host $http_host;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><p>现在网上的垃圾太多了, 搜索一个V2ray的配置好累~</p><ul><li><p>Server</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"log"</span>: &#123;<br>    <span class="hljs-attr">"access"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"error"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"loglevel"</span>: <span class="hljs-string">"debug"</span><br>  &#125;,<br>  <span class="hljs-attr">"inbounds"</span>: [<br>    &#123;<br>      <span class="hljs-attr">"tag"</span>: <span class="hljs-string">"vmess-in"</span>, <br>      <span class="hljs-attr">"port"</span>: <span class="hljs-number">10000</span>,<br>      <span class="hljs-attr">"listen"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,<br>      <span class="hljs-attr">"sniffing"</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">"settings"</span>: &#123;<br>        <span class="hljs-attr">"auth"</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"udp"</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">"ip"</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"clients"</span>: [<br>          &#123;<br>            <span class="hljs-attr">"id"</span>: <span class="hljs-string">"*"</span>,<br>            <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span>,<br>            <span class="hljs-attr">"email"</span>: <span class="hljs-string">"t@t.tt"</span>,<br>            <span class="hljs-attr">"security"</span>: <span class="hljs-literal">null</span><br>          &#125;<br>        ]<br>      &#125;,<br>      <span class="hljs-attr">"streamSettings"</span>: &#123;<br>        <span class="hljs-attr">"network"</span>: <span class="hljs-string">"ws"</span>,<br>        <span class="hljs-attr">"security"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"tlsSettings"</span>: &#123;<br>          <span class="hljs-attr">"allowInsecure"</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">"serverName"</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>        <span class="hljs-attr">"tcpSettings"</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"kcpSettings"</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"wsSettings"</span>: &#123;<br>          <span class="hljs-attr">"connectionReuse"</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/ray"</span>,<br>          <span class="hljs-attr">"headers"</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>        <span class="hljs-attr">"httpSettings"</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">"quicSettings"</span>: <span class="hljs-literal">null</span><br>      &#125;<br>    &#125;<br>  ],<br>  <span class="hljs-attr">"outbounds"</span>: [<br>    &#123;<br>      <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"freedom"</span>, <br>      <span class="hljs-attr">"settings"</span>: &#123; &#125;, <br>      <span class="hljs-attr">"tag"</span>: <span class="hljs-string">"direct"</span><br>    &#125;, <br>    &#123;<br>      <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"blackhole"</span>, <br>      <span class="hljs-attr">"settings"</span>: &#123; &#125;, <br>      <span class="hljs-attr">"tag"</span>: <span class="hljs-string">"blocked"</span><br>    &#125;<br>  ], <br>  <span class="hljs-attr">"routing"</span>: &#123;<br>    <span class="hljs-attr">"domainStrategy"</span>: <span class="hljs-string">"AsIs"</span>, <br>    <span class="hljs-attr">"rules"</span>: [<br>      &#123;<br>        <span class="hljs-attr">"type"</span>: <span class="hljs-string">"field"</span>, <br>        <span class="hljs-attr">"inboundTag"</span>: [<br>          <span class="hljs-string">"vmess-in"</span><br>        ], <br>        <span class="hljs-attr">"outboundTag"</span>: <span class="hljs-string">"direct"</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Client</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  "log": &#123;<br>    "loglevel": "debug"<br>  &#125;,<br>  "inbounds": [<br>    &#123;<br>      "port": 10086,<br>      "listen": "0.0.0.0",<br>      "tag": "socks-in",<br>      "protocol": "socks",<br>      "settings": &#123;<br>        "auth": "noauth",<br>        "udp": false<br>      &#125;<br>    &#125;<br>  ],<br>  "outbounds": [<br>    &#123;<br>      "mux": &#123;<br>        "concurrency": 32,<br>        "enabled": true<br>      &#125;,<br>      "protocol": "vmess",<br>      "settings": &#123;<br>        "vnext": [<br>          &#123;<br>            "users": [<br>              &#123;<br>                //注：填写uuid<br>                "id": "UUID",<br>                "alterId": 64,<br>                "security": "auto"<br>              &#125;<br>            ],<br>            //注：填写域名、端口<br>            "address": "domain.Name",<br>            "port": 1234<br>          &#125;<br>        ]<br>      &#125;,<br>      "streamSettings": &#123;<br>        "tlsSettings": &#123;<br>          "allowInsecure": false<br>        &#125;,<br>        "wsSettings": &#123;<br>          "headers": &#123;<br>            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.4489.62 Safari/537.36",<br>            //注：填写对应头部<br>            "Host": "HOST",<br>            "Accept-Encoding": "gzip",<br>            "Pragma": "no-cache"<br>          &#125;,<br>          //注：ws路径<br>          "path": "/PATH/"<br>        &#125;,<br>        "network": "ws",<br>        "security": "tls"<br>      &#125;,<br>      "tag": "proxy"<br>    &#125;,<br>    &#123;<br>      "protocol": "blackhole",<br>      "settings": &#123;&#125;,<br>      "tag": "blocked"<br>    &#125;,<br>    &#123;<br>      "protocol": "freedom",<br>      "settings": &#123;&#125;,<br>      "tag": "dicert"<br>    &#125;<br>  ],<br>  "routing": &#123;<br>    //注：全域名规则匹配<br>    "domainStrategy": "AsIs",<br>    "rules": [<br>      &#123;<br>        "type": "field",<br>        "domain": [<br>          //注：填写对应域名和host<br>          "domain:domain.Name"<br>        ],<br>        "outboundTag": "dicert"<br>      &#125;,<br>      &#123;<br>        "type": "field",<br>        "inboundTag": [<br>          "socks-in",<br>          "http-in"<br>        ],<br>        "outboundTag": "proxy"<br>      &#125;<br>    ]<br>  &#125;,<br>  "other": &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>V2rayN客户端生成的配置文件没有out的规则, 之前一直傻乎乎的以为有默认配置.</p><p>路由表</p><p>rules 对应一个数组，数组中每个元素是一个规则。对于每一个连接，路由将根据这些规则依次进行判断，当一个规则生效时，即将这个连接转发至它所指定的outboundTag.<br><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">"routing": &#123;<br>    //注：全域名规则匹配<br>    "domainStrategy": "AsIs",<br>    "rules": [<br>      &#123;<br>        "type": "field",<br>        "domain": [<br>          //注：填写对应域名和host<br>          "domain:domain.Name"<br>        ],<br>        "outboundTag": "dicert"<br>      &#125;,<br>      &#123;<br>        "type": "field",<br>        "inboundTag": [<br>          "socks-in",<br>          "http-in"<br>        ],<br>        "outboundTag": "proxy"<br>      &#125;<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前websocket+tls+cdn应该是最好的选择,然而使用cloudflare速度太慢,需要考虑使用国内的CDN服务商.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="!https://www.mingjinglu.com/coding/425.html">v2ray + CDN</a><br><a href="!https://www.lingbaoboy.com/2019/03/v2raywebsocket-tls-web.html?m=1">V2RAY配置WebSocket + TLS + Web</a><br><a href="!https://github.com/KiriKira/vTemplate">V2ray Templates</a><br><a href="!https://toutyrater.github.io/advanced/cdn.html">V2ray 配置</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/2019/09/14/2019/Android/"/>
      <url>/2019/09/14/2019/Android/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%e5%ae%89%e5%8d%93%e6%80%bb%e8%a7%88">安卓总览</a></li><li><a href="#%e7%bc%96%e7%a8%8b%e8%8c%83%e5%bc%8f">编程范式</a></li><li><a href="#ui">UI</a></li><li><a href="#%e5%ae%9a%e6%97%b6%e5%99%a8">定时器</a></li><li><a href="#sqllite">SQLlite</a></li></ul><h2 id="安卓总览"><a href="#安卓总览" class="headerlink" title="安卓总览"></a>安卓总览</h2><p><a href="https://www.jianshu.com/p/6f64ef6d547a" target="_blank" rel="noopener">四大组件、六大布局、五大存储</a></p><p><a href="https://developer.android.com/guide/components/fundamentals" target="_blank" rel="noopener">官方文档</a></p><ol><li><a href="https://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="noopener">Service</a></li><li><a href="">broadcastReceiver</a></li><li><a href="https://blog.csdn.net/Android_Tutor/article/details/5772285" target="_blank" rel="noopener">Activity</a></li><li><a href="">ContentProvider</a></li></ol><p><img src="/blog_images/2019-09-15-16-56-26.png" alt="Activity的生命周期"></p><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><ol><li><a href="https://blog.csdn.net/carson_ho/article/details/51719519" target="_blank" rel="noopener">layout</a></li><li>shape:<a href="https://blog.csdn.net/java_go_go_go/article/details/81220747" target="_blank" rel="noopener">为组件添加样式</a></li><li></li></ol><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a><a href="https://blog.csdn.net/u012527802/article/details/70230110" target="_blank" rel="noopener">定时器</a></h2><p>方法: <code>setRepeating(int type，long startTime，long intervalTime，PendingIntent pi)</code></p><table><thead><tr><th>type</th><th>说明</th></tr></thead><tbody><tr><td>AlarmManager.ELAPSED_REALTIME</td><td>表示闹钟在手机睡眠状态下不可用，该状态下闹钟使用相对时间（相对于系统启动开始），状态值为3</td></tr><tr><td>AlarmManager.ELAPSED_REALTIME_WAKEUP</td><td>表示闹钟在睡眠状态下会唤醒系统并执行提示功能，该状态下闹钟也使用相对时间，状态值为2</td></tr><tr><td>AlarmManager.RTC</td><td>表示闹钟在睡眠状态下不可用，该状态下闹钟使用绝对时间，即当前系统时间，状态值为1；</td></tr><tr><td>AlarmManager.RTC_WAKEUP</td><td>表示闹钟在睡眠状态下会唤醒系统并执行提示功能，该状态下闹钟使用绝对时间，状态值为0；</td></tr><tr><td>AlarmManager.POWER_OFF_WAKEUP</td><td>表示闹钟在手机关机状态下也能正常进行提示功能，所以是5个状态中用的最多的状态之一，该状态下闹钟也是用绝对时间，状态值为4；不过本状态好像受SDK版本影响，某些版本并不支持；</td></tr></tbody></table><p>时间以毫秒为单位</p><p>PendingIntent pi：是闹钟的执行动作，比如发送一个广播、给出提示等等。PendingIntent是Intent的封装类。<br><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PendingIntent sender=PendingIntent.getBroadcast(Main.<span class="hljs-keyword">this</span>, <span class="hljs-number">0</span>, intent, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></p><h2 id="SQLlite"><a href="#SQLlite" class="headerlink" title="SQLlite"></a><a href="https://www.jianshu.com/p/8e3f294e2828" target="_blank" rel="noopener">SQLlite</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/944365-f46f7030ad445462.png?imageMogr2/auto-orient/strip|imageView2/2/w/1090/format/webp" alt="存储方式"></p><p>主要操作:</p><ol><li>getWritableDatabase:创建 or 打开 可读/写的数据库（通过 返回的SQLiteDatabase对象 进行操作）</li><li>getReadableDatabase:创建 or 打开 可读的数据库（通过 返回的SQLiteDatabase对象 进行操作）</li><li>onCreate(SQLiteDatabase db): 数据库第1次创建时 则会调用.在继承SQLiteOpenHelper类的子类中复写.</li><li>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)数据库升级时自动调用.在继承SQLiteOpenHelper类的子类中复写.</li><li>(Cursor) query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit): 查询</li><li>(long) insert(String table,String nullColumnHack,ContentValues values) </li><li>(int) update(String table, ContentValues values, String whereClause, String[] whereArgs) </li><li>(int) delete(String table,String whereClause,String[] whereArgs) </li><li>(void) execSQL(String sql):直接运行sql语句</li></ol>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛化程度</title>
      <link href="/2019/05/17/2019/%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%A6/"/>
      <url>/2019/05/17/2019/%E6%B3%9B%E5%8C%96%E7%A8%8B%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p>可能一些词语使用的不太恰当,一时也想不出好的词,可能存在冒用.  </p><ul><li>有效区间: 激活函数导数较大的区域.如果导数很小,那么梯度无法传播,权值得不到调整,因此认为是无效的(sigmoid的有效区域为(-3,3),tanh为(-1,1) 这类曲线的界限比较模糊. Hardtanh,或ReLU这类分段线性的函数则是确定的)  </li><li>泛化程度:如果较少的数据用来学习,那么泛化能力必然低;反之亦然.类似,训练样本在神经有效区域内的数目,决定了学习的空间.数目越多则泛化程度越高. 用t=有效区域内的样本/样本总数 表示.  </li><li>宽度: 有效区间长度/2  </li><li>中心: 有效区间的中心.</li></ul><p>前面尝试在激活函数前,通过一系数k使得神经元在训练集中被激活的比例达到t.  </p><p>在神经网络激活函数前增加一系数k:<br>$$g(k<em>Z),Z = w x +b$$<br>假设g为sigmoid.k越大,则其有效区域越小;反之越大.<br>$$ width=\frac{1}{k</em>w}, center = -b/w$$<br>k可以改变有效区域长度,而不改变其中心.</p><p>由于系数k直接直接根据激活占比t,只能改变宽度.这样直接固定了神经元的泛化程度,实际上减少了神经元的差异性.<br><img src="/blog_images/2019-05-17-20-05-19.png" alt=""></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a><a href="https://www.kaggle.com/clouderow/nn-nb1?scriptVersionId=14292401" target="_blank" rel="noopener">实验</a></h1><p>生成的数据主要集中在原点附近,同时引入一点干扰以确认不会过拟合.<br><img src="/blog_images/2019-05-17-18-20-50.png" alt=""></p><p>网络结构如下:</p><pre><code>mid =50model = nn.Sequential(    nn.Linear(1,mid),    nn.Tanh(), # 有效趋于为-1~1,比sigmoid更好判断.    nn.Linear(mid,1))</code></pre><h2 id="结果一-center和loss"><a href="#结果一-center和loss" class="headerlink" title="结果一: center和loss"></a>结果一: center和loss</h2><p>经过16001轮训练后,我发现其50个神经元的中心移动轨迹如下:<br><img src="/blog_images/2019-05-17-18-25-20.png" alt=""><br>横坐标是中心的位置,纵坐标是迭代的次数,同一颜色是同一神经元.(从下往上看就是一个神经元的中心变化情况)</p><p>可以发现0-10和60-100之间出现了2次快速移动的情况.同时观察loss的变化,可以发现在神经元移动的同时,loss也在快速下降:<br><img src="/blog_images/2019-05-17-18-30-20.png" alt=""></p><h2 id="结果二-center和width"><a href="#结果二-center和width" class="headerlink" title="结果二: center和width"></a>结果二: center和width</h2><p>观察中心点和宽度的关系,图左为未训练的关系图,图右为训练后:<br><img src="/blog_images/2019-05-17-18-36-47.png" alt="初始状态"><img src="/blog_images/2019-05-17-18-35-01.png" alt="训练后"><br>可以明显观察到,原点附近的神经元宽度更小.</p><h2 id="结果三-shift"><a href="#结果三-shift" class="headerlink" title="结果三: shift"></a>结果三: shift</h2><p>$$ width=\frac{1}{w}=\frac{center}{-b}=, center = -b/w$$<br>这表明神经网络可以在原点附近的刻画细致的形状,而远离原点趋于线性表达.因此对原有数据进行shift.<br>神经元未在0.5附近聚集,且其宽度也较大,因此拟合程度欠佳.<br><img src="/blog_images/2019-05-17-19-01-26.png" alt=""><img src="/blog_images/2019-05-17-19-02-00.png" alt=""></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>训练神经元可以分为2个阶段,移动和塑形.移动阶段,loss能快速地下降,这也是调整网络形状的黄金时期.而在塑性阶段,由于只改变后面一层网络的权值所以修改幅度有限,loss下降缓慢,趋于收敛.</p><p>更小的宽度有利于刻画更加细致的形状.</p><p>理想的center-width为 神经元聚集在数据密集的地方,且越密集width越小. </p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>以上讨论说明了数据处理的重要性.最好将其处理的到(0,1). 但是如果真实数据是双峰的呢?</p><p>能否提出一种权值初始化的方案, 使得网络一开始就能快速学习?</p><p>用正态分布初始化权值,聚集在0.5附近;10001轮以后<br><img src="/blog_images/2019-05-17-20-34-21.png" alt=""><img src="/blog_images/2019-05-17-20-36-09.png" alt=""></p><p>分段线性函数(Hardtanh,ReLU等)区别挺大的.移动不明显.</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAR</title>
      <link href="/2019/05/11/2019/HAR/"/>
      <url>/2019/05/11/2019/HAR/</url>
      
        <content type="html"><![CDATA[<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p><a href="https://archive.ics.uci.edu/ml/datasets/human+activity+recognition+using+smartphones" target="_blank" rel="noopener">HAR</a><br>该数据集包含561个特征,拥有6个分类.共10299条数据. 利用智能手机,通过加速度计和陀螺仪,以50HZ的频率采样得到3维的加速度和角速度信息.</p><h1 id="LogisticRegression"><a href="#LogisticRegression" class="headerlink" title="LogisticRegression"></a>LogisticRegression</h1><p><img src="/blog_images/2019-05-11-09-35-06.png" alt=""><img src="/blog_images/2019-05-11-09-53-54.png" alt="对附近10个数据做平均"></p><h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><p>相关论文使用SVM做分类器.<br><img src="/blog_images/2019-05-11-09-47-10.png" alt=""></p><h1 id="单隐层"><a href="#单隐层" class="headerlink" title="单隐层"></a>单隐层</h1><p>结构</p><pre><code>Sequential((0): Linear(in_features=561, out_features=600, bias=True)(1): Sigmoid()(2): Linear(in_features=600, out_features=6, bias=True))</code></pre><p><img src="/blog_images/2019-05-11-10-09-57.png" alt=""><img src="/blog_images/2019-05-11-10-09-50.png" alt=""></p><p>结构</p><pre><code>Sequential((0): Linear(in_features=561, out_features=600, bias=True)(1): Tanh()(2): Linear(in_features=600, out_features=6, bias=True))</code></pre><p><img src="/blog_images/2019-05-11-10-11-55.png" alt=""><img src="/blog_images/2019-05-11-11-16-21.png" alt="loss"> </p><p>结构</p><pre><code>Sequential((0): Linear(in_features=561, out_features=600, bias=True)(1): ReLU()(2): Linear(in_features=600, out_features=6, bias=True))</code></pre><p><img src="/blog_images/2019-05-11-10-18-10.png" alt=""><img src="/blog_images/2019-05-11-10-18-21.png" alt=""></p><h1 id="KSelection"><a href="#KSelection" class="headerlink" title="KSelection"></a>KSelection</h1><p>首先分析数据的分布情况.<br><img src="/blog_images/2019-05-11-10-23-55.png" alt="神经元激活的比例(前5个),ac为tanh"><br>平均占比也有0.98.且采用logistic regression也取得了不错的结果.由此可见有很大一块区域为线性的.</p><p>首先使用d=0.2的KTanh做尝试.<br><img src="/blog_images/2019-05-11-10-47-17.png" alt="confusion matrix"><br><img src="/blog_images/2019-05-11-11-25-07.png" alt="loss"><br><img src="/blog_images/2019-05-11-10-47-28.png" alt="前5给神经元的k值">  </p><p>问题<br><img src="/blog_images/2019-05-11-10-57-35.png" alt="k值震荡"><img src="/blog_images/2019-05-11-10-59-07.png" alt="震荡神经元的t值"></p><p>而在简单任务(sin x)的学习中的:<br><img src="/blog_images/2019-05-11-11-02-56.png" alt="t"><img src="/blog_images/2019-05-11-11-03-03.png" alt="k"></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［论文］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文计划</title>
      <link href="/2019/05/07/2019/%E8%AE%BA%E6%96%87%E8%AE%A1%E5%88%92/"/>
      <url>/2019/05/07/2019/%E8%AE%BA%E6%96%87%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>我想写一篇关于修改数据分布提升神经网络性能的文章.我认为神经网络是通过选择数据中的部分关键数据,不断进行筛选,汇总,最后达到极高的性能.</p><p><a href="http://ssci2019.org/" target="_blank" rel="noopener">http://ssci2019.org/</a></p><h1 id="资料"><a href="#资料" class="headerlink" title="资料:"></a>资料:</h1><p><a href="https://zhuanlan.zhihu.com/p/44406909" target="_blank" rel="noopener">拟合能力</a><br><a href="https://arxiv.org/abs/1502.03167" target="_blank" rel="noopener">Batch normalization</a><br><a href="https://www.zhihu.com/question/38102762" target="_blank" rel="noopener">BN 为什么效果好?</a><br><a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf" target="_blank" rel="noopener">Efficiency BP</a><br><a href="https://blog.csdn.net/zkp_987/article/details/78684855" target="_blank" rel="noopener">数据处理:白化、去均值、归一化、PCA</a><br>Covariate Shift : Covariate Shift Adaptation by Importance Weighted Cross Validation</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="sigmoid-d-0-1"><a href="#sigmoid-d-0-1" class="headerlink" title="sigmoid, d = 0.1"></a>sigmoid, d = 0.1</h2><p><img src="/blog_images/2019-05-08-21-22-09.png" alt="信息留存百分比"><img src="/blog_images/2019-05-08-21-24-45.png" alt="缩放比k"></p><h2 id="Relu"><a href="#Relu" class="headerlink" title="Relu"></a>Relu</h2><p>ReLU是非饱和的非线性函数,因此无法通过缩放区间来增加或者减少数据容量.只能通过移动bias来修改容量.由于很难判断那个方向是增加或者减少数据容量,所以通过试验法.<br><img src="/blog_images/2019-05-08-21-59-35.png" alt="net1为ReLU,net1在ReLU前增加偏置"><br><img src="/blog_images/2019-05-08-22-08-59.png" alt="上为占比,下为bias,有16个神经元失效(占比为0)"></p><h2 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h2><p>$$ tanh(k x)/k$$<br>在缩放区间的同时,尽量保持原来部分的形状.</p><p>使用MNIST训练,  下面是采用非缩放情况下的tanh.<br>Test set: Average loss: 0.1510, Accuracy: 9567/10000 (96%)<br><img src="/blog_images/2019-05-10-13-12-17.png" alt="losses"><br><img src="/blog_images/2019-05-10-13-14-47.png" alt="t,平均占比在0.9以上">  </p><p>d=0.9缩放<br>Test set: Average loss: 0.1180, Accuracy: 9659/10000 (97%)<br><img src="/blog_images/2019-05-10-13-24-41.png" alt="losses"><br><img src="/blog_images/2019-05-10-13-27-49.png" alt="t,平均0.88"><br><img src="/blog_images/2019-05-10-13-30-52.png" alt="k,收敛慢"></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［翻译,资料］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KSelection</title>
      <link href="/2019/05/05/2019/Kselection/"/>
      <url>/2019/05/05/2019/Kselection/</url>
      
        <content type="html"><![CDATA[<p>如果把神经网络分为<strong>选择</strong>与<strong>重构</strong>两个部分,神经网络能够不断剔除无用信息(针对任务),保留有效信息,从而归结出结论(识别或者回归).那么可不可以通过修改选择来提升网络性能?</p><h1 id="KSelection"><a href="#KSelection" class="headerlink" title="KSelection"></a>KSelection</h1><p>在神经网络激活函数前增加一系数k:<br>$$g(k<em>Z),Z = w x +b$$<br>假设g为sigmoid.k越大,则其有效区域越小;反之越大.<br>$$ len=\frac{8}{k</em>w}, center = -b/w$$<br>k可以改变有效区域长度,而不改变其中心.</p><h1 id="选择部分有用信息"><a href="#选择部分有用信息" class="headerlink" title="选择部分有用信息"></a>选择部分有用信息</h1><p>如果眼前的图像太小怎么办呢?放大!<br><img src="/blog_images/2019-05-05-13-40-54.png" alt=""></p><p>我假设一组数据中只有20%是有用的. 那么可以通过修改k的值,修改数据的分布,使其20%落在有效区域上.<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x)</span>:</span><br>    res = x.clone()<br>    t = x[x &gt;= <span class="hljs-number">0.2</span>]<br>    res[x &gt;= <span class="hljs-number">0.2</span>] = <span class="hljs-number">1</span> + <span class="hljs-number">1</span>*(t - <span class="hljs-number">0.2</span>) ** <span class="hljs-number">3</span><br>    t = x[x &lt; <span class="hljs-number">0.2</span>]<br>    res[x &lt; <span class="hljs-number">0.2</span>] = <span class="hljs-number">1</span> + <span class="hljs-number">20</span>*(t - <span class="hljs-number">0.2</span>) ** <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="均有分布"><a href="#均有分布" class="headerlink" title="均有分布"></a>均有分布</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">efficiency_range</span><span class="hljs-params">(linear)</span>:</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">return</span> (-linear.bias) / linear.weight.flatten()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showNet</span><span class="hljs-params">(model)</span>:</span><br>    X = torch.linspace(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)<br>    y = model(X)<br>    plt.plot(X.numpy(), y.detach().numpy())<br><br>mid =<span class="hljs-number">60</span><br>net = nn.Sequential(<br>    nn.Linear(<span class="hljs-number">1</span>,mid),<br>    nn.Sigmoid(),<br>    nn.Linear(mid,<span class="hljs-number">1</span>)<br>)<br><br>net1 = nn.Sequential(<br>    nn.Linear(<span class="hljs-number">1</span>,mid),<br>    SAAC(mid),<br>    nn.Linear(mid,<span class="hljs-number">1</span>)<br><br>)<br><br>X = torch.linspace(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)<br><br>plt.plot(X.numpy(),(torch.sin(<span class="hljs-number">10</span>*X)).numpy())<br><br>loss_fun = nn.MSELoss()<br>opt = optim.Adam(net.parameters())<br>rec=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10001</span>):<br>    X = torch.linspace(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)<br>    Y = torch.sin(<span class="hljs-number">10</span>*X)<br>    pred = net(X)<br>    loss = loss_fun(pred,Y)<br>    opt.zero_grad()<br>    loss.backward()<br>    opt.step()<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span>==<span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">f'<span class="hljs-subst">&#123;i&#125;</span>-loss: <span class="hljs-subst">&#123;loss&#125;</span>'</span>)<br>        rec.append(loss.item())<br><br>showNet(net)<br>rec1=[]<br>loss_fun = nn.MSELoss()<br>opt = optim.Adam(net1.parameters())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2001</span>):<br>    X = torch.linspace(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">200</span>).reshape(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>)<br>    Y = torch.sin(<span class="hljs-number">10</span>*X)<br>    pred = net1(X)<br>    loss = loss_fun(pred,Y)<br>    opt.zero_grad()<br>    loss.backward()<br>    opt.step()<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span>==<span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">f'<span class="hljs-subst">&#123;i&#125;</span>-loss: <span class="hljs-subst">&#123;loss&#125;</span>'</span>)<br>        rec1.append(loss.item())<br><br>showNet(net1)<br>plt.legend([<span class="hljs-string">'sin(10x)'</span>,<span class="hljs-string">'net'</span>,<span class="hljs-string">'net1'</span>])<br></code></pre></td></tr></table></figure><p><img src="/blog_images/2019-05-05-13-54-29.png" alt=""><img src="/blog_images/2019-05-05-13-53-32.png" alt="loss,蓝色为普通方法"><br>使用KSelection后提升了5倍的速度,取得了同样的结果.</p><h2 id="有偏样本"><a href="#有偏样本" class="headerlink" title="有偏样本"></a>有偏样本</h2><p>样本不再是[-1,1]之间的均有分布,而是<code>distributions.normal.Normal(0,1)</code>的正态分布.两个网络用同样的方法训练10001次<br><img src="/blog_images/2019-05-05-14-16-47.png" alt=""><img src="/blog_images/2019-05-05-14-17-01.png" alt=""><br>可以看到,用普通的方法网络无法收敛,而KSelection则缓慢地收敛.</p><h2 id="使用更少的神经元"><a href="#使用更少的神经元" class="headerlink" title="使用更少的神经元"></a>使用更少的神经元</h2><p>将隐层神经元改为10.<br><img src="/blog_images/2019-05-05-14-33-57.png" alt=""><img src="/blog_images/2019-05-05-14-34-06.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［构想］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hopfield Network</title>
      <link href="/2019/05/04/2019/Hopfield/"/>
      <url>/2019/05/04/2019/Hopfield/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Hopfield Network 最大的特点是所有神经元都在同一层,而且是全连接的.通常来讲，带有循环连接和非线性神经元的网络不太好分析，因为其行为比较难以捉摸：它们可以陷入稳态，可以振荡，甚至可以陷入混沌(除非你知道无限精度的初始状态，否则无法预测不远的将来的状态).所以Hopfield Network做出了一点限制,连接矩阵$W_{ij}$要求对称,$W_{ii}=0$.<br><img src="https://img-blog.csdn.net/20180112110954464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM5NzA3MTIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Hopfield"></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>能够存储信息,起到联想记忆的效果.<br><img src="https://img-blog.csdn.net/20180112112214261?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM5NzA3MTIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>第一行为训练的图片,第二行是加入噪声的图片,第三行是使用Hotfield Network还原后的图片<br><img src="/blog_images/2019-05-04-18-30-58.png" alt=""></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tutorialspoint.com/artificial_neural_network/artificial_neural_network_hopfield.htm" target="_blank" rel="noopener">Artificial Neural Network - Hopfield Networks</a></p><p><a href="https://blog.csdn.net/weixin_39707121/article/details/79041536" target="_blank" rel="noopener">Hopfield神经网络</a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">E</span><span class="hljs-params">(W,V,input)</span>:</span><br>    n=len(input)<br>    e=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i):<br>            e+= -W[i,j]*V[i]*V[j]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>        e+=-input[i]*V[i]<br>    <span class="hljs-keyword">return</span> e<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span><span class="hljs-params">(sample_set)</span>:</span><br>    m,n=sample_set.shape<br>    W = np.zeros((n,n),dtype=int)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n):<br>            <span class="hljs-keyword">if</span> i == j:<br>                <span class="hljs-keyword">continue</span><br>            W[i,j]=((<span class="hljs-number">2</span>*sample_set[:,i]<span class="hljs-number">-1</span>)*(<span class="hljs-number">2</span>*sample_set[:,j]<span class="hljs-number">-1</span>)).sum()<br>    <span class="hljs-keyword">return</span> W<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span><span class="hljs-params">(sample,W)</span>:</span><br>    V = sample.reshape(<span class="hljs-number">-1</span>).copy()<br>    l = len(V)<br>    e=<span class="hljs-number">0</span><br>    e1=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> e!=e1:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.random.choice(range(l),l,<span class="hljs-keyword">False</span>):<br>            V[i]+=V.dot(W[:,i])<br>            <span class="hljs-keyword">if</span> V[i]&lt;<span class="hljs-number">0</span>:<br>                V[i]=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> V[i]&gt;<span class="hljs-number">0</span>:<br>                V[i]=<span class="hljs-number">1</span><br>        e1=e<br>        e=E(W,V,sample.reshape(<span class="hljs-number">-1</span>))<br>        print(e)<br>    <span class="hljs-keyword">return</span> V.reshape(sample.shape)<br><br>sample = np.random.randint(<span class="hljs-number">2</span>,size=(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),dtype=int)<br>W=train(sample.reshape(<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>))<br>fig,axes =plt.subplots(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,dpi=<span class="hljs-number">200</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>    axes[<span class="hljs-number">0</span>,i].imshow(sample[i])<br>    t = sample[i].copy()<br>    mask =np.random.rand(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)&lt;<span class="hljs-number">0.2</span><br>    t[mask]=<span class="hljs-number">1</span>-t[mask]<br>    axes[<span class="hljs-number">1</span>,i].imshow(t)<br>    axes[<span class="hljs-number">2</span>,i].imshow(test(t,W))<br></code></pre></td></tr></table></figure><h1 id="Momory-and-Attractor-Dynamics"><a href="#Momory-and-Attractor-Dynamics" class="headerlink" title="Momory and Attractor Dynamics"></a><a href="https://neuronaldynamics.epfl.ch/online/Ch17.html" target="_blank" rel="noopener">Momory and Attractor Dynamics</a></h1><h2 id="Hopfield-Model"><a href="#Hopfield-Model" class="headerlink" title="Hopfield Model"></a>Hopfield Model</h2><p>Hopfield model包含$N$个神经元.在Hopfield model中每个神经元只有两个状态$S_i$.(一般有二种表示方式,0/1或者-1/1).以离散的时间步长$\Delta t$动态地演化.<br>神经元之间通过$w_{ij}$相互作用.某一神经元的输入对其他神经元的影响可以表示为:<br>$$h_{i}(t)=\sum_{j}w_{ij}\,S_{j}(t)\,.$$<br>在t时刻输入(The input potential)影响下一时刻状态变量$S_i$的更新概率:<br>$${\rm Prob}{S_{i}(t+\Delta t)=+1|h_{i}(t)}=g(h_{i}(t))=g\left(\sum_{j}w_{ij}%<br>\,S_{j}(t)\right)\,$$<br>这里g是一个值域为0-1且单调递增的增益函数(gain function).一般选择使用$g(h)=0.5[1+\tanh(\beta h)]$.如果$\beta\to\infty$,那么当$h&gt;0$时$g(h)=1$否则为0.其动力学由此确定并且总结出更新规则(The dynamics are therefore deterministic and summarized by the update rule)<br>$$S_{i}(t+\Delta t)=\operatorname{sgn}[h(t)]$$<br>因为无限大的$\belta$是随机的.下面我们假定每一步更新神经元都是同步的(一起更新),但是另一个可能的更新方案是一次只更新一个神经元.</p><p>这一节的目的是说明选择合适的耦合矩阵(coupling matrix)$w_{ij}$可以记忆内容.</p><h2 id="Detour-Magnetic-analogy"><a href="#Detour-Magnetic-analogy" class="headerlink" title="Detour: Magnetic analogy"></a>Detour: Magnetic analogy</h2><p>磁性材料含有携带指针(a so-called spin)的原子.这个指针在微观下产生磁矩( magnetic moment),如图17.5A所示.在高温下磁矩可能指向任何方向.在低于一定温度下,所有原子的磁矩自发地互相对齐.结果所有原子磁矩的微观效果叠加使得材料出现磁性.<br><img src="https://neuronaldynamics.epfl.ch/online/x541.png" alt="17.5A"><img src="https://neuronaldynamics.epfl.ch/online/x542.png" alt="17.5B"></p><p>为了理解自发对齐是如何产生的,我们通过研究等式(17.2)(17.3)来类比磁性材料.我们先假定$w_{ij}=w_{0}&gt;0$,$i!=j$,$w_{ii}=0$.</p><p>每一个原子被赋予一个变量$S_{i}=\pm 1$,+1表示向上,-1表示向下.在$t=0$的时候,所有指针取+1,除了部分原子$S_{i}(0)=-1$.我们可以计算在$t=\delta t$时神经元i切换到$S_i=+1$的概率:<br>$${\rm Prob}{S_{i}(t+\Delta t)=+1|h_{i}(t)}=g(h_{i}(t))=g\left(\sum_{j=1}^{N}w_{ij}\,S_{j}(t)\right)=g(w_{0}\,(N-1))$$<br>这里$g(h)=0.5[1+\tanh(\beta h)]$,$w_{0}=\beta=1$.在物理系统中,$\belta$起到逆转温度的作用.如果$\belta$太小(高温),磁矩不再对齐并且材料失去自发组织的性质.</p><p>通过上式发现网络的规模越大概率也越大.我们的这个人工模型是在所有的原子直接相互作用.而在物理世界中,作用力随着距离增大快速地下降.所以式子可以改写成最近的4到20个邻居.但是有趣的是,神经元不同与原子,可以产生大范围的作用.因为他们有轴突(axonal cables )和树突(dendritic trees).因此神经元的拓扑邻居( topological neighbors)的数目是上千.</p><p>一个完美对齐排列的磁场看起来很无聊,但是物理学上有一些有趣的例子.在一些材料中,有2类不同的原子A和B,比如抗磁铁(anti-ferromagnets).如17.6A所示一个向上另一个向下,总和为0.</p><p>为抗磁铁做一个模型,我们选择作用力$w_{ij}=+1$如果i和j是用一种类别,否则为-1.利用算式(17.5),显示出在低温下抗磁铁的磁矩的组织方式.<br><img src="https://neuronaldynamics.epfl.ch/online/x543.png" alt="17.6"> <img src="https://neuronaldynamics.epfl.ch/online/x544.png" alt=""></p><p>同样的思路可以用在神经网络中,使用正负值表示相互作用力.图17.6B显示了神经元的激活(+1)和抑制(0-1).从抗磁铁提取出的规则意味着不同颜色神经元所连接的权值是负的,相同颜色为正.<br>$$w_{ij}=p_{i}\,p_{j}\,.$$<br>这个公式是Hopfield model的基础.</p><h2 id="Hopfield-模型中的模式"><a href="#Hopfield-模型中的模式" class="headerlink" title="Hopfield 模型中的模式"></a>Hopfield 模型中的模式</h2><p>Hopfield模型包含N个神经元,能够存储M个不同的模式. 模式$u, 1\leq\mu\leq M$.每一个模式被定义为一组期望配置(desire configuration)$\left{p_{i}^{\mu}=\pm 1;1\leq i\leq N\right}$.网络中的N个神经元能纠正模式u,如果$S_{i}(t)=S_{i}(t+\Delta t)=p_{i}^{\mu}$.</p><p>在网络的建立阶段,一个随机数值生成器生成为每个模式u的字符串.该字符串有N个独立的数字${p_{i}^{\mu}=\pm 1;1\leq i\leq N}$,带有明确的值$\langle p_{i}^{\mu}\rangle=0$.不同模式见的字符串是独立的.权值通过下式选择:<br>$$w_{ij}=c\sum_{\mu=1}^{M}p_{i}^{\mu}\,p_{j}^{\mu}\,$$<br>其中$c&gt;0$.网络是全连接的.如果是单模式且$c=1$,那么该式子就和抗磁铁一样.一般选择$c=1/N$<br><img src="https://neuronaldynamics.epfl.ch/online/x545.png" alt=""><img src="https://neuronaldynamics.epfl.ch/online/x546.png" alt=""><br>Fig. 17.7: Hopfield model. A. Top: Three random patterns μ=1,2,3 in a network of N=8 neurons. Black squares (pμi=+1) and white squares (pμi=−1) are arranged in random order. Bottom: The overlap m1=(1/N)∑ip1iSi(t) measures the similarity between the current state S(t)={Si(t);1≤i≤N} and the first pattern. Here only a single neuron exhibits a mismatch (dotted line). The desired value in the pattern is shown as black and white squares, while the current state is indicated as black and white circles; schematic figure. B. Orthogonal patterns have a mutual overlap of zero so that correlations are Cμν=(1/N)∑ipμipνi=δμν (top) whereas random patterns exhibit a small residual overlap for μ≠ν (bottom).</p><h2 id="模式恢复"><a href="#模式恢复" class="headerlink" title="模式恢复"></a>模式恢复</h2><p>在很多记忆恢复的实验中,在回忆事件开始时给出局部信息的线索.通过验证丢失信息的完成度来评估记忆内容的恢复程度.</p><p>为了在hopfield 模型中模仿记忆恢复,给出网络初始值$S(t_{0})={S_{i}(t_{0});1\leq i\leq N}$.初始化后,网络在动力学下自由演化.理想情况下动力学会收敛到一个固定的相关模式u上,这个模式与初始状态是最接近的.</p><p>为了衡量相似度,我们提出重叠.(每个点相同为1不同为-1)<br>$$m^{\mu}(t)={1\over N}\sum_{i}p_{i}^{\mu}\,S_{i}(t)\,.$$<br>如果模式被恢复重叠度最大为1,当$S_{i}(t)=p_{i}^{\mu}$.如果当前状态与模式u完全不相关,它会接近于0.如果每个神经元的取值都相反,此时达到最小值$m^{\mu}(t)=-1$.</p><p>重叠度在分析网络动力学中扮演了重要作用.实际上,输入$h_i$是:<br>$$h_{i}(t)=\sum_{j}w_{ij}\,S_{j}(t)=c\sum_{j=1}^{N}\sum_{\mu=1}^{M}p_{i}^{\mu}\,%<br>p_{j}^{\mu}\,S_{j}(t)=c\,N\,\sum_{\mu=1}^{M}p_{i}^{\mu}\,m^{\mu}(t)$$<br>为了使结果无关于输入规模的大小,使用标准化系数$c=1/N$.下面除非特别说明,总使用这个系数.</p><p>为了进一步讨论,我们现在在动力学公式并且发现<br>$${\rm Prob}{S_{i}(t+\Delta t)=+1|h_{i}(t)}=g\left[\sum_{\mu=1}^{M}p_{i}^{\mu}%<br>\,m^{\mu}(t)\right]\,.$$<br><img src="https://neuronaldynamics.epfl.ch/online/x547.png" alt=""><img src="https://neuronaldynamics.epfl.ch/online/x548.png" alt=""><br>Fig. 17.8: Memory retrieval in the Hopfield model. A. The overlap mν(t+Δt) with a specific pattern ν is given as a function of the overlap with the same pattern mν(t) in the previous time step (solid line); cf. Eq. (17.16). The overlap with the M−1 other patterns is supposed to vanish. The iterative update can be visualized as a path (arrow) between the overlap curve and the diagonal (dashed line). The dynamics approach a fixed point (circle) with high overlap corresponding to the retrieval of the pattern. B. The probability Perror that during retrieval an erroneous state-flip occurs corresponds to the shaded area under the curve; cf. Eq. (17.20). The width σ of the curve is proportional to the pattern load M/N; schematic figure.</p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［神经网络,TODO］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解神经元</title>
      <link href="/2019/04/29/2019/%E7%90%86%E8%A7%A3%E7%A5%9E%E7%BB%8F%E5%85%83/"/>
      <url>/2019/04/29/2019/%E7%90%86%E8%A7%A3%E7%A5%9E%E7%BB%8F%E5%85%83/</url>
      
        <content type="html"><![CDATA[<p>神经元计算公式为:<br>$$a=g(w_i^T x)$$<br>g为sigmoid函数,其特点是在左侧接近0,在右侧接近1,其导数也具备类似性质.<br><img src="/blog_images/2019-04-29-09-43-05.png" alt=""></p><p>再看BP算法中梯度的计算.<br><img src="/blog_images/NN.jpg" alt="简化模型"><br> $$\delta^l=\frac{∂z^{l+1}}{∂z^{l}}=w^{k^T}z^{l+1}.*a^l.∗ (1−a^l)$$<br> $$\frac{∂J}{∂w^{l}}=\delta^{l+1}a^{l^T}$$</p><p>与第l层神经元$a^l$有关的权值有$w^{l}$,$w^{l+1}$.$a^l$越大,$w^{l+1}$的梯度越大;而$a^l$太大或者太小,$w^{l}$的梯度都越小.总的来说就是$a^l$接近0,那么对前后的权值都没有影响.如果接近0.5,那么前后的权值都能得到调整.如果接近1,那么只有后面的权值能够得到调整.</p><h1 id="前后weight"><a href="#前后weight" class="headerlink" title="前后weight"></a>前后weight</h1><p>前部weight决定了该神经元是否被激活,而后部weight决定了最后输出的形状.用$w_1$,$w_2$表示.<br>如果神经元的值为0或者1,那么它不能产生有效的形状,因此是无效的.<br>$$-4&lt;w_1 x+b&lt;4$$<br>$$w_1 x+b=0$$<br>所以神经元的有效区间长度为$8/w_1$,区间为$[(-b-4)/w_1,(-b+4)/w_1]$</p><p>这样就可以对神经元进行可视化.实际上最后的曲线是多个神经元叠加的效果,而这里显示的是单个神经元的效果.<br><img src="/blog_images/2019-04-29-12-10-50.png" alt=""></p><p>$$ len=8/w, center = -b/w$$</p><h1 id="调整神经元形状"><a href="#调整神经元形状" class="headerlink" title="调整神经元形状"></a>调整神经元形状</h1><p>$$ len = -8<em>center/b$$<br>这个算式说明,中心远离原点的神经元其有效区间长度也比较大.也就是说在远处神经元无法精确拟合一段函数.<br>对原来的算式进行一点修改,<br>$$a=g(k</em>(w_i^T x))$$<br>得到:<br>$$ len=\frac{8}{k*w}, center = -b/w$$<br>这样就在不改变中心点位置的情况下调整有效区间的长度,因而可以提高神经网络的精细程度.</p><p>如图为k=0.3时的图形,此时函数可以看作是多个神经元叠加的效果,因此更加光滑.<br><img src="/blog_images/2019-04-29-13-02-48.png" alt=""><br>因此如果神经元数量过多,而数据量太少就会导致的<strong>过拟合</strong>.其实就是部分神经元没有得到训练,因为他们的有效区间很窄.通过正则化,减少权值大小,扩大有效区域长度.但是如果神经元的有效区域太大,最后的形状就是所有神经元共同决定的,这样也就很难习得精确的形状.</p><p><img src="/blog_images/2019-04-29-13-15-06.png" alt="40轮"><br><img src="/blog_images/2019-04-29-13-30-10.png" alt="400轮"><br>60个神经元拟合sin函数,k=1</p><p>那么反过来,提高weight减少有效区长度.这样保证在一段内只有少数神经元得到激活训练,这样可以获得更加精确地拟合.</p><p><img src="/blog_images/2019-04-29-13-22-01.png" alt="400轮"><br>60个神经元拟合sin函数,k=10</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这也解释了神经网络中的很多事</p><h2 id="为什么要对数据进行处理"><a href="#为什么要对数据进行处理" class="headerlink" title="为什么要对数据进行处理?"></a>为什么要对数据进行处理?</h2><p>由于目前神经网络初始化的方法导致神经元的中间往往在原点附近,因此远离原点的数据收敛也慢.</p><h2 id="为什么深度网络难以训练"><a href="#为什么深度网络难以训练" class="headerlink" title="为什么深度网络难以训练?"></a>为什么深度网络难以训练?</h2><p>除了梯度爆炸\梯度消失等问题外,由于每增加一层网络都会产生一些没有被激活或者是饱和的神经元,到最后一层时,有效区域变得很少.</p><h1 id="二维数据的理解"><a href="#二维数据的理解" class="headerlink" title="二维数据的理解"></a>二维数据的理解</h1><p>同样对于一层神经元可以分为前后两部分,前部的weight和bias选择区域,后部的weight和bias决定形状.我选择一个二元函数来验证这一点:<br>$$z=\sin \left(x+0.1 y^2\right)$$<br><img src="/blog_images/2019-05-02-17-38-51.png" alt=""></p><p>使用20个隐层神经元的网络来拟合该函数.<br><img src="/blog_images/2019-05-02-17-41-58.png" alt=""></p><p>利用公式<br>$$ -3&lt;x<em>w_1+ y </em>w_2 + b&lt;3$$<br>得到有效区域.<img src="/blog_images/2019-05-02-17-40-34.png" alt="第8,10个神经元的有效区域"></p><p>然后分别将第8,10个神经元的后部权值置0(抹除该神经元的效果)后与原输出相减,绘制等高图.<br><img src="/blog_images/2019-05-02-17-49-10.png" alt="抹除第8个神经元"><br><img src="/blog_images/2019-05-02-17-50-23.png" alt="抹除第10个神经元"><br> 蓝色为0,黄色越深数值越大.</p><p><img src="/blog_images/2019-05-02-20-24-32.png" alt=""></p><p>#总结<br>因此神经网络可以理解为<strong>选择</strong>与<strong>重构</strong>.一个神经元选择数据集中的部分区域得以激活,然后在这块区域重构出目标函数的形状.</p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［构想］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广电网络</title>
      <link href="/2019/04/20/2019/%E5%B9%BF%E7%94%B5%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/04/20/2019/%E5%B9%BF%E7%94%B5%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>家里的电视盒升级了,过来的安装的时候发现除了一个机顶盒还有一个解调器.那么问题来了,能否白嫖广电的网络呢?<br><img src="/blog_images/2019-04-20-19-46-31.png" alt=""><br><img src="/blog_images/2019-04-20-19-47-20.png" alt=""><br><img src="/blog_images/2019-04-20-19-48-39.png" alt=""></p><h1 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h1><p>首先尝试直接将猫连接到路由器的WLAN口上,发现无法取得IP.那么有两种可能,1.需要拨号;2.只能访问特定的IP(广电的内部网络).取一个路由器,将猫与机顶盒都接在路由器的lan口上,这样路由器就起到了hub的效果,所有机顶盒访问的数据可以在lan上广播.再将PC连接无线到路由器上,用wiresharp抓包.</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>非常不幸的是无法获取到机顶盒发出的报文信息,但是确实需要网线才能播放节目,拔出网线后,节目无法播放.难道还有wiresharp不能捕获的数据包?</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>既然不知道机顶盒是如何通信的,那只能看看目前的网络是一个怎样的结构.</p><p><img src="/blog_images/2019-04-20-18-40-20.png" alt=""></p><p>在dns服务器同一网段下有不少设备,在浏览器中输入IP地址可以看到华为的landswitch登陆界面.还有的是zDNS.上图是tracert其中一个ip后,得到的一个中间节点.也就是机顶盒与DNS服务之间的一层的设备.</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>这个广电的猫确实能够访问外网,但是这个网络应该是一个大型的城域网,或者只能在广电内部访问.因此想白嫖是不可能的了.似乎能够使用IPTV,在电脑上播放电视.但是没啥用,不整了~~</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Neuroplasticity Network</title>
      <link href="/2019/04/19/2019/TSMCS/"/>
      <url>/2019/04/19/2019/TSMCS/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在一个100*100的虚拟环境中有960个有机体和50个食物.每隔50步在区域内随机均匀生成50个新食物,同时旧的食物会消失.而有机体由大脑模型和更新模型组成,能够感知最近的食物和移动,同时它会消耗能量需要不断进食来补充能量.通过遗传算法来筛选活的最好的个体,并最终希望得到一个能够良好运作的决策系统(brain model)和能够适应环境,改变决策的更新规则(plasticity model).</p><h1 id="Brain-Model"><a href="#Brain-Model" class="headerlink" title="Brain Model"></a>Brain Model</h1><p>由一个类似<a href="https://blog.csdn.net/silent56_th/article/details/68066752" target="_blank" rel="noopener">hopfield network</a>的网络组成.其中有两个位置传感器输入,两个上一次动作输入,以及3个内部神经元,和2个输出神经元,共九个神经元.初始神经元为全零.此外不同于一般的神经网络,这里使用9x9的bias.因此可以表示为<code>r1=torch.sigmoid(r.matmul(w)+b.sum(0))</code>,使用增广矩阵可以提升效率<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">re=torch.cat([r,ones([m,<span class="hljs-number">9</span>])],<span class="hljs-number">1</span>)<br>we=torch.cat([w,b],<span class="hljs-number">0</span>)<br>r2=sigmoid(re.matmul(we))<br></code></pre></td></tr></table></figure></p><p>此外该网络并不一定是全连接的,由一个9x9的<strong>连接矩阵M</strong>表示是否有连接.还有一个4x1的<strong>输入系数矩阵k</strong>对输入归一化.</p><h1 id="Plasticity-Model"><a href="#Plasticity-Model" class="headerlink" title="Plasticity Model"></a>Plasticity Model</h1><p>这里希望习得一个能够更新权值的规则.在前向神经网络中,一般可以对损失函数进行求导,进而使用BP来更新权值.而在这个问题中,很难设计出一个合理的损失函数来求导,那么怎么计算$\Delta w$呢?干脆设计一个可以计算$\Delta w$的网络,然后交给遗传算法来判断.<br><img src="/blog_images/BA8@O2[OOQDA655_Y8~{YZU.png" alt=""></p><h1 id="Farm"><a href="#Farm" class="headerlink" title="Farm"></a>Farm</h1><p>假设这些有机体生活在一个100x100的农场里.这些有机体在农场里生活竞争,然后繁殖进化,最后得到强大的个体.</p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> 遗传算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传算法</title>
      <link href="/2019/04/18/2019/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
      <url>/2019/04/18/2019/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h1><p>遗传算法（Genetic Algorithm, GA）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。<br>其主要特点是直接对结构对象进行操作，不存在求导和函数连续性的限定；具有内在的隐并行性和更好的全局寻优能力；采用概率化的寻优方法，不需要确定的规则就能自动获取和指导优化的搜索空间，自适应地调整搜索方向。<br>遗传算法以一种群体中的所有个体为对象，并利用随机化技术指导对一个被编码的参数空间进行高效搜索。其中，选择、交叉和变异构成了遗传算法的遗传操作；参数编码、初始群体的设定、适应度函数的设计、遗传操作设计、控制参数设定五个要素组成了遗传算法的核心内容。</p><pre><code>作者：短短的路走走停停被抢注啦链接：https://www.jianshu.com/p/ae5157c26af9来源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</code></pre><p><img src="/blog_images/2019-04-18-19-27-07.png" alt="遗传算法过程"></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>下面通过遗传算法来求解一个简单函数的最优化问题。目标函数，适应度函数为：<br>$$ sin(x*12)/(1+x) $$</p><p><img src="/blog_images/2019-04-18-19-28-35.png" alt=""></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>首先要给出求解区域的范围。这里就定为[0,1)，然后分成16份。实现：<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(chromosome)</span>:</span><br>    s=<span class="hljs-number">0</span><br>    j=<span class="hljs-number">1</span>/<span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>        s+=chromosome[i]*j<br>        j/=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span><span class="hljs-params">(x)</span>:</span><br>    x=int(<span class="hljs-number">16</span>*x)<br>    chromosome=[]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>        chromosome.append(x%<span class="hljs-number">2</span>)<br>        x=x//<span class="hljs-number">2</span><br>    chromosome.reverse()<br>    <span class="hljs-keyword">return</span> chromosome<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fitness</span><span class="hljs-params">(chromosome)</span>:</span><br>    x=decode(chromosome)<br>    <span class="hljs-keyword">return</span> math.sin(x*<span class="hljs-number">12</span>)/(x+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p><h2 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h2><p>因为问题规模比较小，就生成一个规模为4的种群吧。<code>population = [encode(x) for x in np.random.rand(4)]</code></p><h2 id="Tournament-selection"><a href="#Tournament-selection" class="headerlink" title="Tournament selection"></a><a href="https://en.wikipedia.org/wiki/Tournament_selection" target="_blank" rel="noopener">Tournament selection</a></h2><p>竞赛选择法。有两个参数：竞赛规模(tournament size)，参加每一次竞赛的个体数量；选择概率p，第一名被选择的概率为p，第二名为(1-p)*p…<br>这里竞赛规模为2，p为1，因此需要进行4次竞赛。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection</span><span class="hljs-params">(pop,num=<span class="hljs-number">4</span>)</span>:</span><br>    fits = [fitness(k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> pop]<br>    fits = np.array(fits)<br>    l=[]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(num):<br>        selected=np.random.choice(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,replace=<span class="hljs-keyword">False</span>)<br>        l.append(pop[fits[selected].argmax()])<br>    <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></table></figure></p><h2 id="Cross"><a href="#Cross" class="headerlink" title="Cross"></a><a href="https://www.tutorialspoint.com/genetic_algorithms/genetic_algorithms_crossover.htm" target="_blank" rel="noopener">Cross</a></h2><p>采用Uniform Crossover。每一个基因点位都有相同的概率被选择。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crossover</span><span class="hljs-params">(p1,p2)</span>:</span><br>    l=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(p1)):<br>        p=np.random.rand(<span class="hljs-number">4</span>)<br>        chromosome=[]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> p[j]&lt;<span class="hljs-number">0.5</span>:<br>                chromosome.append(p1[i][j])<br>            <span class="hljs-keyword">else</span>:<br>                chromosome.append(p2[i][j])<br>        l.append(chromosome)<br><br>        p = np.random.rand(<span class="hljs-number">4</span>)<br>        chromosome = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> p[j] &lt; <span class="hljs-number">0.5</span>:<br>                chromosome.append(p1[i][j])<br>            <span class="hljs-keyword">else</span>:<br>                chromosome.append(p2[i][j])<br>        l.append(chromosome)<br>    <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></table></figure></p><h2 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h2><p>每一个基于位都有0.1的概率发生变异。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mutation</span><span class="hljs-params">(pop)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(pop)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(pop[i])):<br>            <span class="hljs-keyword">if</span> np.random.rand(<span class="hljs-number">1</span>)&lt;<span class="hljs-number">0.1</span>:<br>                pop[i][j]=<span class="hljs-number">1</span>-pop[i][j]<br></code></pre></td></tr></table></figure></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>把以上内容结合起来，种群迭代10代<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">population = [encode(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.random.rand(<span class="hljs-number">4</span>)]<br>print(population)<br>recorder=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):<br>    recorder.append((selection(population, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]))<br>    parent1 = selection(population, <span class="hljs-number">2</span>)<br>    parent2 = selection(population, <span class="hljs-number">2</span>)<br>    population = crossover(parent1, parent2)<br>    mutation(population)<br><br>best=selection(population, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>print([[decode(rec) <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> recorder]])<br>print([fitness(rec) <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> recorder])<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> 遗传算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解神经网络</title>
      <link href="/2019/04/16/2019/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/04/16/2019/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h1><p>机器学习很大程度上就是在建立一个模型F,使得F(X)能够很好地描述Y.即求F,$F(X)=Y$.并且有可以证明神经网络能够以任意精度模拟任意函数.这被称为<a href="https://blog.csdn.net/guoyunfei20/article/details/78288271" target="_blank" rel="noopener">万能近似定理（universal approximation theorrm）</a>.听上去挺牛逼的,但实际很普通,因为有许多别的方法可以达到这一效果,最简单地可以使用多项式展开来逼近.</p><p>所以问题的关键不是具备万能近似这个能力,而是如何快速有效地达到效果.SVM过慢,多项式展开会特征爆炸也过慢,而深度神经网络可能过拟合因而无效.不同模型在实现近似的时候气作用方式,效果都是不一样的.<br>我的假设是<strong>任何一种模型,乃至训练方法,会产生不同的形状.</strong></p><h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><p>比如高斯核的SVM会在支持向量附近的空间中产生一块圆形的区域.</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>对于线性模型,可以用一个超平面进行划分.而更复杂的模型就很难解释究竟是怎么工作的.一种解释办法是,多层神经网络进行了多次空间的划分和变换.尽管他们都有近似的能力,但是他们对同一问题的学习速度和效果会有不同.</p><p>做一个比喻.数据在空间中有特定的分布,这就好像是一个具有某种形状的模板,或者说是一个锁.而学习任务就是要生成一把要钥匙来打开它.而不同的模型和方法就是做钥匙的材料.如果你选择用木头来削出一把钥匙只要手艺好,也不是不可能,但是一定很费力.</p><h1 id="怎么理解"><a href="#怎么理解" class="headerlink" title="怎么理解?"></a>怎么理解?</h1><p>基于上面的假设,可以从材料的特点入手.<a href="https://zhuanlan.zhihu.com/p/42667844" target="_blank" rel="noopener">对抗样本</a>是一个很好的方法.</p><h2 id="神经网络是多孔洞结构"><a href="#神经网络是多孔洞结构" class="headerlink" title="神经网络是多孔洞结构"></a>神经网络是多孔洞结构</h2><p>一些实验表明,可以通过修改极少的像素就可以导致分类器出错.这说明在一个分类为1的特征附近也存在其他分类的特征.就好像海绵一样,中间有很多的孔洞通向其他分类.</p><h2 id="其本身也具备特定的形状"><a href="#其本身也具备特定的形状" class="headerlink" title="其本身也具备特定的形状"></a>其本身也具备特定的形状</h2><p>尽管我们是希望神经网络能够形成特定的形状,但是它本身也会产生一些形状.即使用不同的训练集,甚至是不同的网络结构,攻击样本都能取得良好的效果.因为一些攻击样本是独立于特定网络的.</p><h2 id="有偏好"><a href="#有偏好" class="headerlink" title="有偏好"></a>有偏好</h2><p>令神经网络学习某一特征最常用的办法就是增加数据.但是这很有可能是错误的,并不是出现的次数多就会引起关注.一些实验表明神经网络倾向于局部纹理特征,而非全局特征.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我认为理解神经网络最好的办法就是了解它的特性,而非权值可视化.通过构造一些特殊的特征,或者对原始图像进行修改然后分析网络的变化.通过对抗样本,消除特定特征等方式使神经网络发生根本性变化(输出不同的分类).那么这种方法就是神经网络所具备的特定.</p><p>相关领域: 对抗样本,sensitivity analysis.</p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ［构想］ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘图</title>
      <link href="/2019/04/07/2019/%E7%BB%98%E5%9B%BE/"/>
      <url>/2019/04/07/2019/%E7%BB%98%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>绘制图形的工具比较多，常用的有matplotlib，plotly，以及pytorch的visdom。matplotlib用的比较多，功能也十分强大也比较底层。可以设置的参数也多，用起来比较麻烦。相反visdom使用更加简便，也提供了足够的功能。两者最大的区别是，visdom是运行于云端的，自身也提供了存储，适合简单地分析使用。而matplotlib能绘制更加复杂，个性化的图。因此我打算在项目运行中使用visdom，这样我可以在云端实时监控训练状态。在论文中，如果需要更复杂的图就使用matplotlib。而plotly制作的图形更加强大，也提供云端访问和数据编辑功能，作为企业级的数据展示更加合理。</p><p>建议使用半天时间掌握visdom，和几类基本图形。再花半天时间理解matplotlib的概念和用法，毕竟很多代码是使用这个的且与matlab类似，要能读懂。编写项目展示的时候使用plotly，这个比较专业，最好是团队中有专人掌握，一般没必要精通。</p><h1 id="visdom"><a href="#visdom" class="headerlink" title="visdom"></a><a href="https://github.com/facebookresearch/visdom" target="_blank" rel="noopener">visdom</a></h1><p>基本概念： window，env，state，filter,view</p><h2 id="env-gt-window-view"><a href="#env-gt-window-view" class="headerlink" title="env-&gt;window - view"></a>env-&gt;window - view</h2><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>window是承载内容的主体，其数据存储在state中（.visdom目录下会创建json文件）。他是一个UI组件，可以显示plots, images, and text。还可以注册<code>callback</code>来监听用户的操作。</p><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>所有windowy以env为一组进行组织。</p><blockquote><p>当有大量数据需要实时绘制时。如果需要对比他们，最好放在同一个env下。多个env会消耗大量资源</p></blockquote><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter使用<strong>正则表达式</strong>来匹配window的title。</p><h2 id="view"><a href="#view" class="headerlink" title="view"></a>view</h2><p>view是window的排列方式</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>Visdom实例<br> <code>visdom</code> Arguments  </p><ul><li>server</li><li>port</li><li>offline 启用时将数据存在本地</li><li>log_to_filename</li></ul></li><li><p>绘图  </p><ul><li>vis.image : <code>CxHxW</code>，显示一张图片。但是可以存储一组<code>store_history</code></li><li>vis.images : <code>B x C x H x W</code></li><li>vis.text : 可以嵌入 HTML</li><li>vis.properties ： 输入组件,<code>Callback</code></li><li>vis.audio : audio</li><li>vis.video : videos</li><li>vis.svg : SVG object</li><li>vis.matplot : matplotlib plot</li></ul></li><li><p><a href="https://plot.ly/python/" target="_blank" rel="noopener">Plotly</a><br> 使用plotly提供常用数据的可视化，推荐使用这种方式。这种方式存储数据，而不是图像。</p><ul><li>vis.scatter : 2D or 3D scatter plots</li><li>vis.line : line plots</li><li>vis.stem : stem plots</li><li>vis.heatmap : heatmap plots</li><li>vis.bar : bar graphs</li><li>vis.histogram : histograms</li><li>vis.boxplot : boxplots</li><li>vis.surf : surface plots</li><li>vis.contour : contour plots</li><li>vis.quiver : quiver plots</li><li>vis.mesh : mesh plots<br><img src="https://camo.githubusercontent.com/d69475a01f9f327fc42931a21df8134d1fbdfc19/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d62714839555843772d42452f574c3255736472726241492f41414141414141416e59632f656d727877436d6e7257345f434c54797955747442305359524a2d693443436951434c63422f73302f53637265656e2b53686f742b323031372d30332d30362b61742b31302e35312e30322b414d2e706e67253232766973646f6d5f626967253232" alt="demo"><br>扩展，可以传入一个字典结构opts  </li><li>opts.title : figure title</li><li>opts.width : figure width</li><li>opts.height : figure height</li><li>opts.showlegend : show legend (true or false)</li><li>opts.xtype : type of x-axis (‘linear’ or ‘log’)</li><li>opts.xlabel : label of x-axis</li><li>opts.xtick : show ticks on x-axis (boolean)</li><li>opts.xtickmin : first tick on x-axis (number)</li><li>opts.xtickmax : last tick on x-axis (number)</li><li>opts.xtickvals : locations of ticks on x-axis (table of numbers)</li><li>opts.xticklabels : ticks labels on x-axis (table of strings)</li><li>opts.xtickstep : distances between ticks on x-axis (number)</li><li>opts.xtickfont : font for x-axis labels (dict of font information)</li><li>opts.ytype : type of y-axis (‘linear’ or ‘log’)</li><li>opts.ylabel : label of y-axis</li><li>opts.ytick : show ticks on y-axis (boolean)</li><li>opts.ytickmin : first tick on y-axis (number)</li><li>opts.ytickmax : last tick on y-axis (number)</li><li>opts.ytickvals : locations of ticks on y-axis (table of numbers)</li><li>opts.yticklabels : ticks labels on y-axis (table of strings)</li><li>opts.ytickstep : distances between ticks on y-axis (number)</li><li>opts.ytickfont : font for y-axis labels (dict of font information)</li><li>opts.marginleft : left margin (in pixels)</li><li>opts.marginright : right margin (in pixels)</li><li>opts.margintop : top margin (in pixels)</li><li><p>opts.marginbottom: bottom margin (in pixels)<br><strong>自定义绘图</strong> 将数据和参数传入Plotly</p>  <figure class="hljs highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">import visdom<br>vis = visdom.Visdom()<br><br><span class="hljs-keyword">trace</span> = dict(x=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], y=[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], mode=<span class="hljs-string">"markers+lines"</span>, type=<span class="hljs-string">'custom'</span>,<br>            <span class="hljs-keyword">marker</span>=&#123;<span class="hljs-string">'color'</span>: <span class="hljs-string">'red'</span>, <span class="hljs-string">'symbol'</span>: <span class="hljs-number">104</span>, <span class="hljs-string">'size'</span>: <span class="hljs-string">"10"</span>&#125;,<br>            <span class="hljs-keyword">text</span>=[<span class="hljs-string">"one"</span>, <span class="hljs-string">"two"</span>, <span class="hljs-string">"three"</span>], name=<span class="hljs-string">'1st Trace'</span>)<br><span class="hljs-keyword">layout</span> = dict(title=<span class="hljs-string">"First Plot"</span>, xaxis=&#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'x1'</span>&#125;, yaxis=&#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'x2'</span>&#125;)<br><br>vis._send(&#123;<span class="hljs-string">'data'</span>: [<span class="hljs-keyword">trace</span>], <span class="hljs-string">'layout'</span>: <span class="hljs-keyword">layout</span>, <span class="hljs-string">'win'</span>: <span class="hljs-string">'mywin'</span>&#125;)<br></code></pre></td></tr></table></figure><p>  <strong>注意</strong>data中必须添加<code>type=&#39;custom&#39;</code>才能生效。而且一些内容无法显示。如果有大量内容需要使用这个功能，不如直接使用plotly。</p></li></ul></li><li><p><a href="https://github.com/facebookresearch/visdom/blob/master/example/demo.py" target="_blank" rel="noopener">demo</a></p></li></ol><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a><a href="https://matplotlib.org/contents.html" target="_blank" rel="noopener">matplotlib</a></h1><p><img src="https://matplotlib.org/_images/anatomy.png" alt=""></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>figure表示一张图，Axes表示一个绘图元素，一个figure可以包含多个axes。axis表示轴，可以设置刻度，标签，范围等。<br>在内部matplotlib有一个状态机来存储当前的figure与axes，默认情况下<code>plot</code>会自动创建一个新的或者重复使用上一个axes。<code>subplot</code> 在当前figure下创建多个axes.<code>subplots</code>创建新的figure和axes。</p><blockquote><pre><code>Call signatures::  subplot(nrows, ncols, index, **kwargs)  subplot(pos, **kwargs)  subplot(ax)</code></pre></blockquote><p>而且<code>subplot(3,2,1)</code>等价于<code>subplot(321)</code>,其中index选中的axes可以用<code>plt.plot</code>来绘图。也可以用返回值<code>fig,ax=subplot(321)</code>来绘图。</p><h2 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h2><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">matplotlib</span><span class="hljs-selector-class">.pyplot</span> <span class="hljs-selector-tag">as</span> <span class="hljs-selector-tag">plt</span><br><span class="hljs-selector-tag">plt</span><span class="hljs-selector-class">.ion</span>()<br><span class="hljs-selector-tag">plt</span><span class="hljs-selector-class">.plot</span>(<span class="hljs-selector-attr">[1.6, 2.7]</span>) #立即显示<br><span class="hljs-selector-tag">plt</span><span class="hljs-selector-class">.ioff</span>() <br><span class="hljs-selector-tag">plt</span><span class="hljs-selector-class">.show</span>() # 手动显示<br></code></pre></td></tr></table></figure><h1 id="plotly"><a href="#plotly" class="headerlink" title="plotly"></a><a href="https://www.cnblogs.com/feffery/p/9293745.html" target="_blank" rel="noopener">plotly</a></h1><p>这篇文章很不错,介绍了plotly的<strong>offline</strong>,<strong>graph</strong>,<strong>trace</strong>,<strong>layout</strong>。<br>进阶需要参考<a href="https://plot.ly/python/ipython-notebook-tutorial/#getting-started" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The 1cycle policy</title>
      <link href="/2019/03/14/2019/one%20cycle%20policy/"/>
      <url>/2019/03/14/2019/one%20cycle%20policy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://sgugger.github.io/the-1cycle-policy.html" target="_blank" rel="noopener">原文</a><br>本文介绍一种能够快速获得模型结果，并提高精度。首先介绍Leslie Smith在超参数（hyper-parameters ）方面的工作。他将其称为1cycle policy，能够快速地训练复杂模型。</p><h1 id="大学习率"><a href="#大学习率" class="headerlink" title="大学习率"></a>大学习率</h1><p><img src="https://sgugger.github.io/images/art5_losses.png" alt=""><br>0-41个epoch中，learning rate从0.08线性增长到0.8，然后在42-82个epoch内从0.8回落到0.08.<br>high learning rate可以起到regularization的效果防止过拟合。这相当于防止跨入一个小的局部最优解。这表明SGD在寻找一个宽阔平坦的区域  </p><h1 id="Supplements"><a href="#Supplements" class="headerlink" title="Supplements"></a>Supplements</h1><p><a href="https://arxiv.org/abs/1803.09820" target="_blank" rel="noopener">1cycle policy</a><br><a href="https://arxiv.org/abs/1708.07120" target="_blank" rel="noopener">Super-Convergence</a><br><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> Learning Rate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy 性能提升</title>
      <link href="/2019/02/18/2019/numpy/"/>
      <url>/2019/02/18/2019/numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="Copies-and-Views"><a href="#Copies-and-Views" class="headerlink" title="Copies and Views"></a>Copies and Views</h1><p>视图共享数据，但不是同一个对象。而复制会重新分配内存，在实际中应该尽量避免复制操作。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>)<br>b = a            <span class="hljs-comment"># no new object is created</span><br></code></pre></td></tr></table></figure></p><p>b与a是完全等价的</p><h2 id="View-or-Shallow-Copy"><a href="#View-or-Shallow-Copy" class="headerlink" title="View or Shallow Copy"></a>View or Shallow Copy</h2><p>也可以称作浅拷贝，它创建了新的对象，但是使用了相同的数据。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">12</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = a.view()<br><span class="hljs-meta">&gt;&gt;&gt; </span>c <span class="hljs-keyword">is</span> a<br><span class="hljs-keyword">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c.base <span class="hljs-keyword">is</span> a                        <span class="hljs-comment"># c is a view of the data owned by a</span><br><span class="hljs-keyword">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c.flags.owndata<br><span class="hljs-keyword">False</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.shape = <span class="hljs-number">2</span>,<span class="hljs-number">6</span>                      <span class="hljs-comment"># a's shape doesn't change</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.shape<br>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>] = <span class="hljs-number">1234</span>                      <span class="hljs-comment"># a's data changes</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[   <span class="hljs-number">0</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">2</span>,    <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">1234</span>,    <span class="hljs-number">5</span>,    <span class="hljs-number">6</span>,    <span class="hljs-number">7</span>],<br>       [   <span class="hljs-number">8</span>,    <span class="hljs-number">9</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">11</span>]])<br></code></pre></td></tr></table></figure></p><p>Slicing an array returns a view of it:<br><figure class="hljs highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;&gt;</span>&gt; s = a[ : , <span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span>]     <span class="hljs-comment"># spaces added for clarity; could also be written "s = a[:,1:3]"</span><br><span class="hljs-meta">&gt;&gt;</span>&gt; s[<span class="hljs-symbol">:</span>] = <span class="hljs-number">10</span>           <span class="hljs-comment"># s[:] is a view of s. Note the difference between s=10 and s[:]=10</span><br><span class="hljs-meta">&gt;&gt;</span>&gt; a<br>array([[   <span class="hljs-number">0</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">1234</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">7</span>],<br>       [   <span class="hljs-number">8</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">11</span>]])<br>Deep Copy<br>The copy method makes a complete copy of the array <span class="hljs-keyword">and</span> its data.<br><br><span class="hljs-meta">&gt;&gt;</span>&gt; d = a.copy()                          <span class="hljs-comment"># a new array object with new data is created</span><br><span class="hljs-meta">&gt;&gt;</span>&gt; d is a<br>False<br><span class="hljs-meta">&gt;&gt;</span>&gt; d.base is a                           <span class="hljs-comment"># d doesn't share anything with a</span><br>False<br><span class="hljs-meta">&gt;&gt;</span>&gt; d[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">9999</span><br><span class="hljs-meta">&gt;&gt;</span>&gt; a<br>array([[   <span class="hljs-number">0</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">1234</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">7</span>],<br>       [   <span class="hljs-number">8</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">11</span>]])<br></code></pre></td></tr></table></figure></p><h2 id="Deep-Copy"><a href="#Deep-Copy" class="headerlink" title="Deep Copy"></a>Deep Copy</h2><p>完全复制数据。耗时大。<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&gt;&gt;&gt; d = a.copy()                          # a <span class="hljs-keyword">new</span> array <span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-keyword">with</span> <span class="hljs-title">new</span> <span class="hljs-title">data</span> <span class="hljs-title">is</span> <span class="hljs-title">created</span></span><br>&gt;&gt;&gt; d is a<br><span class="hljs-type">False</span><br>&gt;&gt;&gt; d.base is a                           # d doesn<span class="hljs-symbol">'t</span> share anything <span class="hljs-keyword">with</span> a<br><span class="hljs-type">False</span><br>&gt;&gt;&gt; d[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">9999</span><br>&gt;&gt;&gt; a<br>array([[   <span class="hljs-number">0</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">1234</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,    <span class="hljs-number">7</span>],<br>       [   <span class="hljs-number">8</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">10</span>,   <span class="hljs-number">11</span>]])<br></code></pre></td></tr></table></figure></p><h2 id="判断是否发生了拷贝"><a href="#判断是否发生了拷贝" class="headerlink" title="判断是否发生了拷贝"></a>判断是否发生了拷贝</h2><p><code>a.__array_interface__[&#39;data&#39;]</code>返回数据指针 , <code>a.flags.owndata</code> 是否拥有数据, <code>a.base is b.base</code> 检测父元素。经过测试，第三种方法最为有效。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a= np.arange(<span class="hljs-number">36</span>).reshape(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">#第二种方法失效，reshape返回一个view。</span><br>b= a[<span class="hljs-number">1</span>,:] <span class="hljs-comment"># 第一种方法失效</span><br>c=a[::<span class="hljs-number">2</span>,::<span class="hljs-number">3</span>]<br>d = c.reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <br>d.base <span class="hljs-keyword">is</span> a.base <span class="hljs-comment"># False, 由于c在空间上不连续，导致reshape重新开辟一块空间。</span><br></code></pre></td></tr></table></figure></p><h1 id="选择合适的操作"><a href="#选择合适的操作" class="headerlink" title="选择合适的操作"></a>选择合适的操作</h1><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>以下方式操作的都是view<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, <span class="hljs-number">3</span>:<span class="hljs-number">6</span>]    <span class="hljs-comment"># 切片 slice</span><br>a[::<span class="hljs-number">2</span>]         <span class="hljs-comment"># 跳步</span><br></code></pre></td></tr></table></figure></p><p>而下面会导致copy<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a_copy1 = a[[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>], [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>]]   <span class="hljs-comment"># 用 index 选</span><br>a_copy2 = a[[<span class="hljs-keyword">True</span>, <span class="hljs-keyword">True</span>], [<span class="hljs-keyword">False</span>, <span class="hljs-keyword">True</span>]]  <span class="hljs-comment"># 用 mask</span><br>a_copy4 = a[a[<span class="hljs-number">1</span>,:] != <span class="hljs-number">0</span>, :]  <span class="hljs-comment"># fancy indexing</span><br></code></pre></td></tr></table></figure></p><p>np中提供了<code>np.take()</code>,<code>np.compress</code>方法，功能与上面类似，但是更加高效。</p><h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><p>numpy 提供了几种方法：<code>a.reshape()</code>,<code>a.shape=()</code>,<code>a.resize()</code>,<code>a.flatten()</code>,<code>a.ravel()</code>.<br>其中<code>a.shape=()</code> 必返回视图。<br>而<code>a.flatten()</code>必返回一个拷贝，如果不是必要应该避免。<br>而其他操作在有需要的时候复制。</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>就地操作 <code>a+=2</code><br>一些方法带有out参数，可以直接将结果写入out变量从而避免copy。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">np.add(a, <span class="hljs-number">1</span>, out=a)    <span class="hljs-comment"># 0.008843</span><br></code></pre></td></tr></table></figure></p><h2 id="复制元素"><a href="#复制元素" class="headerlink" title="复制元素"></a>复制元素</h2><p><code>np.stride_tricks.as_strided</code><br>这个方法可以起到分块的作用，同时也能改变矩阵的形状，大小，但是它返回的其实是一个view，因此十分高效。<br>首先把A看作是一维的，然后给出想要的形状，最后规定每一步的长度。<br><img src="/blog_images/2019-02-18-13-28-18.png" alt=""><br>比如im2col算法就有一个简单高效的实现：<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im2col_3d</span><span class="hljs-params">(A, BSZ: tuple)</span>:</span><br>    <span class="hljs-comment"># Parameters</span><br>    channel, r, c = A.shape<br>    s0, s1, s2 = A.strides<br>    nrows = r - BSZ[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><br>    ncols = c - BSZ[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    shp = channel, BSZ[<span class="hljs-number">0</span>], BSZ[<span class="hljs-number">1</span>], nrows, ncols<br>    strd = s0, s1, s2, s1, s2<br><br>    out_view = np.lib.stride_tricks.as_strided(A, shape=shp, strides=strd)<br>    <span class="hljs-keyword">return</span> out_view.reshape( channel * BSZ[<span class="hljs-number">0</span>] * BSZ[<span class="hljs-number">1</span>], <span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure></p><h1 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h1><p>前面提到如果数组在内存空间中不连续，那么在一些操作就无法在原来的地方进行。如reshape。但是np视乎做过一些优化，如果在切片的步长是一个整数，那么就可以将其看作是连续的。<br><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a= np.arange(72).reshape(12,6) <br><span class="hljs-attribute">c</span>=a[::2,::3]<br>c.<span class="hljs-attribute">shape</span>=12 #出错<br><span class="hljs-attribute">e</span>=a.ravel()[::3]<br><span class="hljs-attribute">f1</span>=e[::4]<br><span class="hljs-attribute">f2</span>=e[1::4]<br>f1.<span class="hljs-attribute">shape</span>=2,3<br>f1.base is a.base # <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></p><p>那么对其进行2次定长切片处理就能得到我们想要的东西。</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">img = np.random.random((<span class="hljs-number">100</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>w = np.random.random((<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im2col_4d</span><span class="hljs-params">(A, BSZ: tuple)</span>:</span><br>    <span class="hljs-comment"># Parameters</span><br>    m, channel, r, c = A.shape<br>    s0, s1, s2, s3 = A.strides<br>    nrows = r - BSZ[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><br>    ncols = c - BSZ[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    shp = m, channel, BSZ[<span class="hljs-number">0</span>], BSZ[<span class="hljs-number">1</span>], nrows, ncols<br>    strd = s0, s1, s2, s3, s2, s3<br>    out_view = np.lib.stride_tricks.as_strided(A, shape=shp, strides=strd)<br>    <span class="hljs-keyword">return</span> out_view.reshape(m, channel * BSZ[<span class="hljs-number">0</span>] * BSZ[<span class="hljs-number">1</span>], <span class="hljs-number">-1</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im2col_3d</span><span class="hljs-params">(A, BSZ: tuple)</span>:</span><br>    <span class="hljs-comment"># Parameters</span><br>    channel, r, c = A.shape<br>    s0, s1, s2 = A.strides<br>    nrows = r - BSZ[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><br>    ncols = c - BSZ[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    shp = channel, BSZ[<span class="hljs-number">0</span>], BSZ[<span class="hljs-number">1</span>], nrows, ncols<br>    strd = s0, s1, s2, s1, s2<br><br>    out_view = np.lib.stride_tricks.as_strided(A, shape=shp, strides=strd)<br>    <span class="hljs-keyword">return</span> out_view.reshape( channel * BSZ[<span class="hljs-number">0</span>] * BSZ[<span class="hljs-number">1</span>], <span class="hljs-number">-1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">c1</span><span class="hljs-params">()</span>:</span><br><br>    value = np.zeros((<span class="hljs-number">100</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>            <span class="hljs-comment"># 转列 88ms</span><br>            col = im2col_sliding_strided(img[i, c, ...], (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>            <span class="hljs-comment"># dot 用时30ms</span><br>            value[i, ...] += w[c].ravel().dot(col).reshape(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)<br>    <span class="hljs-keyword">return</span> value<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">c2</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># 高维数组的乘法效率很低，这个方法反而是最慢的</span><br>    <span class="hljs-comment"># 355ms 这个方法也变慢了我感觉很意外</span><br>    col = im2col_4d(img, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>    <span class="hljs-comment"># dot 用时150ms</span><br>    <span class="hljs-keyword">return</span> w.ravel().dot(col).reshape(<span class="hljs-number">-1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">c3</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># 使col仍为二维，效率最高</span><br>    value = np.zeros((<span class="hljs-number">100</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        <span class="hljs-comment"># 66 ms</span><br>        col = im2col_3d(img[i, ...], (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>        <span class="hljs-comment"># 20ms</span><br>        value[i, ...] = w.ravel().dot(col).reshape(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)<br>    <span class="hljs-keyword">return</span> value<br><br>print(use_time(c1,<span class="hljs-number">10</span>))<br>print(use_time(c2,<span class="hljs-number">10</span>))<br>print(use_time(c3,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>以上代码实现卷积运算时发现将所有数据统一处理反而是最慢的。结果表明c3,每次处理一组数据是最快的。其中大数组的<code>reshape</code>慢于多个小数组的<code>reshape</code>，同样点积也是大的慢。</p><p>## </p><h1 id="Refences"><a href="#Refences" class="headerlink" title="Refences"></a>Refences</h1><p><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/4-1-speed-up-numpy/" target="_blank" rel="noopener">为什么用 Numpy 还是慢, 你用对了吗?</a><br><a href="https://docs.scipy.org/doc/numpy-1.14.5/user/quickstart.html" target="_blank" rel="noopener">Tutorial</a><br><a href="https://blog.csdn.net/shwan_ma/article/details/78244044" target="_blank" rel="noopener">高效分块操作</a></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> cnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lenet5</title>
      <link href="/2019/02/13/2019/CNN/"/>
      <url>/2019/02/13/2019/CNN/</url>
      
        <content type="html"><![CDATA[<p><a href="http://yann.lecun.com/exdb/lenet/" target="_blank" rel="noopener">lenet5</a> 实现了手写数字的识别。其关键在于CNN的使用。其结构如下：</p><p><img src="/blog_images/2019-02-18-09-49-21.png" alt="">  </p><h1 id="convolution"><a href="#convolution" class="headerlink" title="convolution"></a>convolution</h1><p><a href="https://www.matongxue.com/madocs/32.html" target="_blank" rel="noopener">通俗地理解卷积运算</a> 数学表达式：<br>$$ (f<em>g)(x) = \int_{-\infty}^\infty f(\tau)g(x-\tau)d\tau $$<br>可以把$f(x)$理解为信号，$g(x)$理解为发出信号的时机。那么卷积就代表了当前时刻该信号的叠加效果。<a href="https://zhuanlan.zhihu.com/p/30994790" target="_blank" rel="noopener">在图像中卷积的意义</a>。虽然卷积的过程看上去很像内积，但其实两者有很大的区别，两者的前进方向不同。为了方便计算，将g中的下标进行修改，使得卷积运算可以直接用内积来表示。(将g旋转$180\degree$)<br><img src="/blog_images/2019-02-13-19-04-01.png" alt=""><br>卷积后得到的矩阵称为<strong>feature map</strong><br><img src="https://mlnotebook.github.io/img/CNN/convSobel.gif" alt=""><br>如果特征刚好在角落上，那么上面的卷积过程无法检测到。因此，可以在输入矩阵上填充<strong>padding</strong>。同时使得输入与输出的大小相同。 <img src="https://mlnotebook.github.io/img/CNN/convZeros.png" alt="Zero-padding is used so that the resulting image doesn&#39;t shrink."><br>也可以控制<strong>stride</strong>来改变卷积核的移动步伐.这会导致<strong>feature map</strong>的尺寸变小。<br>设输入的尺寸为 $I_r \times I_c$ , 卷积核尺寸为$K_r \times K_c$, 则可训练参数为$K_r</em>K_c+1$,输出尺寸为$(I_r+1-K_r) \times (I_c+1-K_c)$.(无padding，stride=1)</p><h2 id="Convolutional-Layer"><a href="#Convolutional-Layer" class="headerlink" title="Convolutional Layer"></a>Convolutional Layer</h2><p>作为神经网络，每一个节点只有2种状态（激活或者未激活）。在感知机中使用sigmoid函数进行激活使得输出值在[0,1]。这一过程被称为<strong>Non-linearity</strong>。</p><h1 id="Pooling-Layer"><a href="#Pooling-Layer" class="headerlink" title="Pooling Layer"></a>Pooling Layer</h1><p>这一过程比较简单，它将原图像进行分割。再对每一个区域进行一次计算。与卷积不同的是，这里的每一块区域都是不重叠的。最终它使得输入尺寸成倍地减少。这一操作称为<strong>subsampling</strong> <img src="https://mlnotebook.github.io/img/CNN/poolfig.gif" alt="Max-pooling: Pooling using a &quot;max&quot; filter with stride equal to the kernel size"><br>每一层含有2个参数，<strong>coefficient and bias</strong>。同样，作为神经网络中的一层，需要对<strong>subsampling</strong>后的数乘以<strong>coefficient</strong>+<strong>bias</strong> 再用sigmoid函数激活才能输出到网络中。</p><h1 id="Fully-connected-Dense-Layer"><a href="#Fully-connected-Dense-Layer" class="headerlink" title="Fully-connected (Dense) Layer"></a>Fully-connected (Dense) Layer</h1><p>这一层与多层神经网络相同，不同的是它的输入可能具有多个<strong>channel</strong>。不管怎么样，都可以将输入看作是一维的。</p><h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><p>这里我遵照lenet5原始论文进行复现。<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">材料:数据集+论文</a></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>背景色置为-0.1，前景色为1.175. <code>(raw-20)/200</code></p><h2 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h2><p>这里有点奇怪，论文里说输入图像是32X32的，但是数据集是28X28的。<br>6个 <strong>zero-padding</strong>5X5的卷积层。有$6<em>5</em>5+6(bias)=156$个参数。$6<em>28</em>28=4704$个神经元。<br>输出：$6\times28\times28$</p><h2 id="S2"><a href="#S2" class="headerlink" title="S2"></a>S2</h2><p>大小为：2X2.取区域平均值×系数+bias再sigmoid激活。 参数：$6\times 2$<br>输出：$6\times14\times14$</p><h2 id="C3"><a href="#C3" class="headerlink" title="C3"></a>C3</h2><p>这里卡了很久，不知道多个feature map 如何进行卷积。其实可以把多个feature map当作多个通道，每个通道上各自进行卷积再叠加在一起。或者说这个卷积具有3维结构（前面都是二维的），只不过其中一维的大小为3，因此正好被压回2维结构。3X14X14的输入，3X5X5的核。<br><img src="/blog_images/2019-02-18-09-47-33.png" alt=""><br>参数：3X5X5 6个，4X5X5 6+3个，6X5X5 1个<br>输出：16X10X10</p><h2 id="S4"><a href="#S4" class="headerlink" title="S4"></a>S4</h2><p>大小为：2X2.取区域平均值×系数+bias再sigmoid激活。<br>输出：$16\times5\times5$</p><h2 id="C5"><a href="#C5" class="headerlink" title="C5"></a>C5</h2><p>大小为：16X5X5. 共120个。<br>输出：120X1</p><h2 id="F6"><a href="#F6" class="headerlink" title="F6"></a>F6</h2><p>使用正切函数激活。<br>$$ f(a)=A tanh(S*a) $$<br>A为1.7159.<br>输出：84</p><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>计算公式：<br>$$ y_i=\sum_j(x_j-w_{ij})^2 $$<br>如果模型有k个输出，即k个分类。那么$w_{k*}$代表了该类别在特征空间中的位置。显然，离该特征向量越远，输出越大。这称为<strong>distributed code</strong></p><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h2><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>写了一通代码发现直接炸了，运算速度实在太慢，简直出不了结果。实验了一下发现python的for循环效率极低，要实现神经网络，必须全部使用专门优化过的工具。如numpy，最好全程使用矩阵运算并避免矩阵的复制。使用卷积的时候可以利用<a href="https://blog.csdn.net/dwyane12138/article/details/78449898" target="_blank" rel="noopener">im2col</a><br><figure class="hljs highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs undefined">def use_time(f,c=<span class="hljs-number">1</span>,*<span class="hljs-built_in">args</span>):<br>    import datetime<br>    start = datetime.datetime.now()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):<br>        f(*<span class="hljs-built_in">args</span>)<br>    <span class="hljs-built_in">return</span> datetime.datetime.now()-start<br><br>def im2col(<span class="hljs-built_in">image</span>, ksize, stride):<br>    # <span class="hljs-number">100</span> , <span class="hljs-number">5</span>,<span class="hljs-number">1</span>  <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">12.587087</span><br>    # <span class="hljs-built_in">image</span> <span class="hljs-built_in">is</span> a 4d tensor([batchsize, <span class="hljs-built_in">width</span> ,<span class="hljs-built_in">height</span>, channel])<br>    image_col = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">image</span>.shape[<span class="hljs-number">1</span>] - ksize + <span class="hljs-number">1</span>, stride):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">image</span>.shape[<span class="hljs-number">2</span>] - ksize + <span class="hljs-number">1</span>, stride):<br>            <span class="hljs-built_in">col</span> = <span class="hljs-built_in">image</span>[:, i:i + ksize, j:j + ksize, :].reshape([-<span class="hljs-number">1</span>])<br>            image_col.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">col</span>)<br>    image_col = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">array</span>(image_col)<br>    <span class="hljs-built_in">return</span> image_col<br><br>def im2col1(<span class="hljs-built_in">image</span>, ksize, stride):<br>    # <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">02</span><br>    shape_r =(<span class="hljs-built_in">image</span>.shape[<span class="hljs-number">0</span>] - ksize + <span class="hljs-number">1</span>)//stride<br>    shape_c =(<span class="hljs-built_in">image</span>.shape[<span class="hljs-number">1</span>] - ksize + <span class="hljs-number">1</span>)//stride<br>    channel=<span class="hljs-built_in">image</span>.shape[<span class="hljs-number">3</span>]<br>    m = <span class="hljs-built_in">image</span>.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">col</span> = <span class="hljs-built_in">np</span>.zeros([shape_r*shape_c,ksize*ksize*channel*m])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(shape_r):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(shape_c):<br>            <span class="hljs-built_in">col</span>[shape_r*i+j,:] = <span class="hljs-built_in">image</span>[:, i:i + ksize, j:j + ksize, :].reshape([-<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">return</span> <span class="hljs-built_in">col</span><br><br>def im2col2(<span class="hljs-built_in">image</span>, ksize, stride):<br>    # <span class="hljs-number">100</span> , <span class="hljs-number">5</span>,<span class="hljs-number">1</span>  <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">12.587087</span><br>    # <span class="hljs-built_in">image</span> <span class="hljs-built_in">is</span> a 4d tensor([batchsize, <span class="hljs-built_in">width</span> ,<span class="hljs-built_in">height</span>, channel])<br>    image_col = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">image</span>.shape[<span class="hljs-number">1</span>] - ksize + <span class="hljs-number">1</span>, stride):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">image</span>.shape[<span class="hljs-number">2</span>] - ksize + <span class="hljs-number">1</span>, stride):<br>            <span class="hljs-built_in">col</span> = <span class="hljs-built_in">image</span>[:, i:i + ksize, j:j + ksize, :].reshape([-<span class="hljs-number">1</span>])<br>            image_col.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">col</span>)<br><br>    <span class="hljs-built_in">return</span> <span class="hljs-built_in">np</span>.concatenate(image_col)<br><br>images=<span class="hljs-built_in">np</span>.<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">6</span>)<br><br><span class="hljs-built_in">print</span>(use_time(im2col,<span class="hljs-number">100</span>,images,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(use_time(im2col1,<span class="hljs-number">100</span>,images,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(use_time(im2col2,<span class="hljs-number">100</span>,images,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure></p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><p><a href="https://zhuanlan.zhihu.com/p/29716516" target="_blank" rel="noopener">参考实现</a></p><h2 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h2><p><a href="https://en.wikipedia.org/wiki/Sigmoid_function" target="_blank" rel="noopener">wiki</a><br>它是一类具有形如”S”的函数。常指Logistic function</p><h2 id="BP"><a href="#BP" class="headerlink" title="BP"></a>BP</h2><p><a href="https://blog.csdn.net/qq_21190081/article/details/72871704" target="_blank" rel="noopener">Pooling池化操作的反向梯度传播</a><br>在计算卷积的偏导数时，可以先把不同单元的权值当作是不同的分开计算，最后再把他们加起来。这就好比分身术，先产生n个分身，然后分身再合体回一个。它其实就是一个全微分：<br>$$ df(x_1,x_2)=f’<em>{x1} d</em>{x1}+f’<em>{x2}d</em>{x2} $$<br>如果令$x_1=x_2=x$就得到了上面的方法。                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      </p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> cnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVM</title>
      <link href="/2019/02/12/2019/SVM/"/>
      <url>/2019/02/12/2019/SVM/</url>
      
        <content type="html"><![CDATA[<h1 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h1><p>在一个线性可分的训练集中，求一条直线将2类数据分开，并使得其间隔最大化。<br><img src="2019-02-12-17-30-04.png" alt=""><br>西瓜书P123.<br>$$ min \frac{1}{2}\left |  w\right |^2 $$<br>$$ s.t. y_i(w^\top x_i+b)\geqslant 1 ,\: i =1,…,m. $$<br>其中 $y_i=1$ 表示正例，$y_i=-1$表示负例。</p><h2 id="对偶问题"><a href="#对偶问题" class="headerlink" title="对偶问题"></a>对偶问题</h2><p>使用拉格朗日乘子法求得其等价的，也就是对偶问题：<br>$$ max \sum_{i=1}^m \alpha_i-\frac{1}{2} \sum_{i=1}^m\sum_{j=1}^m \alpha_i \alpha_j y_i y_j \mathbf{x_i^\top}\mathbf{x_j} $$<br>$$ s.t. \sum_{i=1}^m \alpha_i y_i=0,\: \alpha_i \geq 0 $$<br>n+1个参数的优化问题变成了m个参数的优化问题。<br>要完全理解SVM的计算，需要搞清楚下面两个问题：</p><ol><li>原问题如何计算？</li><li>对偶问题又如何改进计算？</li></ol><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>实际数据并不总是线性可分。即使找到了一个严格可分的平面，也有可能导致过拟合。<br><img src="2019-02-12-18-21-51.png" alt=""><br>引入正则化后的SVM的损失函数（hinge损失）可以表示为：<br>$$ \min_\theta C\sum_{i=1}^m[y_i cost_1(\mathbf{\theta^\top x_i})+(1-y_i)cost_0(\mathbf{\theta^\top x_i})] + \frac{1}{2} \sum_{j=1}^m \theta_j^2$$<br>当$C$取无穷大时，等价于严格约束，即找到一条线性可分的直线；<br>当$C$取一个适当的值，可以排除一些不符合的数据。</p><p>较大的$C$的影响：Lower bias, high variance == small $\lambda$ 过拟合。<br>较小的$C$的影响：Higher bias,low variance == large $\lambda$ 欠拟合。</p><h2 id="Logistic-regression-vs-SVMs"><a href="#Logistic-regression-vs-SVMs" class="headerlink" title="Logistic regression vs. SVMs"></a>Logistic regression vs. SVMs</h2><pre><code>n = number of features , m = number of training examples If   n  is large (relative to   m  ): n&gt;&gt;m    Use logistic regression, or SVM without a kernel (“linear kernel”) If   n  is small,     m  is intermediate:     Use SVM with Gaussian kernel If   n  is small,     m is large:     Create/add more features, then use logistic regression or SVM  without a kernel Neural network likely to work well for most of these secngs, but may be slower to train. </code></pre><p>高斯核的SVM模型复杂度能够随着数据集的增大而增大，但是随着数据增大计算量也快速地提高因此SVM最适合的范围为（n=1~1000, m=10~10000, Andrew）<a href="https://scikit-learn.org/stable/modules/svm.html" target="_blank" rel="noopener">scikit learn中SVM</a>的复杂度为$O(n_{features}<em>m_{samples}^2)$到$O(n_{features}</em>m_{samples}^3)$之间。</p><h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p><img src="2019-02-12-21-11-21.png" alt="高斯核"><br>核函数使得在原特征空间中线性不可分的数据映射到线性可分的特征空间中。可以将训练数据当成标记$l$，如果$x$在$l$附近，那么$f(x,l)$趋于1。这样就能把样本x映射到m维的空间中。在这个空间里描述了样本$x$到各个方向的距离。运用SVM算法，可以选择出有效的支持向量（处在边界上的点）。</p><pre><code>import numpy as npy = np.array([0])X = np.array([[-6,-6]])for i in range(-5,6):    for j in range(-5,6):        X = np.append(X,[[i,j]],axis=0)        y = np.append(y,abs(i)&lt;=3 and abs(j)&lt;=3)from sklearn import svmclf = svm.SVC(gamma=&apos;scale&apos;)clf.fit(X, y)clf.support_vectors_</code></pre><p>以上代码SVM在不同样本附近选取特征点，组成支持向量，而不是全部训练样本。 感觉SVM与KNN有一定的相似度。KNN是选择附近数目多的训练样本，而SVM则是对$x$附近的训练样本进行数值加权。</p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neural Network</title>
      <link href="/2019/01/27/2019/Neural%20Network/"/>
      <url>/2019/01/27/2019/Neural%20Network/</url>
      
        <content type="html"><![CDATA[<h1 id="反向传播网络"><a href="#反向传播网络" class="headerlink" title="反向传播网络"></a>反向传播网络</h1><p>反向传播是神经网络中求最优参数的一个运用梯度下降算法的应用。<br><img src="/blog_images/NN.jpg" alt="简化模型"><br>这是我总结的简化后的神经网络的模型。一个layer表示一个隐层。具体的计算过程可以参见andrew的ML，这里采用的符号z,a也是依据课程的介绍。<br>$$<br> a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3) \newline a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3) \newline a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3) \newline h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)}) \newline $$<br> 在计算梯度的时候主要方法是 求偏导数和换元法。从上图可知$z$是连接不同层之间的节点。<br> 在计算导数的时候，采用Z作为参考点会简化计算。先换元，转换为关于$z$的表达式$J(z^l)$.可知$\frac{∂J(Θ)}{∂z^{l}} =\frac{∂J(Θ)}{∂z^{l+1}}\frac{∂z^{l+1}}{∂z^{l}}$. 而这一部分$\frac{∂z^{l+1}}{∂z^{l}}=Θ^{k^T}z^{l+1}.<em>g’(z^l)$正是反向传播的关键。 要求得参数的导数所需要的最后一步$\frac{∂z^{l+1}}{∂Θ^{l}_{ij}}=a^l_j$<br> 由于：<br> $$ g′(z^{l})=a^l.∗ (1−a^l)$$<br> 因此<br> $$\delta^l=\frac{∂z^{l+1}}{∂z^{l}}=Θ^{k^T}z^{l+1}.</em>a^l.∗ (1−a^l)$$<br> $$\frac{∂J}{∂Θ^{l}}=\delta^{l+1}a^{l^T}$$</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p> <a href="https://www.coursera.org/learn/machine-learning/supplement/Bln5m/model-representation-i" target="_blank" rel="noopener">Neural Networks: Learning</a></p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化问题</title>
      <link href="/2019/01/14/2019/%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/14/2019/%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在机器学习中，当准备好数据集并设计好模型后，下一步工作就是训练。训练过程就是把模型中的参数调至最优。训练过程的核心就是数值优化算法。常用的方法为梯度下降与牛顿法，拟牛顿法是在牛顿法上面的改进。</p><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>梯度下降算法只需要一阶导数信息就能找到目标函数的极值点。它基于以下认识：</p><ol><li>方向导数取得最大值的方向为梯度。（沿着这个方向下降速度最快）</li><li>沿着梯度的反方向迭代取得极小值；沿着正向迭代取得极大值。</li></ol><p><img src="http://ww4.sinaimg.cn/large/6cbb8645gw1ewlxa2zohdj20mn0h3wgf.jpg" alt="其迭代过程如同下山一样"><br>将f(x)一阶泰勒展开：<br>$$ f(x)=f(x_0)+(x−x_0)f’(x0)$$<br>令$Δx=x-x_0=−δf′(x)$<br>则：<br>$$ f(x)-f(x_0)=−δf’^2(x_0)$$<br>因此每次迭代的结果使得f(x)逐渐变小，直至取得极小值。它的优点是简单有效，缺点是在远离极小值的地方下降很快，而在靠近极小值的地方下降很慢。</p><p><a href="https://blog.csdn.net/zhouhong0284/article/details/80232412" target="_blank" rel="noopener">几种变形的比较：</a><br>| 算法 | 概述 | 优点 | 缺点|<br>|–|–|-|-|<br>| SGD | 在深度学习中指的是小批量梯度下降，是按照数据分布将总体数据划分为多个小批量数据，然后利用小批量数据对参数进行更新。  | 每一步更新的计算时间不依赖于训练样本数目的多寡，即使训练样本数目非常大时，他们也能收敛。对于足够大的数据集，SGD可能会在处理整个训练集之前就收敛到最终测试机误差的某个容错范围内。  | 选择合适的learning rate比较困难，若设置过大，学习曲线将会剧烈震荡，代价函数值通常会明显增加；太小则学习过程会很缓慢，如果初始学习率太低，那么学习可能会卡在一个相当高的代价值。|<br>| Momentum动量 | 动量方法旨在加速学习，特别是处理高曲率、小但一致的梯度，或是带噪声的梯度。动量算法积累了之前梯度指数级衰减的移动平均，并且继续沿该方向移动。它模拟的是物体运动时的惯性，即在更新时在一定程度上会考虑之前更新的方向，同时利用当前batch的梯度微调最终的结果，这样可以在一定程度上增加稳定性，从而更快的学习。  | 对方向一致的参数能够加速学习，对梯度改变方向的参数能够减少其更新，因此就是momentum能够在相关方向上加速学习，抑制振荡，从而加速收敛。 | 比较难学习一个较好的学习率。|<br>| Nesterov动量 | 是momentum动量的一个变种。Nesterov的改进就是让之前的动量直接影响当前的动量，因此Nesterov动量往往可以解释为往标准动量方法中添加了一个校正因子，加快收敛。 | - | -|<br>| Adagrad | 在更新参数的时候，缩放每个参数反比于其所有梯度历史平均值总和的平方根。<br>特点：1.这样在训练初期，分母较小，学习率较大，学习比较快，2.后期时，学习会逐渐减慢，3.而且它适合于处理稀疏梯度，具有损失最大偏导的参数相应地有一个快速下降的学习率，而具有小偏导的参数在学习率上有相对较小的下降。  | 适合于处理稀疏梯度 | 1.从训练开始就积累梯度方差会导致有效学习率过早和过量的减小。2.只能解决凸问题，当应用于非凸函数训练神经网络时，学习可能会到达一个局部是凸碗的区域。3.需要一个全局的学习率。|<br>| RMSProp | RMSProp修改Adagrad以在非凸设定下效果更好(这也是为什么神经网络中多用RMSprop的原因，神经网络的损失函数大多都是非凸的)，改变梯度累积为指数加权的移动平均。相比于Adagrad，RMSProp使用指数衰减平均以丢弃遥远过去的历史。<br>很常用的一个优化算法。  | 1.改进了Adagrad在深度学习中过早结束的问题；2.适用于处理非平稳。  | 依然依赖一个全局学习率。|<br>| Adam | 结合了动量和RMSProp，利用了梯度的一阶矩估计和二阶矩估计动态调节每个参数的学习率，并且加上了偏置修正。 | - | -|</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/haolexiao/article/details/60780350" target="_blank" rel="noopener">梯度下降，牛顿法与拟牛顿法</a><br><a href="https://blog.csdn.net/zhouhong0284/article/details/80232412" target="_blank" rel="noopener">各优化算法的优缺点整理</a><br><a href="https://zhuanlan.zhihu.com/p/32714733" target="_blank" rel="noopener">深度学习的前戏–梯度下降、反向传播、激活函数</a>  </p>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> 牛顿法 </tag>
            
            <tag> 梯度下降 </tag>
            
            <tag> 数值优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>送餐机器人</title>
      <link href="/2019/01/03/2019/%E9%80%81%E9%A4%90%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2019/01/03/2019/%E9%80%81%E9%A4%90%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>目前已经跑路大半年了，回想起来在原来的公司也待了近10个月时间。虽然总觉得在那里呆的不舒畅，没有合适的空间，甚至有些不愿提及。但是毕竟待了那么久，即使有什么不满与失意也不应该否定自己曾经的努力。做错了一些事情就更应该直视错误，努力去改正，并从中吸取经验和教训。牢骚就不说了，还是写一些技术上的收获吧！</p><h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><p>公司需要开发一套送餐机器人管理程序。虽然他们本来就有送餐机器人在卖，但是自己却没有代码，没法开发。（好迷）开发就开发吧，也没什么大不了的。公司方面给我需求是：</p><ol><li>能够沿着磁轨移动。 主要采用磁导航作为定位手段。</li><li>通过RFID判断桌号。 每个桌子都有唯一的RFID，读取到对应的RFID就停下提示并等待用户取餐。</li><li>识别触摸开关信号。 在机器人的手臂边上安有一个触摸开关，当用手触碰时会产生一个高电平信号。该信号作为用户取餐完毕的信号。即用户触碰后，机器人返回厨房。</li><li>控制界面。 在机器人背后安装一个触碰显示器，显示桌号。服务员点击桌号则机器人开始送餐，并到达预定桌位完成送餐。</li><li>编辑界面。 如果餐厅布局发送改变，那么要提供一个可以修改的界面。</li><li>壁障、减速。 在行驶过程中应该能够避开可能的障碍物，一般轨道上会有客人。障碍物的识别是靠底部的3个和餐盘下方的2个红外传感器实现。机器人应该能够提示并及时停止，同时要做到动作缓慢，减少机器人的抖动。</li></ol><h1 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h1><p>从大的方向来说主要的技术有：位于上位机的导航算法、位于下位机的运动控制</p><h2 id="导航算法"><a href="#导航算法" class="headerlink" title="导航算法"></a>导航算法</h2><p>由于定位手段只有RFID和磁导航，因此不能精确的知道当前位置。只能通过一定的推理得出当前AGV处于某两个点之间。由于系统设计的原因，在运动过程中有诸多限制：</p><ol><li>转弯角度&lt;60。</li><li>转弯半径&gt;20cm。</li><li>同一时刻只能识别一个岔道。</li></ol><p>首先，将地图抽象为有向图，每一个结点对应一个RFID。由1)得一些路径是单向的，即不能做到原路返回。3)得在每一个岔道，只需要判断向左或者向右。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>首先该算法对轨道有一定限制。</p><ol><li>每个岔道前必须至少有一个RFID来标识。</li><li>所有轨道都必须是<strong>一致的</strong><br><img src="/blog_images/2019-01-04-10-11-30.png" alt="实验环境"><br>在工作的地方，轨道设计如图一所示。0 表示起始点，一般指餐厅厨房。三角符号表示RFID，圆代表桌位。</li></ol><p><img src="/blog_images/2019-01-04-10-15-37.png" alt="生成图"><br>将实际环境中的轨道信息转换成图，存储在计算机中。其结构如图二所示。</p><p><img src="/blog_images/2019-01-04-10-17-33.png" alt="非一致的图"><br>所谓一致，就是当AGV沿着任意轨道顺时针运动时都不会产生冲突。如图三中，假如在左侧有一个AGV顺时针运动，右侧也有一个AGV顺时针运动。那么者两台AGV必将发送冲突（头对头）。其原因在于图中红色的部分使得轨道的方向反转。<br><img src="/blog_images/2019-01-04-10-27-25.png" alt="纠正"><br>只要按图四中黄色部分修改就可以使得图<strong>一致</strong>。</p><p>然后就可以使用<a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Dijkstra</a>寻找目的地的最短路径。这里还需要一个额外的变量direction来表示当前AGV在轨道的方向。一开始AGV是顺时针的，那么0-1也是顺时针的，因此直行就能到达。而0-5是逆时针的，需要掉头才能到达。只要轨道顺序与当前AGV不一致就需要掉头。<br>PS：当时我花了大半个月设计、并写好这部分代码，感觉足以应对任何地图情况，并且使用寻路算法大大减少了工作量。心里有点小得意，比他们原来的系统不知道高到哪里去了。后来我又给路径之间增加速度调节功能，让AGV在直线的时候加速，弯道上降速，实现智能变速。可是没想到，当我拿给生产部的同事，他们却觉得太麻烦了，一致觉得还是原来的好。最后我了解到，原来他们的想法是轨道就是一个圆环，只要判断到没到点就可以了。那是我明白了吃了不讨好是怎么一回事。回想到我刚来的时候，上司把这个任务交给我，还给了之前同事做的代码，说这个项目已经快做好了。可是我一看代码却发现就写了很基础的一点，基本上什么都没有。结合来看才明白怎么一回事，原来是什么都不需要，自然也就什么都不必有。</p><h2 id="运动控制"><a href="#运动控制" class="headerlink" title="运动控制"></a>运动控制</h2><p>项目开发中需要用到的技术有：</p><ol><li>运动模型</li><li>定位算法</li><li>控制算法</li><li>控制平滑</li></ol><h3 id="运动模型"><a href="#运动模型" class="headerlink" title="运动模型"></a>运动模型</h3><p>该AGV由位于底盘中部的两个轮子驱动。属于<a href="https://blog.csdn.net/qq_16149777/article/details/73224070" target="_blank" rel="noopener">双轮差速</a>模型。<br>在实际使用中，我发现使用曲率k和速度v来进行控制更加便捷。它与w,v是等价的<code>k=w/v</code>。在一个实际具体的轨道中，每一个位置的曲率总是固定的。因此一旦得到该位置的曲率，那么通过该点速度是无关的。也就是说在我们的控制算法应该计算出轨道的曲率k，然后AGV以曲率k运动，无论AGV的速度是多少，它始终贴合轨道。所以经过这样的调整，v可以作为参数，调整AGV运动的速度而不改变其稳定性。（实际上我即没办法得到轨道的k，也很难保证AGV的运动轨迹。但是实践效果还是挺好的，v在0.1到0.4的范围内都挺稳定）至于为什么不用r与v。首先r理解起来比较困难，k的话跟w差不多。当v不变时，完全可以把k当作w来看待。其次，当AGV笔直前进的时候，用r表示就难受了，到底取多大才够直？</p><h3 id="定位算法-Magnetic-localization-algorithm"><a href="#定位算法-Magnetic-localization-algorithm" class="headerlink" title="定位算法 (Magnetic localization algorithm)"></a>定位算法 (Magnetic localization algorithm)</h3><p>地磁场的影响比较大, 而且随着车体方向的改变, 地磁的大小也会改变。<br>消除地磁影响的方法主要有三种:<br>( 1)多次测量平均法; ( 2)波峰波谷法; ( 3)双传感器微分法<br>[参考] [1]<br>磁条磁场分布近似于磁偶极子:<br>B=\frac{\left(\mu _0 M\right) \left(3 i x z+3 j y z+k \left(-x^2-y^2+2 z^2\right)\right)}{4 \text{$\pi $r}^5}</p><p>r为半径，L0 是磁渗透性, M 是磁钉磁矩</p><p>然后通过<strong>磁场匹配算法</strong>、<strong>序列算法</strong>来确定磁条相对于车体的位置。</p><p>三点定位:</p><p>我自己提出了一个简化版的磁场匹配算法，只需要取最强的3个点就能使用。实际试验，平均误差约为0.2cm。<br>设传感器距离磁条中心点的绝对距离为x,磁场分布函数为<code>f(x)</code>。磁传感器的间距为1cm。设当前小车与磁条中心的偏差为a。那么读取到的16个点中最强的3个点为f(a),f(a-1),f(a+1)。然后寻找匹配度最高的a就可用了。</p><h2 id="控制算法"><a href="#控制算法" class="headerlink" title="控制算法"></a>控制算法</h2><p>控制器尝试了下面2种</p><ol><li>模糊控制器 这个实验中用的多，我在实际应用的时候遇到了一些问题。效果并不理想。</li><li>PID控制器。最后只用了PD，由于这个计算简单，操作容易，并且效果良好，最后采用了PD控制器。<br>控制输出曲率K。<h3 id="平滑控制"><a href="#平滑控制" class="headerlink" title="平滑控制"></a>平滑控制</h3>当速度需要发送改变的时候，如检测到障碍物。速度不能立即降为0，否则AGV立马磕头。没错，是真的磕头。本身这个底盘在设计的时候就不对，驱动轮在中间靠前面一点，后面一个万向轮支撑。然后上面的外壳是玻璃钢制的，特别重而且高，重心这就提到上面去了，加上支撑轮靠后，一个急刹就前倾。我试验了两种平滑办法。</li><li>固定加速度。 即速度v在每个时间间隔最大只能改变dv。</li><li>指数逼近。 <code>v=(v_goal-v)*e+v</code></li></ol><p>最后贴上一段视频把</p><video controls="controls" src="/videos/Img 0784 Hevc-1.m4v" width="100%"></video><p>[1] 磁传感系统在室外移动机器人导航中的研究</p>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agv </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客终于弄好了！</title>
      <link href="/2019/01/03/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%BC%84%E5%A5%BD%E4%BA%86%EF%BC%81/"/>
      <url>/2019/01/03/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%BC%84%E5%A5%BD%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>复制了几篇老文章到hexo中死活生成不出来。怎么看教程都没发现有问题，然后复制别人的categories，并且能够正常编译。难度我打错字了？盯着字母看了半天也没发现不一样。突然发现一些文章里的categories是红褐色的一些是蓝色的，而出错的地方显示是蓝色的。最后移动光标点到冒号后面发现这个冒号2个个字符宽！原来冒号打错了。改完果然能够工作了。</p><h1 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h1><p>由于这个语法看着挺简单的没专门去了解。结果又踩坑了。<a href="https://ansible-tran.readthedocs.io/en/latest/docs/YAMLSyntax.html" target="_blank" rel="noopener">详细语法</a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">array:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">a1</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">a2</span><br><span class="hljs-attr">array1:</span> <span class="hljs-string">[a1,</span> <span class="hljs-string">a2]</span><br></code></pre></td></tr></table></figure><h2 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h2><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dict:</span> <br><span class="hljs-attr">    a:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">    b:</span> <span class="hljs-string">v2</span><br><br><span class="hljs-attr">dict1:</span> <span class="hljs-string">&#123;a:</span> <span class="hljs-string">v1,</span> <span class="hljs-attr">b:</span> <span class="hljs-string">v2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># sadfk</span><br></code></pre></td></tr></table></figure><p>一定要注意符号后面的空格。如果连在一起就会被认为是一个串。<code>-a</code>不是一个数组而是相当于<code>&quot;-a&quot;</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo总结</title>
      <link href="/2019/01/02/hexo%E6%80%BB%E7%BB%93/"/>
      <url>/2019/01/02/hexo%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="添加子类"><a href="#添加子类" class="headerlink" title="添加子类"></a>添加子类</h1><p><a href="https://whx4j8.github.io/2016/03/16/hexo-next-%E6%B7%BB%E5%8A%A0%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB/" target="_blank" rel="noopener">添加分类</a><br><a href="https://hexo.io/zh-cn/docs/templates" target="_blank" rel="noopener">模板</a></p><h1 id="手动添加文章"><a href="#手动添加文章" class="headerlink" title="手动添加文章"></a>手动添加文章</h1><ol><li>将图片资源全部导入到blog_images,修改原文章的路径。</li><li>在_post下创建文件夹，并将文章放入其中。</li><li>每篇文章添加头部信息 <figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">***</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">201</span><span class="hljs-string">**-01-02</span> <span class="hljs-number">13</span><span class="hljs-string">:13:54</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-number">1</span><br><span class="hljs-bullet">  -</span> <span class="hljs-number">2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><a href="https://github.com/AlynxZhou/hexo-theme-aria" target="_blank" rel="noopener">项目主页</a><br>NexT主题感觉字太小而且过于庞大，因此改用ARIA。其实我就搞了半天，雷同站台多，弄了半天插件没弄好，果断跑路。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一定要安装以下插件。一开始以为是普通插件就忽视了，导致后面无法生成。<br><figure class="hljs highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ npm install --save hexo-<span class="hljs-keyword">renderer</span>-njucks hexo-<span class="hljs-keyword">renderer</span>-stylus hexo-generator-search hexo-generator-feed<br></code></pre></td></tr></table></figure></p><p>克隆到<code>themes/aria</code>下:</p><figure class="hljs highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/AlynxZhou/hexo-theme-aria themes/aria<br></code></pre></td></tr></table></figure><p>修改站点的配置文件_config.yaml Theme to <code>aria</code></p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">aria</span><br></code></pre></td></tr></table></figure><p>注意在aria主题的目录下也有一个_config.yaml需要配置。具体配置请查看aria的介绍。</p><h2 id="修改站点信息"><a href="#修改站点信息" class="headerlink" title="修改站点信息"></a>修改站点信息</h2><p>source目录下的普通文件会拷贝到生成文件public下，而markdown文件则是先被渲染再输出到生成文件下产生相应的html文件。因此网站的images和favicons应放在根目录的source下，以减少对theme的污染。</p><h2 id="Tex"><a href="#Tex" class="headerlink" title="Tex"></a>Tex</h2><p>不知道什么原因，要开启global才能使用，可能是哪里有选项开启选择性加载吧。<br><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mathjax:</span><br><span class="hljs-attr">  enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  global:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  cdn:</span> <span class="hljs-attr">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-MML-AM_CHTML</span><br></code></pre></td></tr></table></figure></p><h1 id="主题小修改"><a href="#主题小修改" class="headerlink" title="主题小修改"></a>主题小修改</h1><p>原主题的背景图片仅显示在sidebar中，这样左右两边感觉被割裂了一样。背景图片也只能显示很小的一部分。因此我把它改到main-container中。通过以下步骤，很快就能定位并修改。</p><ol><li>在浏览器中inspect特定元素。对着有背景图片的地方右键查看，然后再控制台里找到有设置背景图片的元素。发现是一个id=sidebar的div。</li><li>再往上包含article和sidebar的元素是class=ain-container的div</li><li>在文件中搜查sidebar。将代码剪切到main-container中<br><code>style=&quot;background: url(\{\{ url_for(&quot;images/background.png&quot;) \}\});&quot;</code></li><li>移除<code>.sidebar{}</code>中设置背景颜色的代码</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>devops</title>
      <link href="/2019/01/02/2017/devops/"/>
      <url>/2019/01/02/2017/devops/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h1><p>让机械的流程成为真正的程序。</p><p>这里我用的是daocloud。</p><p>基本步骤如下:</p><p><img src="/blog_images/流程.png" alt="">关于测试这一块不太懂。既然应用都没有构建，测试什么呢？</p><p>在build阶段，根据Dockerfile生成应用的image。</p><p><img src="/blog_images/构建任务.png" alt="">构建参数对应dockerfile的内容。在操作平台右侧有环境变量。但是好像不能在构建的时候传入，如何导入参数这一块还有待了解。</p><p>在运行环境中的参数在应用设置里。</p><p><img src="/blog_images/应用设置.png" alt="">云隧道功能可以在内网环境中部署公网应用。</p><h1 id="Travis-CI-Tutorial"><a href="#Travis-CI-Tutorial" class="headerlink" title="Travis CI Tutorial"></a>Travis CI Tutorial</h1><p>但是对于某些应用使用daocloud还是太笨重了。因为docker还包含了应用运行的环境。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音标 phonetic symbol</title>
      <link href="/2017/05/07/2017/2017-05-07-%E9%9F%B3%E6%A0%87-phonetic-symbol/"/>
      <url>/2017/05/07/2017/2017-05-07-%E9%9F%B3%E6%A0%87-phonetic-symbol/</url>
      
        <content type="html"><![CDATA[<h2 id="元音和辅音的区别"><a href="#元音和辅音的区别" class="headerlink" title="元音和辅音的区别"></a>元音和辅音的区别</h2><p>较为正式的说法是:</p><blockquote><p>其主要区别就是发声时声道是否受阻</p></blockquote><p>就我个人的理解是:</p><ol><li>元音舌头基本不用动，嘴唇动作也比较小。</li><li>辅音常常通过舌头与牙齿的位置，来使得气流摩擦。</li></ol><p>元音基本上靠声带，而辅音还需要嘴巴来辅助发声。</p><p><a href="http://yinbiao.tingclass.net/show-16-9-1.html" title="音标对照表" target="_blank" rel="noopener">IPA,DJ音标,KK音标对照表</a><br><a href="http://www.gotoabc.url.tw/kk/kklist.htm" title="KK音标" target="_blank" rel="noopener">KK音标符号表</a></p><h2 id="元音-Vowel"><a href="#元音-Vowel" class="headerlink" title="元音 Vowel"></a>元音 Vowel</h2><p>5种元音字母 :</p><blockquote><p>A E I O U</p></blockquote><p>15种元音音标:</p><blockquote></blockquote><p>10种拼写方式。</p><embed src="http://www.gotoabc.url.tw/kk/kklist.htm" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" width="623" height="840"><p>下面这2组发音相似，嘴型从小到大:<br>front Vowel:</p><table><thead><tr><th>字母表示</th><th style="text-align:center">音标</th><th>单词 </th></tr></thead><tbody><tr><td>EE</td><td style="text-align:center">[i]</td><td>heat </td></tr><tr><td>I</td><td style="text-align:center">[ɪ]</td><td>hit  </td></tr><tr><td>AE</td><td style="text-align:center">[e]</td><td>hate </td></tr><tr><td>AH</td><td style="text-align:center">[ɛ]</td><td>head </td></tr><tr><td>A-</td><td style="text-align:center">[æ]</td><td>hat  </td></tr></tbody></table><p>back vowel:</p><table><thead><tr><th>字母表示</th><th style="text-align:center">音标</th><th>单词 </th></tr></thead><tbody><tr><td>OO</td><td style="text-align:center">[u]</td><td>boot </td></tr><tr><td>U</td><td style="text-align:center">[ʊ]</td><td>book </td></tr><tr><td>OW</td><td style="text-align:center">[o]</td><td>boat </td></tr><tr><td>AW</td><td style="text-align:center">[ɔ]</td><td>bought </td></tr><tr><td>AH</td><td style="text-align:center">[ʌ]</td><td>but  </td></tr></tbody></table><h2 id="辅音-Consonant"><a href="#辅音-Consonant" class="headerlink" title="辅音  Consonant"></a>辅音  Consonant</h2><p>辅音分为清辅音和浊辅音，区别在于声带是否震动。  </p><blockquote><p>Voicing is when your vocal cords are vibrating in your throat, creating a “buzzing<br>sound”.</p></blockquote><p>Paired Consonants:</p><table><thead><tr><th style="text-align:center">Unvoiced</th><th style="text-align:center">symbol</th><th style="text-align:center">word</th><th style="text-align:center">Voiced</th><th style="text-align:center">symbol</th><th style="text-align:center">word</th></tr></thead><tbody><tr><td style="text-align:center">  P</td><td style="text-align:center">[p]</td><td style="text-align:center"><strong>p</strong>et</td><td style="text-align:center">B</td><td style="text-align:center">[b]</td><td style="text-align:center"><strong>b</strong>ook</td></tr><tr><td style="text-align:center">  T</td><td style="text-align:center">[t]</td><td style="text-align:center"><strong>t</strong>en</td><td style="text-align:center">D</td><td style="text-align:center">[d]</td><td style="text-align:center"><strong>d</strong>esk</td></tr><tr><td style="text-align:center">  F</td><td style="text-align:center">[f]</td><td style="text-align:center"><strong>f</strong>at</td><td style="text-align:center">V</td><td style="text-align:center">[v]</td><td style="text-align:center"><strong>v</strong>est</td></tr><tr><td style="text-align:center">  K</td><td style="text-align:center">[k]</td><td style="text-align:center"><strong>k</strong>ey</td><td style="text-align:center">G</td><td style="text-align:center">[g]</td><td style="text-align:center"><strong>g</strong>et</td></tr><tr><td style="text-align:center">  S</td><td style="text-align:center">[s]</td><td style="text-align:center"><strong>s</strong>ing</td><td style="text-align:center">Z</td><td style="text-align:center">[z]</td><td style="text-align:center"><strong>z</strong>oo</td></tr><tr><td style="text-align:center">  TH</td><td style="text-align:center">[θ]</td><td style="text-align:center"><strong>th</strong>ank</td><td style="text-align:center">TH</td><td style="text-align:center">[ð]</td><td style="text-align:center"><strong>th</strong>is</td></tr><tr><td style="text-align:center">  SH</td><td style="text-align:center">[ʃ]</td><td style="text-align:center"><strong>sh</strong>ort</td><td style="text-align:center">GE(ZSH)</td><td style="text-align:center">[ʒ]</td><td style="text-align:center">u<strong>s</strong>ual</td></tr><tr><td style="text-align:center">  CH</td><td style="text-align:center">[tʃ]</td><td style="text-align:center"><strong>ch</strong>air</td><td style="text-align:center">J</td><td style="text-align:center">[dʒ]</td><td style="text-align:center"><strong>j</strong>oin</td></tr></tbody></table><p>还有一些单独的:</p><table><thead><tr><th style="text-align:center">letter</th><th style="text-align:center">symbol</th><th style="text-align:center">word</th></tr></thead><tbody><tr><td style="text-align:center">  h</td><td style="text-align:center">[h]</td><td style="text-align:center"><strong>h</strong>at</td></tr><tr><td style="text-align:center">  m</td><td style="text-align:center">[m]</td><td style="text-align:center"><strong>m</strong>om</td></tr><tr><td style="text-align:center">  n</td><td style="text-align:center">[n]</td><td style="text-align:center"><strong>n</strong>ose</td></tr><tr><td style="text-align:center"> ing</td><td style="text-align:center">[ŋ]</td><td style="text-align:center">s<strong>ing</strong></td></tr><tr><td style="text-align:center">  l</td><td style="text-align:center">[l]</td><td style="text-align:center"><strong>l</strong>ong</td></tr><tr><td style="text-align:center">  r</td><td style="text-align:center">[r]</td><td style="text-align:center"><strong>r</strong>ed</td></tr><tr><td style="text-align:center">  y</td><td style="text-align:center">[j]</td><td style="text-align:center"><strong>y</strong>es</td></tr><tr><td style="text-align:center">  w</td><td style="text-align:center">[w]</td><td style="text-align:center"><strong>w</strong> e</td></tr></tbody></table><p>一般字母会有对应的音标，但是也不是绝对的。会有一些特殊的规则。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>补给问题</title>
      <link href="/2017/04/07/2017/2017-04-07-%E8%A1%A5%E7%BB%99%E9%97%AE%E9%A2%98/"/>
      <url>/2017/04/07/2017/2017-04-07-%E8%A1%A5%E7%BB%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h1><blockquote><p>一个人要穿越沙漠，路程需要20天才能走完，但他只能携带2天的补给，可以把补给放在途中的任意地方作为补给点，可以返回出发点免费得到补给。问他最少需要多少天才能走出沙漠</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路:"></a>解答思路:</h1><p>要走完全程，必须在路途的中间不断来回设立补给站。这样思考比较有难度。我把它等效转换成另一个问题:</p><blockquote><p>这个人可以携带多个助手，同样可以携带2天的补给，并且要确保助手能安全地返回。</p></blockquote><p>可以把这个助手想象成分身。只要把每一个助手的工作都交给这个人，就回到原来的问题了。<br>现在我们规定每一个人都有2天的水去完成任务，在路上用别人的水。</p><p>对于主角而言，他需要在前18天喝别人的水，最后2天用自留水。<br>如果这个主角带一个小弟，那么他要把2天的水给主角和自己喝，自己还要回到原来的地方。<br><img src="/blog_images/2017-04-07-补给问题-a9217.png" alt="需要到达终点的主角"><br>那么这个小弟的移动距离为: 2/3天<br>更一般地如果上面有n个人要养，有t个送水的。那么这批人只能移动<br>$$ \frac{2 t}{n+2 t} $$<br>然而t的取值似乎是个难题，那就设<code>ti</code>吧。那么总的移动距离为<br>$$ S=\sum_{i=1}^x \frac{2 t_i}{\sum_{j=1}^i t_j+2 t_i} $$<br>既要 S&gt;18 ,同时要<br>$$ \sum_{j=1}^i $$ 最小</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>erlang-rel</title>
      <link href="/2017/03/23/2017/erlang-rel/"/>
      <url>/2017/03/23/2017/erlang-rel/</url>
      
        <content type="html"><![CDATA[<h2 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h2><h3 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1.创建节点"></a>1.创建节点</h3><p>erlang总是以节点为单位组织的。<br>使用<code>rebar create-node nodeid=xxx</code>可以生成<code>files,reltool.config</code>。里面包含了各种节点信息。</p><ul><li><p><a href="http://erlang.org/doc/man/reltool.html" title="reltool" target="_blank" rel="noopener">reltool.config</a><br>下面列举几个比较常用的参数:<br>mod_cond:  </p><ol><li>all: 将会包含所有引用的模块。即在搜索路径下存在ebin的模块都会被包含。</li><li>ebin: 只包含本模块。</li><li>app: 包含本模块和相关模块。</li><li>derived : 包含相关模块。</li></ol><p>lib_dir: 模块搜索目录。<br>excl_sys_filters:将包含在系统目录下匹配的文件。<br>profile: 影响<code>ncl_sys_filters, excl_sys_filters, incl_app_filters and excl_app_filters.</code>的作用</p><ol><li>development</li><li>embedded</li><li>standalone</li></ol><p>excl_lib:实验中，勿使用</p><ul><li>otp_root :不包含erlang运行环境ert  </li></ul><p>app_file: 拷贝app file的程度</p><ol><li>keep</li><li>strip</li><li>all</li></ol></li></ul><h2 id="2-升级"><a href="#2-升级" class="headerlink" title="2.升级"></a>2.升级</h2><p><a href="http://erlang.org/doc/man/appup.html" title="upgrade" target="_blank" rel="noopener">Application.appup</a> 文件描述了如何热升级代码<br>使用如下语法:<br><figure class="hljs highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&#123;<span class="hljs-symbol">Vsn</span>,<br>  [&#123;<span class="hljs-symbol">UpFromVsn</span>, <span class="hljs-symbol">Instructions</span>&#125;, ...],<br>  [&#123;<span class="hljs-symbol">DownToVsn</span>, <span class="hljs-symbol">Instructions</span>&#125;, ...]&#125;.<br></code></pre></td></tr></table></figure></p><p>Instructions 由以下内容构成:</p><pre><code>{update, Mod}{update, Mod, supervisor}{update, Mod, Change}{update, Mod, DepMods}{update, Mod, Change, DepMods}{update, Mod, Change, PrePurge, PostPurge, DepMods}{update, Mod, Timeout, Change, PrePurge, PostPurge, DepMods}{update, Mod, ModType, Timeout, Change, PrePurge, PostPurge, DepMods}  Mod = atom()  ModType = static | dynamic  Timeout = int()&gt;0 | default | infinity  Change = soft | {advanced,Extra}    Extra = term()  PrePurge = PostPurge = soft_purge | brutal_purge  DepMods = [Mod]</code></pre><p>升级过程可以参见:<a href="http://erlang.org/doc/design_principles/release_handling.html" target="_blank" rel="noopener">Release Handling</a></p><ol><li><p>按照<a href="http://erlang.org/doc/design_principles/release_structure.html" title="创建版本" target="_blank" rel="noopener">Release</a>中所述的方法创建版本。</p></li><li><p>将释放转移到目标环境并安装在目标环境中。有关如何安装第一个目标系统的信息，请参阅系统原理。</p></li><li><p>对开发环境中的代码进行修改，例如错误更正。</p></li><li><p>在某些时候，需要制作新版本。相关的.app文件被更新，并写入一个新的.rel文件。</p></li><li><p>对于每个修改的应用程序，创建应用程序升级文件.appup。在此文件中，描述了如何在旧版本和新版本的应用程序之间进行升级和/或降级。</p></li><li><p>基于.appup文件，创建一个名为relup的版本升级文件。该文件描述如何在整个版本的旧版本和新版本之间升级和/或降级。</p></li><li><p>创建新的发行包并将其传输到目标系统。</p></li><li><p>使用发布处理程序解压缩新的发行包。</p></li><li><p>安装新版本，也使用发布处理程序。这是通过评估relup中的指令来完成的。可以添加，删除或重新加载模块，应用程序可以启动，停止或重新启动，等等。在某些情况下，甚至需要重启整个仿真器。</p></li></ol><p><a href="http://erlang.org/doc/design_principles/appup_cookbook.html" title="升级办法" target="_blank" rel="noopener">不同功能的模块的升级办法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker的使用</title>
      <link href="/2016/05/02/2017/docker%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/05/02/2017/docker%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol><li><p>镜像 :是一个只读的模板，包含了<strong>系统 </strong>和<strong> 运行程序</strong>，相当于一份虚拟机的磁盘文件。</p></li><li><p>容器 :当镜像启动后就转化为容器，即<strong>运行状态</strong>。在容器内的修改不会影响镜像，程序的写入操作都保存在容器中。</p></li><li><p>仓库 : 集中存放镜像文件的场所 。</p></li></ol><h1 id="镜像的基本操作"><a href="#镜像的基本操作" class="headerlink" title="镜像的基本操作"></a>镜像的基本操作</h1><ol><li><p>##本地镜像<br> 保存:<code>docker save -o file image</code> ，载入:<code>docker load file</code></p><p> 从容器里获得镜像:<code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p></li><li><p>##网络镜像<br> 类似于git使用<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>和<code>docker push [OPTIONS] NAME[:TAG]</code></p></li><li><h2 id="Dockerfile-自动构建镜像"><a href="#Dockerfile-自动构建镜像" class="headerlink" title="Dockerfile :自动构建镜像"></a>Dockerfile :自动构建镜像</h2><p> 用法:<code>docker build</code></p><p> Dockerfile 的写法</p><blockquote><ol><li>使用#来注释</li><li>FROM :指令告诉 Docker 使用哪个镜像(下载镜像）</li><li>RUN  :下载镜像后执行的命令结果会写入到镜像 中，比如安装一个软件包。</li><li>ADD  :src destination,将本地文件写入镜像。</li><li>CMD  :  command param1 param2 , 提供了容器默认的执行命令。 Dockerfile 只允许使用一次 CMD 指令 </li><li>EXPOSE : port, 指定容器在运行时监听的端口。</li><li>ENTRYPOINT:配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序 </li><li>WORKDIR :path, 指定RUN、CMD与ENTRYPOINT命令的工作目录。</li><li>VOLUME :[path], 授权访问从容器内到主机上的目录<br>10 . ENV <key> <value> ; USER <uid> </uid></value></key></li></ol></blockquote></li></ol><h1 id="容器的基本操作"><a href="#容器的基本操作" class="headerlink" title="容器的基本操作"></a>容器的基本操作</h1><ol><li>##run:<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code> 从镜像中创建容器<ul><li>-d :后台运行</li><li>-i :保持容器活动</li><li>-t :进行交互</li><li>-p [主机:port:port]:端口映射</li><li>-P :随机端口映射</li><li>-v:绑定外部存储空间 </li><li>其他重要的:–name:容器命名，–link，–ip, –rm</li></ul></li><li><p>##start,stop :<code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></p><p> 当使用run创建出新的容器后，使用这2个命令来控制容器的运行状态。</p></li><li><p>##查看容器:<code>docker ps -a</code></p><p> 不带参数则为当前运行状态的容器</p></li><li><p>##进入容器</p><ol><li><p><code>docker attach [OPTIONS] CONTAINER</code> :把后台容器调到前端。</p></li><li><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>:在容器内新建一个命令。</p><p><code>docker  exec -it  CONTAINER bash</code></p></li><li><p>使用 nsenter 等软件。</p></li></ol></li><li><p>##连接容器</p><p> <code>docker run --link  name:alias  CONTAINER</code>:将新建主机和被连接的主机组成一个局域网。</p><p> name 是指被连接的容器，alias是在这个互联网络内name的主机名称。在新建的容器内使用alias进行访问（ping alias）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中断描述表(idt)和全局描述符表(GDT)</title>
      <link href="/2016/01/02/idt/"/>
      <url>/2016/01/02/idt/</url>
      
        <content type="html"><![CDATA[<h2 id="GDT-的结构"><a href="#GDT-的结构" class="headerlink" title="GDT 的结构"></a>GDT 的结构</h2><p><img src="/blog_images/gdt.png" alt=""><br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/* segment descriptors */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segdesc</span> &#123;</span><br>    <span class="hljs-keyword">unsigned</span> sd_lim_15_0 : <span class="hljs-number">16</span>;        <span class="hljs-comment">// low bits of segment limit</span><br>    <span class="hljs-keyword">unsigned</span> sd_base_15_0 : <span class="hljs-number">16</span>;        <span class="hljs-comment">// low bits of segment base address</span><br>    <span class="hljs-keyword">unsigned</span> sd_base_23_16 : <span class="hljs-number">8</span>;        <span class="hljs-comment">// middle bits of segment base address</span><br>    <span class="hljs-keyword">unsigned</span> sd_type : <span class="hljs-number">4</span>;            <span class="hljs-comment">// segment type (see STS_ constants)</span><br>    <span class="hljs-keyword">unsigned</span> sd_s : <span class="hljs-number">1</span>;                <span class="hljs-comment">// 0 = system, 1 = application</span><br>    <span class="hljs-keyword">unsigned</span> sd_dpl : <span class="hljs-number">2</span>;            <span class="hljs-comment">// descriptor Privilege Level</span><br>    <span class="hljs-keyword">unsigned</span> sd_p : <span class="hljs-number">1</span>;                <span class="hljs-comment">// present</span><br>    <span class="hljs-keyword">unsigned</span> sd_lim_19_16 : <span class="hljs-number">4</span>;        <span class="hljs-comment">// high bits of segment limit</span><br>    <span class="hljs-keyword">unsigned</span> sd_avl : <span class="hljs-number">1</span>;            <span class="hljs-comment">// unused (available for software use)</span><br>    <span class="hljs-keyword">unsigned</span> sd_rsv1 : <span class="hljs-number">1</span>;            <span class="hljs-comment">// reserved</span><br>    <span class="hljs-keyword">unsigned</span> sd_db : <span class="hljs-number">1</span>;                <span class="hljs-comment">// 0 = 16-bit segment, 1 = 32-bit segment</span><br>    <span class="hljs-keyword">unsigned</span> sd_g : <span class="hljs-number">1</span>;                <span class="hljs-comment">// granularity: limit scaled by 4K when set</span><br>    <span class="hljs-keyword">unsigned</span> sd_base_31_24 : <span class="hljs-number">8</span>;        <span class="hljs-comment">// high bits of segment base address</span><br>&#125;;<br></code></pre></td></tr></table></figure></p><p>组成:</p><ol><li>32 位的段基址</li><li>20 位的段界限</li><li>1  位的D/B Flag:说明使用16位/32位的段。为1即可。</li><li>1  位的G(Granularity,粒度):为 1 ,段的大小以 4 KB 为单位。为0，段的大小为1byte。</li><li>1  位的L:1为64位系统。0为32位。</li><li>1  位的P(segment-Present,段占用?) : 用于标志段是否在内存中。</li><li>2  位的DPL:DPL(Descriptor Privilege Level)域标志着段的特权级，0为特权级，3为用户。</li><li>1  位的S:S(descriptor type) flag 标志着该段是否系统段:置为 0 代表该段是系统段;置为 1 代表该段是代码段或者数据段。</li><li>4  位的Type:设置数据／代码段时的读写等权限。</li><li>1位的AVL:保留给操作系统软件使用的位。<br>共64位。<figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#define SEG(type, base, lim, dpl)                        \<br>    (struct segdesc)&#123;                                    \<br>        ((lim) &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xffff</span>, (base) &amp; <span class="hljs-number">0xffff</span>,        \<br>        ((base) &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>, type, <span class="hljs-number">1</span>, dpl, <span class="hljs-number">1</span>,            \<br>        (unsigned)(lim) &gt;&gt; <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,                \<br>        (unsigned) (base) &gt;&gt; <span class="hljs-number">24</span>                            \<br>    &#125;<br>    <br>    <span class="hljs-comment">/* Application segment type bits */</span><br>#define STA_X       <span class="hljs-number">0x8</span>     <span class="hljs-comment">// Executable segment</span><br>#define STA_E       <span class="hljs-number">0x4</span>     <span class="hljs-comment">// Expand down (non-executable segments)</span><br>#define STA_C       <span class="hljs-number">0x4</span>     <span class="hljs-comment">// Conforming code segment (executable only)</span><br>#define STA_W       <span class="hljs-number">0x2</span>     <span class="hljs-comment">// Writeable (non-executable segments)</span><br>#define STA_R       <span class="hljs-number">0x2</span>     <span class="hljs-comment">// Readable (executable segments)</span><br>#define STA_A       <span class="hljs-number">0x1</span>     <span class="hljs-comment">// Accessed</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="初始化GDT"><a href="#初始化GDT" class="headerlink" title="初始化GDT"></a>初始化GDT</h2><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">static</span> <span class="hljs-keyword">struct</span> segdesc gdt[] = &#123;<br>    SEG_NULL,<br>    [<span class="hljs-meta">SEG_KTEXT</span>] = SEG(STA_X | STA_R, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xFFFFFFFF</span>, DPL_KERNEL),<br>    [<span class="hljs-meta">SEG_KDATA</span>] = SEG(STA_W, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xFFFFFFFF</span>, DPL_KERNEL),<br>    [<span class="hljs-meta">SEG_UTEXT</span>] = SEG(STA_X | STA_R, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xFFFFFFFF</span>, DPL_USER),<br>    [<span class="hljs-meta">SEG_UDATA</span>] = SEG(STA_W, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xFFFFFFFF</span>, DPL_USER),<br>    [<span class="hljs-meta">SEG_TSS</span>]    = SEG_NULL,<br>&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">struct</span> pseudodesc gdt_pd = &#123;<br>    <span class="hljs-keyword">sizeof</span>(gdt) - <span class="hljs-number">1</span>, (uint32_t)gdt<br>&#125;;<br>lgdt(&amp;gdt_pd);<br></code></pre></td></tr></table></figure><p>系统启动时cs为8H,ds为10H.</p><p>gdt[x]描述了该段的工作方式。其下标x指名当cs/ds为x&lt;&lt;3时，该描述符生效。</p><h2 id="IDT的结构"><a href="#IDT的结构" class="headerlink" title="IDT的结构"></a>IDT的结构</h2><p><img src="/blog_images/0_12833186831ecn.gif" alt=""><br>IDT是一个最大为256项的表，每个表项为8字节。称为中断门。CPU通过IDT.base+n*8来寻找门。</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/* Gate descriptors for interrupts and traps */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gatedesc</span> &#123;</span><br>    <span class="hljs-keyword">unsigned</span> gd_off_15_0 : <span class="hljs-number">16</span>;        <span class="hljs-comment">// low 16 bits of offset in segment</span><br>    <span class="hljs-keyword">unsigned</span> gd_ss : <span class="hljs-number">16</span>;            <span class="hljs-comment">// segment selector</span><br>    <span class="hljs-keyword">unsigned</span> gd_args : <span class="hljs-number">5</span>;            <span class="hljs-comment">// # args, 0 for interrupt/trap gates</span><br>    <span class="hljs-keyword">unsigned</span> gd_rsv1 : <span class="hljs-number">3</span>;            <span class="hljs-comment">// reserved(should be zero I guess)</span><br>    <span class="hljs-keyword">unsigned</span> gd_type : <span class="hljs-number">4</span>;            <span class="hljs-comment">// type(STS_&#123;TG,IG32,TG32&#125;)</span><br>    <span class="hljs-keyword">unsigned</span> gd_s : <span class="hljs-number">1</span>;                <span class="hljs-comment">// must be 0 (system)</span><br>    <span class="hljs-keyword">unsigned</span> gd_dpl : <span class="hljs-number">2</span>;            <span class="hljs-comment">// descriptor(meaning new) privilege level</span><br>    <span class="hljs-keyword">unsigned</span> gd_p : <span class="hljs-number">1</span>;                <span class="hljs-comment">// Present</span><br>    <span class="hljs-keyword">unsigned</span> gd_off_31_16 : <span class="hljs-number">16</span>;        <span class="hljs-comment">// high bits of offset in segment</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>组成:（陷阱门、中断门）</p><ol><li>32 位中断地址: 中断服务程序的地址</li><li>16 位段选择地址:中断服务程序的段地址</li><li>4  位类型:    STS_{TG,IG32,TG32}</li><li>2  位的DPL:DPL(Descriptor Privilege Level)域标志着中断的特权级，0为特权级，3为用户。</li></ol><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">#define SETGATE(gate, istrap, sel, off, dpl) &#123;            \<br>    (gate).gd_off_15</span>_<span class="hljs-number">0</span> = <span class="hljs-comment">(uint32_t)</span><span class="hljs-comment">(off)</span> &amp; <span class="hljs-number">0</span>xffff;        \<br>    <span class="hljs-comment">(gate)</span>.gd_ss = <span class="hljs-comment">(sel)</span>;                                \<br>    <span class="hljs-comment">(gate)</span>.gd_args = <span class="hljs-number">0</span>;                                    \<br>    <span class="hljs-comment">(gate)</span>.gd_rsv<span class="hljs-number">1</span> = <span class="hljs-number">0</span>;                                    \<br>    <span class="hljs-comment">(gate)</span>.gd_type = <span class="hljs-comment">(istrap)</span> ? STS_T<span class="hljs-name">G32</span> : STS_I<span class="hljs-name">G32</span>;    \<br>    <span class="hljs-comment">(gate)</span>.gd_s = <span class="hljs-number">0</span>;                                    \<br>    <span class="hljs-comment">(gate)</span>.gd_dpl = <span class="hljs-comment">(dpl)</span>;                                \<br>    <span class="hljs-comment">(gate)</span>.gd_p = <span class="hljs-number">1</span>;                                    \<br>    <span class="hljs-comment">(gate)</span>.gd_off_<span class="hljs-number">31</span>_<span class="hljs-number">16</span> = <span class="hljs-comment">(uint32_t)</span><span class="hljs-comment">(off)</span> &gt;&gt; <span class="hljs-number">16</span>;        \<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gatedesc</span> <span class="hljs-title">idt</span>[256] = &#123;</span>&#123;<span class="hljs-number">0</span>&#125;&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pseudodesc</span> <span class="hljs-title">idt_pd</span> = &#123;</span><br>    <span class="hljs-keyword">sizeof</span>(idt) - <span class="hljs-number">1</span>, (<span class="hljs-keyword">uintptr_t</span>)idt<br>&#125;;<br><span class="hljs-keyword">while</span> ( ++i &lt; <span class="hljs-number">256</span> ) &#123;<br>    SETGATE(idt[i],<span class="hljs-number">1</span>,GD_KTEXT,__vectors[i],DPL_KERNEL);<br>&#125;<br>SETGATE(idt[T_SWITCH_TOK], <span class="hljs-number">0</span>, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);<br><br>lidt(&amp;idt_pd);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>erlang:闭包与伪递归</title>
      <link href="/2015/05/02/2016/erlang/"/>
      <url>/2015/05/02/2016/erlang/</url>
      
        <content type="html"><![CDATA[<p>通过2个例子:实现矩阵（访问二维数组）和 求和 来讲述闭包与尾递归的优点。<br><figure class="hljs highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#<span class="hljs-comment">!/usr/bin/escript</span><br>main(_) -&gt;<br>  X=make_matrix(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-number">2</span>),<br>  Y=make_matrix(&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<span class="hljs-number">2</span>),<br>  Z=mul_matrix(X,Y,<span class="hljs-number">2</span>),<br>  print_matrix(X,<span class="hljs-number">2</span>),io:<span class="hljs-keyword">format</span>(<span class="hljs-string">"* ~n"</span>),<br>  print_matrix(Y,<span class="hljs-number">2</span>),io:<span class="hljs-keyword">format</span>(<span class="hljs-string">"= ~n"</span>),<br>  print_matrix(Z,<span class="hljs-number">2</span>).<br><br><br>%% generate a matrix<br><br>make_matrix(<span class="hljs-keyword">Data</span>,<span class="hljs-built_in">Size</span>) when erlang:is_list(<span class="hljs-keyword">Data</span>) -&gt;  make_matrix(list_to_tuple(<span class="hljs-keyword">Data</span>),<span class="hljs-built_in">Size</span>);<br>make_matrix(<span class="hljs-keyword">Data</span>,<span class="hljs-built_in">Size</span>) -&gt;<br>  fun(I,J) when I =&lt; <span class="hljs-built_in">Size</span> , J =&lt; <span class="hljs-built_in">Size</span> -&gt; element(I*<span class="hljs-built_in">Size</span>+J-<span class="hljs-built_in">Size</span>,<span class="hljs-keyword">Data</span>) <span class="hljs-keyword">end</span>.<br><br>%% X , Y: matrix  -&gt; matrix<br><br>mul_matrix(X,Y,<span class="hljs-built_in">Size</span>) -&gt;<br>  make_matrix([ lists:<span class="hljs-built_in">sum</span>([ X(X1,T)*Y(T,Y1)|| T &lt;- lists:seq(<span class="hljs-number">1</span>,<span class="hljs-built_in">Size</span>) ])<br>    || X1 &lt;- lists:seq(<span class="hljs-number">1</span>,<span class="hljs-built_in">Size</span>), Y1 &lt;- lists:seq(<span class="hljs-number">1</span>,<span class="hljs-built_in">Size</span>) ],<span class="hljs-built_in">Size</span>).<br><br>print_matrix([],<span class="hljs-built_in">Size</span>) -&gt; ok;<br>print_matrix(Matrix,<span class="hljs-built_in">Size</span>) when is_function(Matrix) -&gt;<br>  print_matrix([Matrix(X1,Y1) || X1 &lt;- lists:seq(<span class="hljs-number">1</span>,<span class="hljs-built_in">Size</span>), Y1 &lt;- lists:seq(<span class="hljs-number">1</span>,<span class="hljs-built_in">Size</span>) ],<span class="hljs-built_in">Size</span>);<br>print_matrix(Matrix,<span class="hljs-built_in">Size</span>) -&gt;<br>  &#123;L,R&#125;=lists:split(<span class="hljs-built_in">Size</span>,Matrix),<br>  io:<span class="hljs-keyword">format</span>(<span class="hljs-string">"~w ~n"</span>,[L]),<br>  print_matrix(R,<span class="hljs-built_in">Size</span>).<br><br><br><span class="hljs-built_in">sum</span>(Start,<span class="hljs-keyword">End</span>) -&gt;<br>  <span class="hljs-built_in">sum</span>(Start+<span class="hljs-number">1</span>,<span class="hljs-keyword">End</span>,Start).<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">End</span>,<span class="hljs-keyword">End</span>,<span class="hljs-built_in">Sum</span>) -&gt;<br>  <span class="hljs-built_in">Sum</span>+<span class="hljs-keyword">End</span>;<br><span class="hljs-built_in">sum</span>(Start,<span class="hljs-keyword">End</span>,<span class="hljs-built_in">Sum</span>) -&gt;<br>  <span class="hljs-built_in">sum</span>(Start+<span class="hljs-number">1</span>,<span class="hljs-keyword">End</span>,<span class="hljs-built_in">Sum</span>+Start).<br></code></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包:"></a>闭包:</h3><p>由于erlang只有2种数据容器（list和tuple），2者都是一维的。在访问上tuple是顺序访问的，而链表需要遍历节点。 因此使用tuple优于list。2维数组退化为一维数组也不是什么难事，只要知道Size然后使用<code>t=i*size+j</code>进行转化。 这样可以很自然地得到<code>Xij =element(I*Size+J-Size,Data)</code>。可是这样我们需要使用4个变量来访问矩阵，并且必须时刻记住Data 与Size ，十分不方便也容易犯错。</p><figure class="hljs highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">make_matrix(Data,Size) -&gt;<br> <span class="hljs-function"><span class="hljs-keyword">fun</span>(<span class="hljs-title">I</span></span>,J) <span class="hljs-keyword">when</span> I =&lt; Size , J =&lt; Size -&gt; element(I*Size+J-Size,Data) <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure><p>采用闭包将Data与Size存入函数体内部，隐藏细节。</p><p>访问矩阵就变成了:<br><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Matrix=make_matrix(Data,Size),<br><span class="hljs-function"><span class="hljs-title">Matrix</span><span class="hljs-params">(i,j)</span></span><br></code></pre></td></tr></table></figure></p><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归:"></a>尾递归:</h3><p>尾调用指的是一个函数最后一次执行的方法。而尾递归是 尾调用为递归函数时的特殊情况。当一个函数为尾递归时，在将参数复制给下一个函数后，原函数可以安全地退出，因而能够充分地利用堆栈。但也并不是说尾递归更好。如果返回的结果简单，就放心的使用尾递归吧。如果是这样</p><figure class="hljs highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">q_sort([]) -&gt; [];<br>q_sort([H|<span class="hljs-keyword">R</span>]) -&gt;<br>  q_sort([<span class="hljs-keyword">X</span> || <span class="hljs-keyword">X</span> &lt;-<span class="hljs-keyword">R</span> ,<span class="hljs-keyword">X</span> =&lt; H])<br>  ++ [H] ++<br>  q_sort([<span class="hljs-keyword">X</span> || <span class="hljs-keyword">X</span> &lt;-<span class="hljs-keyword">R</span> ,<span class="hljs-keyword">X</span> &gt; H]).<br></code></pre></td></tr></table></figure><p>挖空心思来实现尾递归并不太明智。</p>]]></content>
      
      
      <categories>
          
          <category> erlang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>type</title>
      <link href="/2015/05/02/2016/type/"/>
      <url>/2015/05/02/2016/type/</url>
      
        <content type="html"><![CDATA[<p>这里要提的不是简单的基本类型。主要内容包括:</p><p>####1.左值右值 2.引用 3. const 关键字 4.类型转换</p><p>##左值、右值</p><p>这是一种很隐含的类型。因为不能简单的通过关键字来进行修饰。为什么需要严格区分左值、右值？右值可以理解为一个临时的数据，它即将销毁，如果我们能够对它加以区分可以重新利用这部分资源。同时他们是理解 move, forward 等新语义的基础。或许这是c++11最重要的特性，因为如线程库一类只是语言的扩展，右值的引入使得程序设计有了新的思路。</p><p>完整的LValue和RValue的界定<br><img src="/blog_images/2012070118490149.png" alt=""></p><p>一般来说左值对应于修改操作，右值对应于赋值操作。</p><ol><li><p>lvalue（左值）:</p><p>lvalue指代一个函数或者对象。例如:</p><blockquote><p>E是指针，则*E是lvalue<br>一个函数的返回值是左值引用，其返回值是lvalue。例如int&amp; foo();</p></blockquote></li><li><p>xvalue（expiring value，临终值）:</p><p>xvalue指代一个对象，但是和lvalue不同，这个对象即将消亡。具体来说，xvalue是包含了右值引用的表达式。因为右值引用是C++11新引入的东西，所以xvalue也是一个新玩意。例如:</p><blockquote><p>一个函数的返回值是右值引用，其返回值是xvalue。例如int&amp;&amp; foo();</p></blockquote></li><li><p>glvalue（generalized lvalue，泛左值）<br>glvalue即lvalue和xvalue的统称。</p></li><li><p>rvalue（右值）<br>rvalue是xvalue和prvalue的统称。因为引入了右值引用，rvalue的定义在C++中被扩大化了。</p></li><li><p>prvalue（pure rvalue，纯右值）<br>prvalue指代一个<strong>临时对象</strong>、一个临时对象的子对象或者一个没有分配给任何对象的<strong>值</strong>。prvalue即老标准中的rvalue。例如:</p></li></ol><pre><code>一个函数的返回值是平常类型，其返回值是rvalue。例如int foo();没有分配给任何对象的值。如5.3，true。</code></pre><p>以上都是偏学术的东西，下面来点干货。</p><p><strong>左值是对象操作的实体，而右值意味着它即将消亡。</strong></p><blockquote><p>只有左值才能进行相应的操作如赋值，调用成员函数。左值是一个实实在在的东西。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&gt; int <span class="hljs-attribute">a</span>=1,b=2;<br>&gt; <span class="hljs-attribute">a</span>=b;<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>显然a是左值，那么b呢？<br>因为b内存储着资源，占用着空间，所以它也是一个左值。</p><p>我凭什么这样说呢？因为<code>int&amp;&amp; c=b;</code>是一个错误的句子，所以我很肯定。</p></blockquote><blockquote><p>而右值就是那些马上就没的东西。如函数的返回值，没有声明变量的类。<br><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> widget <span class="hljs-function"><span class="hljs-title">f1</span></span>() &#123; <span class="hljs-built_in">return</span> widget();&#125;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> widget&amp;&amp; w1=widget();</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></p></blockquote><blockquote></blockquote><p>需要注意的是右值与左值是可以相互转化的。比如我们可以调用f1返回的对象中的 成员函数，总的来说右值转换为左值容易一些，但是无法改变右值即将消亡的事实。对于右值我们必须马上救济<code>widget w0=f1();</code></p><p><strong>一个简单判断右值的方法就是:能不能去初始化右值引用</strong></p><p>一个函数的参数总是左值。即使声明为右值引用<code>void f(Widget&amp;&amp; w);</code></p><p><strong>引用都是左值</strong>，右值引用不是右值，而是绑定到右值的左值。</p><p>##const</p><ol><li>修饰普通变量<figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ol><p>都是不可修改变量值</p><ol start="2"><li>修饰指针，函数返回值<figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">   <span class="hljs-keyword">int</span> test = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span>* <span class="hljs-keyword">const</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>*  b=<span class="hljs-number">0</span>;<br>*a = <span class="hljs-number">10</span>;<br>b = &amp;test;<br>a = b;<span class="hljs-comment">//wrong</span><br></code></pre></td></tr></table></figure></li></ol><p>此时需要注意const 后面的内容。 const 修饰变量名称表示该变量的值不可更改。const 修饰前面的类型(int<em>)<br>表示其指向的内容不可更改，即 `</em>b=1`是<strong>非法的</strong></p>  <figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-keyword">const</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">const</span> a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;  b)</span></span>; <span class="hljs-comment">//由于函数返回值不可作为左值，所以无意义</span><br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>*  <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">const</span> a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;  b)</span></span>;<span class="hljs-comment">//返回的对象必须是const int*</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>修饰引用</p> <figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">   <span class="hljs-keyword">int</span>&amp; <span class="hljs-keyword">const</span> a = test;<span class="hljs-comment">//vc编译能过，但是没有任何意义。clang不行。 所以避免出现这种用法。</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;  b=test;<span class="hljs-comment">//1</span><br>a = <span class="hljs-number">8</span>; a = t1;<br></code></pre></td></tr></table></figure><p> [1]成为常左值引用，不可做任何修改。</p></li><li><p>转换</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; a)</span></span>;<br><span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;<br>f2(c);<br></code></pre></td></tr></table></figure><p>非 常 类型数据可以隐式地转化为 常 类型。</p></li></ol><p>##引用<br>在传统c中，如果要将数据作为参数交给函数体修改，则必须使用指针。在c++中，引用是更加安全有效的办法。相比于指针，引用没有内存泄路漏的问题。再配合新的智能指针，传统的指针应当被取代弃用。</p><p><a href="http://blog.csdn.net/webscaler/article/details/6577429" target="_blank" rel="noopener">引用作为一种类型也需要空间，可以理解为 T*  const  </a><br>    <figure class="hljs highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">   T <span class="hljs-function"><span class="hljs-keyword">fun</span>();<br>   <span class="hljs-title">int</span></span> main()<br>   &#123;<br>auto&amp;&amp; ref_r = <span class="hljs-function"><span class="hljs-keyword">fun</span><span class="hljs-title">&lt;</span></span>func&gt;(); <span class="hljs-regexp">//fun</span>:<span class="hljs-number">0</span><br>&#123;<br>auto&amp; ref = <span class="hljs-function"><span class="hljs-keyword">fun</span><span class="hljs-title">&lt;</span></span>func&gt;();<br>&#125;/<span class="hljs-regexp">/~fun:0<br>func f;/</span><span class="hljs-regexp">/fun:1<br>fun&lt;func&gt;() = f;/</span><span class="hljs-regexp">/~fun:1<br>   /</span>*<br>   <span class="hljs-symbol">exit:</span><br>   ~<span class="hljs-function"><span class="hljs-keyword">fun</span>:1<br>   <span class="hljs-title">~</span></span><span class="hljs-function"><span class="hljs-keyword">fun</span>:0<br>   <span class="hljs-title">~</span></span><span class="hljs-function"><span class="hljs-keyword">fun</span>:0<br>   <span class="hljs-title">*</span></span>/<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></p><p>右值引用为fun()返回临时变量延长了生命周期，变为该引用的生命周期。</p><p>详细的内容请看这里 <a href="references.md">引用</a></p><h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><p>c++中使用了3种类型推导方法:<code>auto</code>,<code>template</code>,<code>decltype</code>.</p><p>####template</p><figure class="hljs highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;typename T&gt;<br><span class="hljs-built_in">void</span> f(<span class="hljs-type">ParamType</span> param);<br>f(<span class="hljs-built_in">expr</span>); // deduce T <span class="hljs-keyword">and</span> <span class="hljs-type">ParamType</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">expr</span><br></code></pre></td></tr></table></figure><ol><li>ParamType is a Pointer or Reference<figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp; param)</span></span>; <span class="hljs-comment">// param is a reference</span><br></code></pre></td></tr></table></figure></li></ol><p>T的类型与调用时参数的类型一致，基本上和我们设想的结果一样</p><ol start="2"><li>ParamType is a Universal Reference<figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;&amp; param)</span></span>; <span class="hljs-comment">// param is now a universal reference</span><br></code></pre></td></tr></table></figure></li></ol><p>只要了解泛引用这个问题就好理解了，详情看<a href="references.md">引用</a>。</p><p>  param 的实际类型由调用时的参数决定。<br><figure class="hljs highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">int</span> x = <span class="hljs-number">27</span>; // <span class="hljs-keyword">as</span> before<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> cx = x; // <span class="hljs-keyword">as</span> before<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp; rx = x; // <span class="hljs-keyword">as</span> before<br>f(x); // x <span class="hljs-keyword">is</span> lvalue, so T <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>&amp;,<br>      // param's <span class="hljs-keyword">type</span> <span class="hljs-keyword">is</span> also <span class="hljs-built_in">int</span>&amp;<br>f(cx); // cx <span class="hljs-keyword">is</span> lvalue, so T <span class="hljs-keyword">is</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp;,<br>       // param's <span class="hljs-keyword">type</span> <span class="hljs-keyword">is</span> also <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp;<br>f(rx); // rx <span class="hljs-keyword">is</span> lvalue, so T <span class="hljs-keyword">is</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp;,<br>        // param's <span class="hljs-keyword">type</span> <span class="hljs-keyword">is</span> also <span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp;<br>f(<span class="hljs-number">27</span>); // <span class="hljs-number">27</span> <span class="hljs-keyword">is</span> rvalue, so T <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>,<br>        // param's <span class="hljs-keyword">type</span> <span class="hljs-keyword">is</span> therefore <span class="hljs-built_in">int</span>&amp;&amp;<br></code></pre></td></tr></table></figure></p><ol start="3"><li>ParamType is Neither a Pointer nor a Reference<figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T param)</span></span>; <span class="hljs-comment">// param is now passed by value</span><br></code></pre></td></tr></table></figure></li></ol><p>这种情况会去掉调用参数的类型修饰，如const,reference</p>  <figure class="hljs highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">int</span> x = <span class="hljs-number">27</span>; // <span class="hljs-keyword">as</span> before<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> cx = x; // <span class="hljs-keyword">as</span> before<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp; rx = x; // <span class="hljs-keyword">as</span> before<br>f(x); // T <span class="hljs-keyword">and</span> param are both <span class="hljs-built_in">int</span><br>f(cx); // T <span class="hljs-keyword">and</span> param are again both <span class="hljs-built_in">int</span><br>f(rx); // T <span class="hljs-keyword">and</span> param are still both <span class="hljs-built_in">int</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* <span class="hljs-keyword">const</span> <span class="hljs-keyword">ptr</span> = // <span class="hljs-keyword">ptr</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-keyword">object</span><br><span class="hljs-string">"Fun with pointers"</span>;<br>f(<span class="hljs-keyword">ptr</span>); // pass arg <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span><br>// <span class="hljs-keyword">ptr</span>的类型是<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* ,被<span class="hljs-keyword">const</span>修饰表示变量值不可改变<br></code></pre></td></tr></table></figure><ol start="4"><li>最后还有需要注意的一点是如果参数是数组或者函数指针，那么情况会变得有点奇怪。</li></ol><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">int</span> keyVals[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">35</span> &#125;;<br>fun(keyVals);<br><span class="hljs-comment">//调用以上语句</span><br><span class="hljs-comment">//如果fun的声明如下</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(T a)</span><span class="hljs-comment">//void fun&lt;int*&gt;(T):T=int*</span><br></span>&#123;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(T&amp; a)</span><span class="hljs-comment">//void fun&lt;int[7]&gt;(T (&amp;)):T=int [7]</span><br></span>&#123;<br>&#125;<br><span class="hljs-comment">//T&amp; 保留了数组的大小信息，因而优于T</span><br><br><span class="hljs-comment">//巧用模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> N&gt; <span class="hljs-comment">// return size of</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> arraySize(T (&amp;)[N]) <span class="hljs-comment">// an array as a</span><br>&#123; <span class="hljs-comment">// compile-time</span><br><span class="hljs-keyword">return</span> N; <span class="hljs-comment">// constant</span><br>&#125;<br><br><span class="hljs-comment">//对于函数指针2者之间其实没有太大的区别。</span><br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">someFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>)</span></span>; <span class="hljs-comment">// someFunc is a function;</span><br>                             <span class="hljs-comment">// type is void(int, double)</span><br> <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(T param)</span></span>; <span class="hljs-comment">// in f1, param passed by value</span><br> <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(T&amp; param)</span></span>; <span class="hljs-comment">// in f2, param passed by ref</span><br> f1(someFunc); <span class="hljs-comment">// param deduced as ptr-to-func;</span><br>               <span class="hljs-comment">// type is void (*)(int, double)</span><br> f2(someFunc); <span class="hljs-comment">// param deduced as ref-to-func;</span><br>               <span class="hljs-comment">// type is void (&amp;)(int, double)</span><br></code></pre></td></tr></table></figure><p>##auto<br>其实和template没有太大区别。最大的不同在于:<br><figure class="hljs highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">auto</span> x5 = <span class="hljs-meta">&#123;...&#125;</span>; // std::initializer_list&lt;T&gt;<br></code></pre></td></tr></table></figure></p><p>而在函数中{}无法被正确的解释，因而template也随之失效。</p><p>##decltype<br>根据表达式和对象来推导类型。这个推导最接近于对象的真实类型。<br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Widget w;<br><span class="hljs-keyword">const</span> Widget&amp; cw = w;<br><span class="hljs-keyword">auto</span> myWidget1 = cw; <span class="hljs-comment">// auto type deduction:</span><br>                     <span class="hljs-comment">// myWidget1's type is Widget</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) myWidget2 = cw; <span class="hljs-comment">// decltype type deduction:</span><br>                               <span class="hljs-comment">// myWidget2's type is</span><br>                               <span class="hljs-comment">// const Widget&amp;</span><br><span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">decltype</span>((x)); <span class="hljs-comment">//int&amp;</span><br><span class="hljs-keyword">decltype</span>(x);   <span class="hljs-comment">//int</span><br></code></pre></td></tr></table></figure></p><p>decltype(auto)使用的是decltype的类型推导而不是auto。</p><p>因为<code>(x)</code>是一个表达式，因而将其作为一个左值来解释。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol><li><p>static_cast &lt;new_type&gt; (expression)</p><p> 基本上用于静态类型转换，也能转换指针但不进行运行时安全检查，所以是非安全的。</p></li><li><p>const_cast &lt;new_type&gt; (expression)</p><p>可去除对象的常量性（const），它还可以去除对象的易变性（volatile）。</p></li><li><p>dynamic_cast &lt;new_type&gt; (expression)</p><p>它能安全地将指向基类的指针转型为指向子类的指针或引用。</p></li><li>reinterpret_cast &lt;new_type&gt; (expression)<br>常用的一个用途是转换函数指针类型，即可以将一种类型的函数指针转换为另一种类型的函数指针，但这种转换可能会导致不正确的结果。无任何条件的转换，一般只用于底层代码。</li></ol>]]></content>
      
      
      <categories>
          
          <category> c plus plus </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>onvif</title>
      <link href="/2015/05/02/2016/onvif/"/>
      <url>/2015/05/02/2016/onvif/</url>
      
        <content type="html"><![CDATA[<p>#设备发现协议</p><p>发送如下XML消息。服务端会返回设备信息<br><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Envelope</span> <span class="hljs-attr">xmlns:dn</span>=<span class="hljs-string">"http://www.onvif.org/ver10/network/wsdl"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/2003/05/soap-envelope"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">wsa:MessageID</span> <span class="hljs-attr">xmlns:wsa</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2004/08/addressing"</span>&gt;</span>uuid:6d09a111-2662-49de-ba92-b429b35ec189<span class="hljs-tag">&lt;/<span class="hljs-name">wsa:MessageID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">wsa:To</span> <span class="hljs-attr">xmlns:wsa</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2004/08/addressing"</span>&gt;</span>urn:schemas-xmlsoap-org:ws:2005:04:discovery<span class="hljs-tag">&lt;/<span class="hljs-name">wsa:To</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">wsa:Action</span> <span class="hljs-attr">xmlns:wsa</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2004/08/addressing"</span>&gt;</span>http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe<span class="hljs-tag">&lt;/<span class="hljs-name">wsa:Action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Probe</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:xsd</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2005/04/discovery"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Types</span>&gt;</span>dn:NetworkVideoTransmitter<span class="hljs-tag">&lt;/<span class="hljs-name">Types</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Scopes</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Probe</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Envelope</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p>##erlang 脚本</p><p>首先需要向239.255.255.250:3702 以UDP协议发送XML消息。<br><figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">% udp Client </span><br><span class="hljs-function"><span class="hljs-title">client</span><span class="hljs-params">(Port,Msg)</span> -&gt;</span><br>  &#123;ok, Socket&#125; = gen_udp:open(<span class="hljs-number">0</span>, [binary]),<br>  io:format(<span class="hljs-string">"client opened socket=~p~n"</span>,[Socket]),<br>  ok = gen_udp:send(Socket, Port, <span class="hljs-number">3702</span>, Msg ),<br>  Value = udp_recieve(Socket,[]),<br><br>  gen_udp:close(Socket),<br>  Value.<br><span class="hljs-comment">% </span><br><span class="hljs-function"><span class="hljs-title">udp_recieve</span><span class="hljs-params">(Sock,Value)</span>-&gt;</span><br>  <span class="hljs-keyword">receive</span><br>    &#123;udp, Sock, _, _, Bin&#125; -&gt;<br>       <span class="hljs-comment">%io:format("client received:~p~n",[Bin]),</span><br>      udp_recieve(Sock,[Bin]++Value)<br>  <span class="hljs-keyword">after</span> <span class="hljs-number">500</span> -&gt;<br>    Value<br>  <span class="hljs-keyword">end</span>.<br></code></pre></td></tr></table></figure></p><p> ##XML解析<br> 发送完消息后，接收服务端的消息，然后收到新的XML文件。使用erlang 的xmerl_scan 模块进行解析。解析完在编写脚本来获取需要的信息。<br> <figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">%% 从[xmlText] 中提取path 和 value </span><br><span class="hljs-comment">%% Tuple: xmlText ,Res:[]</span><br><span class="hljs-comment">%% get path and value from xmlText</span><br><span class="hljs-function"><span class="hljs-title">get_info</span><span class="hljs-params">([],Res)</span> -&gt;</span><br>  Res;<br><span class="hljs-function"><span class="hljs-title">get_info</span><span class="hljs-params">([Tuple|R],Res)</span>-&gt;</span><br>  <span class="hljs-keyword">case</span> Tuple <span class="hljs-keyword">of</span><br>    #xmlText&#123;parents = Parents,value = Value&#125;<br>    -&gt;  get_info(R,Res++[&#123;Parents,Value&#125;]);<br>    _Else-&gt;<br>      Res<br>  <span class="hljs-keyword">end</span>.<br><span class="hljs-comment">%% 从xmlElement 根据节点名提取  子节点[xmlElement]</span><br><span class="hljs-comment">%%Tuple : xmlElement, Node : String</span><br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">(Tuple,Node)</span> <span class="hljs-title">when</span> <span class="hljs-title">is_tuple</span><span class="hljs-params">(Tuple)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> Tuple <span class="hljs-keyword">of</span><br>    #xmlElement&#123;nsinfo = &#123;_, Node&#125;&#125; -&gt;<br>      #xmlElement&#123;content=Res&#125;=Tuple,<br>      Res;<br>    #xmlElement&#123;content= Children &#125; -&gt;<br>      search(Children,Node,[]);<br>    _Else -&gt;<br>      []<br>  <span class="hljs-keyword">end</span>.<br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">([],_Node,Res)</span>-&gt;</span> Res;<br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">([Tuple|R],Node,Res)</span> -&gt;</span><br>  search(R,Node,Res ++ search(Tuple,Node)).<br></code></pre></td></tr></table></figure></p><h2 id="反馈消息格式"><a href="#反馈消息格式" class="headerlink" title="反馈消息格式"></a>反馈消息格式</h2>  <figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs undefined"> &lt;?xml <span class="hljs-keyword">version</span>=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;<br>&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Envelope</span> xmln<span class="hljs-variable">s:env</span>=<span class="hljs-string">"http://www.w3.org/2003/05/soap-envelope"</span> xmln<span class="hljs-variable">s:soapenc</span>=<span class="hljs-string">"http://www.w3.org/2003/05/soap-encoding"</span> xmln<span class="hljs-variable">s:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmln<span class="hljs-variable">s:xs</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema"</span> xmln<span class="hljs-variable">s:tt</span>=<span class="hljs-string">"http://www.onvif.org/ver10/schema"</span> xmln<span class="hljs-variable">s:tds</span>=<span class="hljs-string">"http://www.onvif.org/ver10/device/wsdl"</span> xmln<span class="hljs-variable">s:trt</span>=<span class="hljs-string">"http://www.onvif.org/ver10/media/wsdl"</span> xmln<span class="hljs-variable">s:timg</span>=<span class="hljs-string">"http://www.onvif.org/ver20/imaging/wsdl"</span> xmln<span class="hljs-variable">s:tev</span>=<span class="hljs-string">"http://www.onvif.org/ver10/events/wsdl"</span> xmln<span class="hljs-variable">s:tptz</span>=<span class="hljs-string">"http://www.onvif.org/ver20/ptz/wsdl"</span> xmln<span class="hljs-variable">s:tan</span>=<span class="hljs-string">"http://www.onvif.org/ver20/analytics/wsdl"</span> xmln<span class="hljs-variable">s:tst</span>=<span class="hljs-string">"http://www.onvif.org/ver10/storage/wsdl"</span> xmln<span class="hljs-variable">s:ter</span>=<span class="hljs-string">"http://www.onvif.org/ver10/error"</span> xmln<span class="hljs-variable">s:dn</span>=<span class="hljs-string">"http://www.onvif.org/ver10/network/wsdl"</span> xmln<span class="hljs-variable">s:tns1</span>=<span class="hljs-string">"http://www.onvif.org/ver10/topics"</span> xmln<span class="hljs-variable">s:tmd</span>=<span class="hljs-string">"http://www.onvif.org/ver10/deviceIO/wsdl"</span> xmln<span class="hljs-variable">s:wsdl</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl"</span> xmln<span class="hljs-variable">s:wsoap12</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl/soap12"</span> xmln<span class="hljs-variable">s:http</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl/http"</span> xmln<span class="hljs-variable">s:d</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2005/04/discovery"</span> xmln<span class="hljs-variable">s:wsadis</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2004/08/addressing"</span> xmln<span class="hljs-variable">s:xop</span>=<span class="hljs-string">"http://www.w3.org/2004/08/xop/include"</span> xmln<span class="hljs-variable">s:wsnt</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/b-2"</span> xmln<span class="hljs-variable">s:wsa</span>=<span class="hljs-string">"http://www.w3.org/2005/08/addressing"</span> xmln<span class="hljs-variable">s:wstop</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/t-1"</span> xmln<span class="hljs-variable">s:wsrf</span>-<span class="hljs-keyword">bf</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/bf-2"</span> xmln<span class="hljs-variable">s:wsntw</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/bw-2"</span> xmln<span class="hljs-variable">s:wsrf</span>-rw=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/rw-2"</span> xmln<span class="hljs-variable">s:wsaw</span>=<span class="hljs-string">"http://www.w3.org/2006/05/addressing/wsdl"</span> xmln<span class="hljs-variable">s:wsrf</span>-r=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/r-2"</span> xmln<span class="hljs-variable">s:tnsn</span>=<span class="hljs-string">"http://www.eventextension.com/2011/event/topics"</span>&gt;&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Header</span>&gt;&lt;wsadi<span class="hljs-variable">s:MessageID</span>&gt;urn:uuid:ef7a28dc-<span class="hljs-number">1</span>dd1-<span class="hljs-number">11</span>b2-<span class="hljs-number">8199</span>-<span class="hljs-number">8</span>ce748e18e8a&lt;/wsadi<span class="hljs-variable">s:MessageID</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:RelatesTo</span>&gt;uuid:<span class="hljs-number">7554</span>cb93-bb81-<span class="hljs-number">4379</span>-<span class="hljs-number">8</span>eb2-c10f4bb259b1&lt;/wsadi<span class="hljs-variable">s:RelatesTo</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:To</span>&gt;http://schemas.xmlsoap.org/<span class="hljs-keyword">ws</span>/<span class="hljs-number">2004</span>/<span class="hljs-number">08</span>/addressing/role/anonymous&lt;/wsadi<span class="hljs-variable">s:To</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:Action</span>&gt;http://schemas.xmlsoap.org/<span class="hljs-keyword">ws</span>/<span class="hljs-number">2005</span>/<span class="hljs-number">04</span>/discovery/ProbeMatches&lt;/wsadi<span class="hljs-variable">s:Action</span>&gt;<br>&lt;d:AppSequence InstanceId=<span class="hljs-string">"1464710418"</span> MessageNumber=<span class="hljs-string">"1402"</span>/&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Header</span>&gt;<br>&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Body</span>&gt;&lt;d:ProbeMatches&gt;&lt;d:ProbeMatch&gt;&lt;wsadi<span class="hljs-variable">s:EndpointReference</span>&gt;&lt;wsadi<span class="hljs-variable">s:Address</span>&gt;urn:uuid:ef7a28dc-<span class="hljs-number">1</span>dd1-<span class="hljs-number">11</span>b2-<span class="hljs-number">8199</span>-<span class="hljs-number">8</span>ce748e18e8a&lt;/wsadi<span class="hljs-variable">s:Address</span>&gt;<br>&lt;/wsadi<span class="hljs-variable">s:EndpointReference</span>&gt;<br>&lt;d:Types&gt;dn:NetworkVideoTransmitter td<span class="hljs-variable">s:Device</span>&lt;/d:Types&gt;<br>&lt;d:Scopes&gt;onvif://www.onvif.org/<span class="hljs-built_in">type</span>/video_encoder onvif://www.onvif.org/<span class="hljs-built_in">type</span>/ptz onvif://www.onvif.org/<span class="hljs-built_in">type</span>/audio_encoder onvif://www.onvif.org/location/ onvif://www.onvif.org/hardware/icamera8001 onvif://www.onvif.org/name/icamera8001 onvif://www.onvif.org/Profile/Streaming&lt;/d:Scopes&gt;<br>&lt;d:XAddrs&gt;http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.18</span>/onvif/device_service&lt;/d:XAddrs&gt;<br>&lt;d:MetadataVersion&gt;<span class="hljs-number">10</span>&lt;/d:MetadataVersion&gt;<br>&lt;/d:ProbeMatch&gt;<br>&lt;/d:ProbeMatches&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Body</span>&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Envelope</span>&gt;<br>&lt;?xml <span class="hljs-keyword">version</span>=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;<br>&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Envelope</span> xmln<span class="hljs-variable">s:env</span>=<span class="hljs-string">"http://www.w3.org/2003/05/soap-envelope"</span> xmln<span class="hljs-variable">s:soapenc</span>=<span class="hljs-string">"http://www.w3.org/2003/05/soap-encoding"</span> xmln<span class="hljs-variable">s:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmln<span class="hljs-variable">s:xs</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema"</span> xmln<span class="hljs-variable">s:tt</span>=<span class="hljs-string">"http://www.onvif.org/ver10/schema"</span> xmln<span class="hljs-variable">s:tds</span>=<span class="hljs-string">"http://www.onvif.org/ver10/device/wsdl"</span> xmln<span class="hljs-variable">s:trt</span>=<span class="hljs-string">"http://www.onvif.org/ver10/media/wsdl"</span> xmln<span class="hljs-variable">s:timg</span>=<span class="hljs-string">"http://www.onvif.org/ver20/imaging/wsdl"</span> xmln<span class="hljs-variable">s:tev</span>=<span class="hljs-string">"http://www.onvif.org/ver10/events/wsdl"</span> xmln<span class="hljs-variable">s:tptz</span>=<span class="hljs-string">"http://www.onvif.org/ver20/ptz/wsdl"</span> xmln<span class="hljs-variable">s:tan</span>=<span class="hljs-string">"http://www.onvif.org/ver20/analytics/wsdl"</span> xmln<span class="hljs-variable">s:tst</span>=<span class="hljs-string">"http://www.onvif.org/ver10/storage/wsdl"</span> xmln<span class="hljs-variable">s:ter</span>=<span class="hljs-string">"http://www.onvif.org/ver10/error"</span> xmln<span class="hljs-variable">s:dn</span>=<span class="hljs-string">"http://www.onvif.org/ver10/network/wsdl"</span> xmln<span class="hljs-variable">s:tns1</span>=<span class="hljs-string">"http://www.onvif.org/ver10/topics"</span> xmln<span class="hljs-variable">s:tmd</span>=<span class="hljs-string">"http://www.onvif.org/ver10/deviceIO/wsdl"</span> xmln<span class="hljs-variable">s:wsdl</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl"</span> xmln<span class="hljs-variable">s:wsoap12</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl/soap12"</span> xmln<span class="hljs-variable">s:http</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/wsdl/http"</span> xmln<span class="hljs-variable">s:d</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2005/04/discovery"</span> xmln<span class="hljs-variable">s:wsadis</span>=<span class="hljs-string">"http://schemas.xmlsoap.org/ws/2004/08/addressing"</span> xmln<span class="hljs-variable">s:xop</span>=<span class="hljs-string">"http://www.w3.org/2004/08/xop/include"</span> xmln<span class="hljs-variable">s:wsnt</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/b-2"</span> xmln<span class="hljs-variable">s:wsa</span>=<span class="hljs-string">"http://www.w3.org/2005/08/addressing"</span> xmln<span class="hljs-variable">s:wstop</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/t-1"</span> xmln<span class="hljs-variable">s:wsrf</span>-<span class="hljs-keyword">bf</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/bf-2"</span> xmln<span class="hljs-variable">s:wsntw</span>=<span class="hljs-string">"http://docs.oasis-open.org/wsn/bw-2"</span> xmln<span class="hljs-variable">s:wsrf</span>-rw=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/rw-2"</span> xmln<span class="hljs-variable">s:wsaw</span>=<span class="hljs-string">"http://www.w3.org/2006/05/addressing/wsdl"</span> xmln<span class="hljs-variable">s:wsrf</span>-r=<span class="hljs-string">"http://docs.oasis-open.org/wsrf/r-2"</span> xmln<span class="hljs-variable">s:tnsn</span>=<span class="hljs-string">"http://www.eventextension.com/2011/event/topics"</span>&gt;&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Header</span>&gt;&lt;wsadi<span class="hljs-variable">s:MessageID</span>&gt;urn:uuid:ef7a28dc-<span class="hljs-number">1</span>dd1-<span class="hljs-number">11</span>b2-<span class="hljs-number">8199</span>-<span class="hljs-number">8</span>ce748e18e8a&lt;/wsadi<span class="hljs-variable">s:MessageID</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:RelatesTo</span>&gt;uuid:<span class="hljs-number">6</span>d09a111-<span class="hljs-number">2662</span>-<span class="hljs-number">49</span>de-ba92-b429b35ec189&lt;/wsadi<span class="hljs-variable">s:RelatesTo</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:To</span>&gt;http://schemas.xmlsoap.org/<span class="hljs-keyword">ws</span>/<span class="hljs-number">2004</span>/<span class="hljs-number">08</span>/addressing/role/anonymous&lt;/wsadi<span class="hljs-variable">s:To</span>&gt;<br>&lt;wsadi<span class="hljs-variable">s:Action</span>&gt;http://schemas.xmlsoap.org/<span class="hljs-keyword">ws</span>/<span class="hljs-number">2005</span>/<span class="hljs-number">04</span>/discovery/ProbeMatches&lt;/wsadi<span class="hljs-variable">s:Action</span>&gt;<br>&lt;d:AppSequence InstanceId=<span class="hljs-string">"1464710418"</span> MessageNumber=<span class="hljs-string">"1403"</span>/&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Header</span>&gt;<br>&lt;<span class="hljs-keyword">en</span><span class="hljs-variable">v:Body</span>&gt;&lt;d:ProbeMatches&gt;&lt;d:ProbeMatch&gt;&lt;wsadi<span class="hljs-variable">s:EndpointReference</span>&gt;&lt;wsadi<span class="hljs-variable">s:Address</span>&gt;urn:uuid:ef7a28dc-<span class="hljs-number">1</span>dd1-<span class="hljs-number">11</span>b2-<span class="hljs-number">8199</span>-<span class="hljs-number">8</span>ce748e18e8a&lt;/wsadi<span class="hljs-variable">s:Address</span>&gt;<br>&lt;/wsadi<span class="hljs-variable">s:EndpointReference</span>&gt;<br>&lt;d:Types&gt;dn:NetworkVideoTransmitter td<span class="hljs-variable">s:Device</span>&lt;/d:Types&gt;<br>&lt;d:Scopes&gt;onvif://www.onvif.org/<span class="hljs-built_in">type</span>/video_encoder onvif://www.onvif.org/<span class="hljs-built_in">type</span>/ptz onvif://www.onvif.org/<span class="hljs-built_in">type</span>/audio_encoder onvif://www.onvif.org/location/ onvif://www.onvif.org/hardware/icamera8001 onvif://www.onvif.org/name/icamera8001 onvif://www.onvif.org/Profile/Streaming&lt;/d:Scopes&gt;<br>&lt;d:XAddrs&gt;http://<span class="hljs-number">192.168</span>.<span class="hljs-number">1.18</span>/onvif/device_service&lt;/d:XAddrs&gt;<br>&lt;d:MetadataVersion&gt;<span class="hljs-number">10</span>&lt;/d:MetadataVersion&gt;<br>&lt;/d:ProbeMatch&gt;<br>&lt;/d:ProbeMatches&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Body</span>&gt;<br>&lt;/<span class="hljs-keyword">en</span><span class="hljs-variable">v:Envelope</span>&gt;<br></code></pre></td></tr></table></figure><p>##完整代码<br><figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author PC</span><br><span class="hljs-comment">%%% @copyright (C) 2016, &lt;COMPANY&gt;</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%%</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 30. 五月 2016 11:23</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(xmlparser)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">"PC"</span>)</span>.<br><span class="hljs-keyword">-include_lib</span><span class="hljs-params">(<span class="hljs-string">"xmerl/include/xmerl.hrl"</span>)</span>.<br><span class="hljs-keyword">-include_lib</span><span class="hljs-params">(<span class="hljs-string">"xmerl/include/xmerl_xpath.hrl"</span>)</span>.<br><span class="hljs-keyword">-include_lib</span><span class="hljs-params">(<span class="hljs-string">"xmerl/include/xmerl_xsd.hrl"</span>)</span>.<br><span class="hljs-keyword">-include_lib</span><span class="hljs-params">(<span class="hljs-string">"eunit/include/eunit.hrl"</span>)</span>.<br><span class="hljs-keyword">-export</span><span class="hljs-params">([main/<span class="hljs-number">1</span>,get_info/<span class="hljs-number">2</span>,search/<span class="hljs-number">2</span>])</span>.<br><br><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(_v)</span> -&gt;</span><br>  &#123;ok, Req &#125; = file:read_file(<span class="hljs-string">"c:/erl/soap-master/uri.xml"</span>),<br>  Recv=client(<span class="hljs-string">"239.255.255.250"</span>,Req),<br>  Fun=<span class="hljs-keyword">fun</span> F([Xml|R])-&gt;<br>    io:format(<span class="hljs-string">"get xml ~n"</span>),<br>    &#123;Doc,_&#125; =  xmerl_scan:string(binary_to_list(Xml)),<br>    get_info(search(Doc,<span class="hljs-string">"XAddrs"</span>),[])++F(R);<br>    F([])-&gt;[] <span class="hljs-keyword">end</span>,<br>    io:format(<span class="hljs-string">"~p~n"</span>,[Fun(Recv)]).<br><br><span class="hljs-comment">% Client code</span><br><span class="hljs-function"><span class="hljs-title">client</span><span class="hljs-params">(Port,Msg)</span> -&gt;</span><br>  &#123;ok, Socket&#125; = gen_udp:open(<span class="hljs-number">0</span>, [binary]),<br>  io:format(<span class="hljs-string">"client opened socket=~p~n"</span>,[Socket]),<br>  ok = gen_udp:send(Socket, Port, <span class="hljs-number">3702</span>, Msg ),<br>  Value = udp_recieve(Socket,[]),<br><br>  gen_udp:close(Socket),<br>  Value.<br><br><span class="hljs-function"><span class="hljs-title">udp_recieve</span><span class="hljs-params">(Sock,Value)</span>-&gt;</span><br>  <span class="hljs-keyword">receive</span><br>    &#123;udp, Sock, _, _, Bin&#125; -&gt;<br>       <span class="hljs-comment">%io:format("client received:~p~n",[Bin]),</span><br>      udp_recieve(Sock,[Bin]++Value)<br>  <span class="hljs-keyword">after</span> <span class="hljs-number">500</span> -&gt;<br>    Value<br>  <span class="hljs-keyword">end</span>.<br><br><span class="hljs-function"><span class="hljs-title">genera_path</span><span class="hljs-params">(Paths,NS)</span>-&gt;</span><span class="hljs-comment">% Paths: list() ,NS : namespace</span><br>  lists:flatmap(<span class="hljs-keyword">fun</span>(Item)-&gt; <span class="hljs-string">"/"</span>++NS++<span class="hljs-string">":"</span>++Item <span class="hljs-keyword">end</span>,Paths).<br><span class="hljs-comment">%%get ns from xmlnode</span><br><span class="hljs-function"><span class="hljs-title">get_env</span><span class="hljs-params">(Xml_ns,Url)</span> -&gt;</span> <span class="hljs-comment">%Xml_ns : xmlElement, Url: atom()</span><br>  List=element(<span class="hljs-number">3</span>,Xml_ns),<br>  lists:filter(<span class="hljs-keyword">fun</span>(Raw) -&gt; <span class="hljs-keyword">case</span> Raw  <span class="hljs-keyword">of</span><br>                             &#123;_,Url &#125; -&gt; <span class="hljs-literal">true</span>;<br>                             _Else-&gt; <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">end</span>, List).<br><span class="hljs-comment">%% Tuple: xmlText ,Res:[]</span><br><span class="hljs-comment">%% get path and value from xmlText</span><br><span class="hljs-function"><span class="hljs-title">get_info</span><span class="hljs-params">([],Res)</span> -&gt;</span><br>  Res;<br><span class="hljs-function"><span class="hljs-title">get_info</span><span class="hljs-params">([Tuple|R],Res)</span>-&gt;</span><br>  <span class="hljs-keyword">case</span> Tuple <span class="hljs-keyword">of</span><br>    #xmlText&#123;parents = Parents,value = Value&#125;<br>    -&gt;  get_info(R,Res++[&#123;Parents,Value&#125;]);<br>    _Else-&gt;<br>      Res<br>  <span class="hljs-keyword">end</span>.<br><span class="hljs-comment">%%Tuple : xmlElement, Node : String</span><br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">(Tuple,Node)</span> <span class="hljs-title">when</span> <span class="hljs-title">is_tuple</span><span class="hljs-params">(Tuple)</span> -&gt;</span><br>  <span class="hljs-keyword">case</span> Tuple <span class="hljs-keyword">of</span><br>    #xmlElement&#123;nsinfo = &#123;_, Node&#125;&#125; -&gt;<br>      #xmlElement&#123;content=Res&#125;=Tuple,<br>      Res;<br>    #xmlElement&#123;content= Children &#125; -&gt;<br>      search(Children,Node,[]);<br>    _Else -&gt;<br>      []<br>  <span class="hljs-keyword">end</span>.<br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">([],_Node,Res)</span>-&gt;</span> Res;<br><span class="hljs-function"><span class="hljs-title">search</span><span class="hljs-params">([Tuple|R],Node,Res)</span> -&gt;</span><br>  search(R,Node,Res ++ search(Tuple,Node)).<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onvif </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找中点</title>
      <link href="/2015/05/02/2016/find_middle_element/"/>
      <url>/2015/05/02/2016/find_middle_element/</url>
      
        <content type="html"><![CDATA[<p>有这么一道面试题:</p><blockquote><p>找出未知单链表中点元素。</p></blockquote><p>市面上有2种方法:</p><ol><li>先遍历算出总长度为length，再遍历length/2个元素。</li><li>使用快慢指针。快指针步长为2，慢指针为1。快指针到达链表末端时，慢指针正好为中点元素。</li></ol><p>然而这2种方法本质上没有差别。</p><p>###废话不说先上结果:</p><blockquote><p>0.00027776 s : find_mid   循环法<br>0.000276798 s : find_mid_1  双指针<br>2.81981 s : find_mid            提高指针取得下一个元素的代价<br>2.81391 s : find_mid_1</p></blockquote><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/timeb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">list</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">list</span> *next = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> m_d;<br><span class="hljs-function"><span class="hljs-built_in">list</span>* <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">list</span>* p)</span> </span>&#123; next = p; <span class="hljs-keyword">return</span> p;  &#125;<br><span class="hljs-function"><span class="hljs-built_in">list</span>* <span class="hljs-title">get_next</span><span class="hljs-params">()</span> </span>&#123; Sleep(delay); <span class="hljs-keyword">return</span> next; &#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> delay;<br>&#125;;<br><span class="hljs-keyword">int</span> <span class="hljs-built_in">list</span>::delay = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-built_in">list</span>* <span class="hljs-title">find_mid</span><span class="hljs-params">(<span class="hljs-built_in">list</span>* ptr)</span><br></span>&#123;<br><span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">list</span> *p_start = ptr;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (!p_start)<br><span class="hljs-keyword">break</span>;<br>len++;<br>p_start = p_start-&gt;get_next();<br>&#125;<br>len /= <span class="hljs-number">2</span>; p_start = ptr;<br><span class="hljs-keyword">while</span> (len--)<br>&#123;<br>p_start = p_start-&gt;get_next();<br>&#125;<br><span class="hljs-keyword">return</span> p_start;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">list</span>* <span class="hljs-title">find_mid_1</span><span class="hljs-params">(<span class="hljs-built_in">list</span>* ptr)</span><br></span>&#123;<br><span class="hljs-built_in">list</span> *p_s1 = ptr, *p_s2 = ptr;<br><span class="hljs-keyword">while</span> (p_s2=p_s2-&gt;get_next())<br>&#123;<br>p_s2 = p_s2-&gt;get_next();<br><span class="hljs-keyword">if</span> (!p_s2)<br><span class="hljs-keyword">break</span>;<br>p_s1 = p_s1-&gt;get_next(); <br>&#125;<br><span class="hljs-keyword">return</span> p_s1;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> cal_time(fun,ptr)&#123;\<br>QueryPerformanceCounter(&amp;startCount);\<br>fun(ptr);\<br>QueryPerformanceCounter(&amp;endCount);\<br>double elapsed = (double)(endCount.QuadPart - startCount.QuadPart) / freq.QuadPart;\<br>cout &lt;&lt; elapsed&lt;&lt;<span class="hljs-meta-string">" s : "</span>&lt;&lt; #fun   &lt;&lt; endl;&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> c = <span class="hljs-number">1</span>*<span class="hljs-number">1000</span>;<br><span class="hljs-built_in">list</span> * start = <span class="hljs-keyword">new</span> <span class="hljs-built_in">list</span>,*p;<br>p = start;<br><span class="hljs-keyword">while</span> (c--)<br>&#123;<br>p = p-&gt;add(<span class="hljs-keyword">new</span> <span class="hljs-built_in">list</span>);<br>p-&gt;m_d = c;<br>&#125;<br>LARGE_INTEGER startCount;<br>LARGE_INTEGER endCount;<br>LARGE_INTEGER freq;<br>QueryPerformanceFrequency(&amp;freq);<br>_ASSERT(find_mid_1(start) == find_mid(start));<br>cal_time(find_mid, start);<br>cal_time(find_mid_1, start);<br><span class="hljs-built_in">list</span>::delay = <span class="hljs-number">1</span>;<br><br>cal_time(find_mid, start);<br>cal_time(find_mid_1, start);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>#分析<br>其实这2种方法都是O(n),使用大O表示法不够精确，这种简单的算法直接数一下next的调用次数就可以知道都是1.5*len个get_next().find_mid_1 唯一的优势就是少用了一个 int len。所以性能提升实在少的可怜。</p><p>#下面给出正确的方案<br>思路:其实也是用到了2个指针，其中一个走过的路程是另一个的1/2。但千万不要使用一个+1另一个+2。而是在前一个指针遍历的时候保存下来给另一个指针。</p><p>##原理:<br>虽然我们不能预知链表的长度，但是我们可以<strong>预期</strong>。</p><p>当<strong>前一个指针</strong>移动了n步时，将这个值赋值给<strong>后一个指针</strong>，然后<strong>预期</strong>前一个指针能访问到2n,如果<strong>预期达成</strong>，那么<strong>继续开展预期</strong>。如果<strong>预期失败</strong>，那么中点为上一次预期成功的点再移动 c/2步。</p><p>##分析:<br><strong>上一次预期成功的点</strong>就是节约计算的关键。</p><p>最好情况为:预期成功了，然后链表也到底了。</p><p>最差情况为:链表长度为2^n-1。<strong>上一次预期成功的点</strong>为(2^(n-2))然后还要再走(2^(n-2))步。</p><p>当然如果增加期望点，性能还有望提升。<br><figure class="hljs highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">list</span>* find_mid_2(<span class="hljs-keyword">list</span>* ptr)<br>&#123;<br><span class="hljs-keyword">list</span> *p_s1 = ptr, *p_s2 = ptr, *tmp= ptr;<br><span class="hljs-keyword">int</span> d = <span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)<br>&#123;<br><br>tmp = p_s2;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>; i &lt; d; i++,c++)<br>&#123;<br>p_s2 = p_s2-&gt;get_next();<br><span class="hljs-keyword">if</span> (!p_s2)<br>&#123;<br><span class="hljs-keyword">int</span> len = c / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (len--)<br>&#123;<br>p_s1 = p_s1-&gt;get_next();<br>&#125;<br><span class="hljs-keyword">return</span> p_s1;<br>&#125;<br>&#125;<br>d *= <span class="hljs-number">2</span>;<br>p_s1 = tmp;<br>&#125;<br><span class="hljs-keyword">return</span> p_s1;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>来看效果吧</p><blockquote><p>最好情况<br>0.608294 s : find_mid<br>0.612391 s : find_mid_1<br>0.404288 s : find_mid_2</p><p>最差情况<br>0.604105 s : find_mid<br>0.600299 s : find_mid_1<br>0.502341 s : find_mid_2</p></blockquote><p>我估算需要(1,1.25)n个get_next()操作。</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/timeb.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; mlist;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> cal_time(fun,ptr)&#123;\<br>QueryPerformanceCounter(&amp;startCount);\<br>fun(ptr);\<br>QueryPerformanceCounter(&amp;endCount);\<br>double elapsed = (double)(endCount.QuadPart - startCount.QuadPart) / freq.QuadPart;\<br>cout &lt;&lt; elapsed&lt;&lt;<span class="hljs-meta-string">" s : "</span>&lt;&lt; #fun   &lt;&lt; endl;&#125;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stage</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>mlist* msrc;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, mlist::iterator, <span class="hljs-built_in">std</span>::greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; m_map;<br>stage(mlist&amp; m)<br>&#123;<br>msrc = &amp;m;<br>&#125;<br>mlist::iterator <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> n)<br>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> mlist::iterator();<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, mlist::iterator, <span class="hljs-built_in">std</span>::greater&lt;<span class="hljs-keyword">int</span>&gt; &gt;::iterator itr = m_map.find(n);<br><br><span class="hljs-keyword">if</span> (itr != m_map.end())<br>&#123;<br><span class="hljs-keyword">return</span> itr-&gt;second;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">operator</span>[](n/<span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br><br>mlist::<span class="hljs-function">iterator <span class="hljs-title">find_mid_2</span><span class="hljs-params">(mlist ptr)</span> </span>&#123;<br><span class="hljs-function">stage <span class="hljs-title">probe_ptr</span><span class="hljs-params">(ptr)</span></span>;<br><span class="hljs-keyword">auto</span>&amp; m_map = probe_ptr.m_map;<br><span class="hljs-keyword">auto</span> itr = ptr.begin();<br>m_map[<span class="hljs-number">1</span>] = itr;<br><span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (itr!=ptr.end())<br>&#123;<br><span class="hljs-keyword">auto</span> m_itr = m_map.begin();<br><span class="hljs-keyword">int</span> top_key=m_itr-&gt;first;<br><span class="hljs-keyword">while</span> (m_itr!=m_map.end())<br>&#123;<br><span class="hljs-keyword">if</span>(m_itr-&gt;first&lt;top_key/<span class="hljs-number">2</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(len==<span class="hljs-number">2</span>*top_key)<br>m_map[len]=itr;<br>m_itr++;<br>&#125;<br><br>itr++; len++;<br>&#125; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> effect:m_map)<br>&#123;<br><span class="hljs-keyword">int</span> k = effect.first;<br><span class="hljs-keyword">if</span> (m_map.find(k) != m_map.end())<br>&#123;<br>k = k / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">auto</span> mid = m_map[k]; <br><span class="hljs-keyword">while</span> (k++&lt;len/<span class="hljs-number">2</span>)<br>&#123;<br>mid++;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"res:"</span> &lt;&lt; *mid &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> c = <span class="hljs-number">1</span> * <span class="hljs-number">10</span>;<br>mlist  start;<br><span class="hljs-keyword">while</span> (c--)<br>&#123;<br>start.push_back(c);<br>&#125;<br>LARGE_INTEGER startCount;<br>LARGE_INTEGER endCount;<br>LARGE_INTEGER freq;<br>QueryPerformanceFrequency(&amp;freq);<br><br>cal_time(find_mid_2, start);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>几种不同的过程</title>
      <link href="/2015/05/02/2016/process/"/>
      <url>/2015/05/02/2016/process/</url>
      
        <content type="html"><![CDATA[<p># </p><p>  在我所知道的语言中，都提供了函数，但在不同语言中函数的含义也有所区别。并且一般都只提供一种含义。在erlang中函数是确定的，一旦输入确定了其对应的输出也是唯一确定的。而在C等过程式、面向对象的编程语言中，函数是代表一个过程，是若干语句的集合。那么为何不干脆把他们分开，分别实现呢？</p><ol><li>函数(function)<br>函数的输入值一旦确定了，其输出值也就确定了，不在乎过程，只关心<strong>输入与输出</strong>。因此函数具有不可变性。得益于不可变性，函数可以利用缓存技术加快处理速度。一个函数的作用域应当只存在于函数内部，函数不可对函数的外部发生修改(不能调用任务或是方法，也不能使用可变的外部变量)。因此函数的优势在于用于<strong>产生数据</strong>。</li></ol><blockquote><p>不可变</p><p>缓存</p><p>无副作用</p></blockquote><ol start="2"><li>任务(task)<br>任务定义了一系列语句的调用顺序。任务包含<strong>条件</strong>、<strong>执行体</strong>。条件就是完成任务所需的一个或多个输入数据。执行体就是任务的功能实现。任务是<strong>异步</strong>的，只关心任务的输入，而不在乎什么时候执行。任务之间是<strong>顺序无关</strong>，只要任务的条件满足，任务就会执行。在多线程编程中应该会有大作用。</li><li>方法(method)<br>这个比较传统了。方法不在乎输入或者输出，方法关心的是语句执行的过程。方法确保每条语句的正确执行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>erl 命令</title>
      <link href="/2015/05/02/2016/erl-%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/"/>
      <url>/2015/05/02/2016/erl-%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>完整文档在下面，我就挑几个常用的来讲。</p><p>erl 的参数分为3类</p><blockquote><ol><li>环境参数（就是告诉erlang VM的）以 <em>+</em>打头</li><li>运行参数（指明以何种方式启动）  以 <em>-</em>打头</li><li>普通参数 跟在<em>-extra 或 – </em>之后的都是</li></ol></blockquote><p>##环境参数</p><p>##运行参数</p><ul><li>启动函数:<code>-s</code>,<code>-run</code> + <code>Mod [Func [Arg1, Arg2, ...]](init flag)</code>，区别是<code>-s</code>传参的类型是atom，尔<code>-run</code>传递string。</li><li>分布式节点:设置节点名称 <code>-name</code>,<code>-sname</code>，节点之间通过名称来互联。<code>-sname</code>适合本机。 <code>-setcookie</code> 互联的节点必须有相同的cookie。</li><li>执行脚本:<code>-eval</code>，后面跟上erlang代码</li><li>其他:<code>-noshell</code>,<code>-detached</code>:后台执行,<code>-pa</code> <code>-pz</code>:添加代码路径</li></ul><p>##普通参数<br><code>init:get_plain_arguments/0</code>取得普通参数列表。</p><p>#完整文档<br><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br></pre></td><td class="code"><pre><code class="hljs undefined">erl(1) User Commands erl(1)<br>NAME<br> erl - The Erlang Emulator<br>DESCRIPTION<br> The erl program starts an Erlang runtime system. The exact details (for example, whether erl is a script or a program and which other programs it calls) are system-dependent.<br> Windows users probably wants to <span class="hljs-keyword">use</span> the werl program instead, which runs <span class="hljs-keyword">in</span> its own window <span class="hljs-keyword">with</span> scrollbars <span class="hljs-keyword">and</span> supports command-line editing. The erl program <span class="hljs-keyword">on</span> Windows provides <span class="hljs-keyword">no</span> line editing <span class="hljs-keyword">in</span> its shell, <span class="hljs-keyword">and</span> <span class="hljs-keyword">on</span> Windows <span class="hljs-number">95</span> there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> way <span class="hljs-keyword">to</span> <span class="hljs-keyword">scroll</span> back<br> <span class="hljs-keyword">to</span> <span class="hljs-built_in">text</span> which has scrolled <span class="hljs-keyword">off</span> the screen. The erl program must be used, however, <span class="hljs-keyword">in</span> pipelines <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span> you want <span class="hljs-keyword">to</span> redirect standard <span class="hljs-keyword">input</span> <span class="hljs-keyword">or</span> output.<br> Note:<br> <span class="hljs-keyword">As</span> <span class="hljs-keyword">of</span> ERTS <span class="hljs-keyword">version</span> <span class="hljs-number">5.9</span> (OTP-R15B) the runtime <span class="hljs-keyword">system</span> will <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">not</span> bind schedulers <span class="hljs-keyword">to</span> <span class="hljs-keyword">logical</span> processors. <span class="hljs-keyword">For</span> more information see documentation <span class="hljs-keyword">of</span> the +sbt <span class="hljs-keyword">system</span> flag.<br>EXPORTS<br> erl &lt;arguments&gt;<br> Starts an Erlang runtime system.<br> The arguments can be divided <span class="hljs-keyword">into</span> emulator flags, flags <span class="hljs-keyword">and</span> plain arguments:<br> * <span class="hljs-keyword">Any</span> argument <span class="hljs-keyword">starting</span> <span class="hljs-keyword">with</span> the <span class="hljs-built_in">character</span> + <span class="hljs-keyword">is</span> interpreted <span class="hljs-keyword">as</span> an emulator flag.<br> <span class="hljs-keyword">As</span> indicated <span class="hljs-keyword">by</span> the <span class="hljs-keyword">name</span>, emulator flags controls the behavior <span class="hljs-keyword">of</span> the emulator.<br> * <span class="hljs-keyword">Any</span> argument <span class="hljs-keyword">starting</span> <span class="hljs-keyword">with</span> the <span class="hljs-built_in">character</span> - (hyphen) <span class="hljs-keyword">is</span> interpreted <span class="hljs-keyword">as</span> a flag which should be passed <span class="hljs-keyword">to</span> the Erlang part <span class="hljs-keyword">of</span> the runtime <span class="hljs-keyword">system</span>, more specifically <span class="hljs-keyword">to</span> the init <span class="hljs-keyword">system</span> process, see init(<span class="hljs-number">3</span>erl).<br> The init process itself interprets <span class="hljs-keyword">some</span> <span class="hljs-keyword">of</span> these flags, the init flags. It also stores <span class="hljs-keyword">any</span> remaining flags, the <span class="hljs-keyword">user</span> flags. The latter can be retrieved <span class="hljs-keyword">by</span> <span class="hljs-keyword">calling</span> init:get_argument/<span class="hljs-number">1.</span><br> It can be noted that there <span class="hljs-keyword">are</span> a small <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-string">"-"</span> flags which <span class="hljs-keyword">now</span> actually <span class="hljs-keyword">are</span> emulator flags, see the description below.<br> * Plain arguments <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> interpreted <span class="hljs-keyword">in</span> <span class="hljs-keyword">any</span> way. They <span class="hljs-keyword">are</span> also <span class="hljs-keyword">stored</span> <span class="hljs-keyword">by</span> the init process <span class="hljs-keyword">and</span> can be retrieved <span class="hljs-keyword">by</span> <span class="hljs-keyword">calling</span> init:get_plain_arguments/<span class="hljs-number">0.</span> Plain arguments can occur <span class="hljs-keyword">before</span> the <span class="hljs-keyword">first</span> flag, <span class="hljs-keyword">or</span> <span class="hljs-keyword">after</span> a <span class="hljs-comment">-- flag. Additionally, the flag</span><br> -extra causes everything that <span class="hljs-keyword">follows</span> <span class="hljs-keyword">to</span> become plain arguments.<br> Example:<br> % erl +W w -sname arnie +R <span class="hljs-number">9</span> -s my_init -extra +bertie<br> (arnie@host)<span class="hljs-number">1</span>&gt; init:get_argument(sname).<br> &#123;ok,[[<span class="hljs-string">"arnie"</span>]]&#125;<br> (arnie@host)<span class="hljs-number">2</span>&gt; init:get_plain_arguments().<br> [<span class="hljs-string">"+bertie"</span>]<br> Here +W w <span class="hljs-keyword">and</span> +R <span class="hljs-number">9</span> <span class="hljs-keyword">are</span> emulator flags. -s my_init <span class="hljs-keyword">is</span> an init flag, interpreted <span class="hljs-keyword">by</span> init. -sname arnie <span class="hljs-keyword">is</span> a <span class="hljs-keyword">user</span> flag, <span class="hljs-keyword">stored</span> <span class="hljs-keyword">by</span> init. It <span class="hljs-keyword">is</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">by</span> Kernel <span class="hljs-keyword">and</span> will cause the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">to</span> become distributed. Finally, everything <span class="hljs-keyword">after</span><br> -extra (that <span class="hljs-keyword">is</span>, +bertie) <span class="hljs-keyword">is</span> considered <span class="hljs-keyword">as</span> plain arguments.<br> % erl -myflag <span class="hljs-number">1</span><br> <span class="hljs-number">1</span>&gt; init:get_argument(myflag).<br> &#123;ok,[[<span class="hljs-string">"1"</span>]]&#125;<br> <span class="hljs-number">2</span>&gt; init:get_plain_arguments().<br> []<br> Here the <span class="hljs-keyword">user</span> flag -myflag <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> passed <span class="hljs-keyword">to</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">stored</span> <span class="hljs-keyword">by</span> the init process. It <span class="hljs-keyword">is</span> a <span class="hljs-keyword">user</span> defined flag, presumably used <span class="hljs-keyword">by</span> <span class="hljs-keyword">some</span> <span class="hljs-keyword">user</span> defined application.<br>FLAGS<br> <span class="hljs-keyword">In</span> the <span class="hljs-keyword">following</span> <span class="hljs-keyword">list</span>, init flags <span class="hljs-keyword">are</span> marked (init flag). Unless otherwise specified, all other flags <span class="hljs-keyword">are</span> <span class="hljs-keyword">user</span> flags, <span class="hljs-keyword">for</span> which the <span class="hljs-keyword">values</span> can be retrieved <span class="hljs-keyword">by</span> <span class="hljs-keyword">calling</span> init:get_argument/<span class="hljs-number">1.</span> Note that the <span class="hljs-keyword">list</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">user</span> flags <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> exhaustive, there may be<br> additional, application specific flags which instead <span class="hljs-keyword">are</span> documented <span class="hljs-keyword">in</span> the <span class="hljs-keyword">corresponding</span> application documentation.<br> <span class="hljs-comment">--(init flag):</span><br> Everything <span class="hljs-keyword">following</span> <span class="hljs-comment">-- up to the next flag (-flag or +flag) is considered plain arguments and can be retrieved using init:get_plain_arguments/0.</span><br> -Application Par Val:<br> <span class="hljs-keyword">Sets</span> the application configuration parameter Par <span class="hljs-keyword">to</span> the <span class="hljs-keyword">value</span> Val <span class="hljs-keyword">for</span> the application Application, see app(<span class="hljs-number">5</span>) <span class="hljs-keyword">and</span> application(<span class="hljs-number">3</span>erl).<br> -args_file FileName:<br> Command line arguments <span class="hljs-keyword">are</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> the <span class="hljs-keyword">file</span> FileName. The arguments <span class="hljs-keyword">read</span> <span class="hljs-keyword">from</span> the <span class="hljs-keyword">file</span> <span class="hljs-keyword">replace</span> the <span class="hljs-string">'-args_file FileName'</span> flag <span class="hljs-keyword">on</span> the resulting command line.<br> The <span class="hljs-keyword">file</span> FileName should be a plain <span class="hljs-built_in">text</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">and</span> may contain comments <span class="hljs-keyword">and</span> command line arguments. A <span class="hljs-keyword">comment</span> begins <span class="hljs-keyword">with</span> a <span class="hljs-comment"># character and continues until next end of line character. Backslash (\\) is used as quoting character. All command line argu鈥? ments accepted by erl are allowed, also the -args_file FileName flag. Be careful not to cause circular dependencies between files containing the -args_file flag, though.</span><br> The -extra flag <span class="hljs-keyword">is</span> treated specially. Its <span class="hljs-keyword">scope</span> ends <span class="hljs-keyword">at</span> the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the file. Arguments <span class="hljs-keyword">following</span> an -extra flag <span class="hljs-keyword">are</span> moved <span class="hljs-keyword">on</span> the command line <span class="hljs-keyword">into</span> the -extra <span class="hljs-keyword">section</span>, i.e. the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the command line <span class="hljs-keyword">following</span> <span class="hljs-keyword">after</span> an -extra flag.<br> -async_shell_start:<br> The <span class="hljs-keyword">initial</span> Erlang shell does <span class="hljs-keyword">not</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">until</span> the <span class="hljs-keyword">system</span> boot <span class="hljs-keyword">procedure</span> has been completed (Erlang <span class="hljs-number">5.4</span> <span class="hljs-keyword">and</span> later). This flag disables the <span class="hljs-keyword">start</span> synchronization feature <span class="hljs-keyword">and</span> lets the shell <span class="hljs-keyword">start</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">parallel</span> <span class="hljs-keyword">with</span> the rest <span class="hljs-keyword">of</span> the system.<br> -boot <span class="hljs-keyword">File</span>:<br> Specifies the <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> the boot <span class="hljs-keyword">file</span>, File.boot, which <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">start</span> the system. See init(<span class="hljs-number">3</span>erl). Unless <span class="hljs-keyword">File</span> contains an <span class="hljs-keyword">absolute</span> <span class="hljs-keyword">path</span>, the <span class="hljs-keyword">system</span> searches <span class="hljs-keyword">for</span> File.boot <span class="hljs-keyword">in</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">and</span> $ROOT/<span class="hljs-keyword">bin</span> directories.<br> <span class="hljs-keyword">Defaults</span> <span class="hljs-keyword">to</span> $ROOT/<span class="hljs-keyword">bin</span>/start.boot.<br> -boot_var <span class="hljs-keyword">Var</span> Dir:<br> <span class="hljs-keyword">If</span> the boot script contains a <span class="hljs-keyword">path</span> <span class="hljs-keyword">variable</span> <span class="hljs-keyword">Var</span> other <span class="hljs-keyword">than</span> $ROOT, this <span class="hljs-keyword">variable</span> <span class="hljs-keyword">is</span> expanded <span class="hljs-keyword">to</span> Dir. Used <span class="hljs-keyword">when</span> applications <span class="hljs-keyword">are</span> installed <span class="hljs-keyword">in</span> another <span class="hljs-keyword">directory</span> <span class="hljs-keyword">than</span> $ROOT/lib, see systools:make_script/<span class="hljs-number">1</span>,<span class="hljs-number">2.</span><br> -code_path_cache:<br> Enables the code <span class="hljs-keyword">path</span> <span class="hljs-keyword">cache</span> <span class="hljs-keyword">of</span> the code <span class="hljs-keyword">server</span>, see code(<span class="hljs-number">3</span>erl).<br> -compile Mod1 Mod2 ...:<br> Compiles the specified modules <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> terminates (<span class="hljs-keyword">with</span> non-zero <span class="hljs-keyword">exit</span> code <span class="hljs-keyword">if</span> the compilation <span class="hljs-keyword">of</span> <span class="hljs-keyword">some</span> <span class="hljs-keyword">file</span> did <span class="hljs-keyword">not</span> succeed). Implies -noinput. <span class="hljs-keyword">Not</span> recommended - <span class="hljs-keyword">use</span> erlc instead.<br> -config Config:<br> Specifies the <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> a configuration <span class="hljs-keyword">file</span>, Config.config, which <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> configure applications. See app(<span class="hljs-number">5</span>) <span class="hljs-keyword">and</span> application(<span class="hljs-number">3</span>erl).<br> -connect_all <span class="hljs-literal">false</span>:<br> <span class="hljs-keyword">If</span> this flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">present</span>, <span class="hljs-keyword">global</span> will <span class="hljs-keyword">not</span> maintain a fully connected network <span class="hljs-keyword">of</span> <span class="hljs-keyword">distributed</span> Erlang nodes, <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">global</span> <span class="hljs-keyword">name</span> registration cannot be used. See <span class="hljs-keyword">global</span>(<span class="hljs-number">3</span>erl).<br> -cookie Cookie:<br> Obsolete flag <span class="hljs-keyword">without</span> <span class="hljs-keyword">any</span> effect <span class="hljs-keyword">and</span> common misspelling <span class="hljs-keyword">for</span> -setcookie. <span class="hljs-keyword">Use</span> -setcookie instead.<br> -detached:<br> Starts the Erlang runtime <span class="hljs-keyword">system</span> detached <span class="hljs-keyword">from</span> the <span class="hljs-keyword">system</span> console. Useful <span class="hljs-keyword">for</span> running daemons <span class="hljs-keyword">and</span> backgrounds processes. Implies -noinput.<br> -emu_args:<br> Useful <span class="hljs-keyword">for</span> debugging. Prints <span class="hljs-keyword">out</span> the actual arguments sent <span class="hljs-keyword">to</span> the emulator.<br> -env <span class="hljs-keyword">Variable</span> <span class="hljs-keyword">Value</span>:<br> <span class="hljs-keyword">Sets</span> the host OS environment <span class="hljs-keyword">variable</span> <span class="hljs-keyword">Variable</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">value</span> <span class="hljs-keyword">Value</span> <span class="hljs-keyword">for</span> the Erlang runtime system. Example:<br> % erl -env DISPLAY gin:<span class="hljs-number">0</span><br> <span class="hljs-keyword">In</span> this example, an Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">is</span> started <span class="hljs-keyword">with</span> the DISPLAY environment <span class="hljs-keyword">variable</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> gin:<span class="hljs-number">0.</span><br> -eval Expr(init flag):<br> Makes init <span class="hljs-keyword">evaluate</span> the expression Expr, see init(<span class="hljs-number">3</span>erl).<br> -extra(init flag):<br> Everything <span class="hljs-keyword">following</span> -extra <span class="hljs-keyword">is</span> considered plain arguments <span class="hljs-keyword">and</span> can be retrieved <span class="hljs-keyword">using</span> init:get_plain_arguments/<span class="hljs-number">0.</span><br> -heart:<br> Starts heart beat <span class="hljs-keyword">monitoring</span> <span class="hljs-keyword">of</span> the Erlang runtime system. See heart(<span class="hljs-number">3</span>erl).<br> -hidden:<br> Starts the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">as</span> a hidden node, <span class="hljs-keyword">if</span> it <span class="hljs-keyword">is</span> run <span class="hljs-keyword">as</span> a <span class="hljs-keyword">distributed</span> node. Hidden nodes <span class="hljs-keyword">always</span> establish hidden connections <span class="hljs-keyword">to</span> all other nodes <span class="hljs-keyword">except</span> <span class="hljs-keyword">for</span> nodes <span class="hljs-keyword">in</span> the same <span class="hljs-keyword">global</span> group. Hidden connections <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> published <span class="hljs-keyword">on</span> either <span class="hljs-keyword">of</span> the<br> connected nodes, i.e. neither <span class="hljs-keyword">of</span> the connected nodes <span class="hljs-keyword">are</span> part <span class="hljs-keyword">of</span> the <span class="hljs-keyword">result</span> <span class="hljs-keyword">from</span> nodes/<span class="hljs-number">0</span> <span class="hljs-keyword">on</span> the other node. See also hidden <span class="hljs-keyword">global</span> <span class="hljs-keyword">groups</span>, global_group(<span class="hljs-number">3</span>erl).<br> -<span class="hljs-keyword">hosts</span> <span class="hljs-keyword">Hosts</span>:<br> Specifies the IP addresses <span class="hljs-keyword">for</span> the <span class="hljs-keyword">hosts</span> <span class="hljs-keyword">on</span> which Erlang boot servers <span class="hljs-keyword">are</span> running, see erl_boot_server(<span class="hljs-number">3</span>erl). This flag <span class="hljs-keyword">is</span> mandatory <span class="hljs-keyword">if</span> the -loader inet flag <span class="hljs-keyword">is</span> present.<br> The IP addresses must be given <span class="hljs-keyword">in</span> the standard <span class="hljs-keyword">form</span> (four <span class="hljs-built_in">decimal</span> numbers separated <span class="hljs-keyword">by</span> periods, <span class="hljs-keyword">for</span> example <span class="hljs-string">"150.236.20.74"</span>. <span class="hljs-keyword">Hosts</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> acceptable, but a broadcast address (preferably limited <span class="hljs-keyword">to</span> the <span class="hljs-keyword">local</span> network) is.<br> -<span class="hljs-keyword">id</span> <span class="hljs-keyword">Id</span>:<br> Specifies the <span class="hljs-keyword">identity</span> <span class="hljs-keyword">of</span> the Erlang runtime system. <span class="hljs-keyword">If</span> it <span class="hljs-keyword">is</span> run <span class="hljs-keyword">as</span> a <span class="hljs-keyword">distributed</span> node, <span class="hljs-keyword">Id</span> must be identical <span class="hljs-keyword">to</span> the <span class="hljs-keyword">name</span> supplied together <span class="hljs-keyword">with</span> the -sname <span class="hljs-keyword">or</span> -<span class="hljs-keyword">name</span> flag.<br> -init_debug:<br> Makes init write <span class="hljs-keyword">some</span> debug information <span class="hljs-keyword">while</span> interpreting the boot script.<br> -<span class="hljs-keyword">instr</span>(emulator flag):<br> Selects an instrumented Erlang runtime <span class="hljs-keyword">system</span> (<span class="hljs-keyword">virtual</span> machine) <span class="hljs-keyword">to</span> run, instead <span class="hljs-keyword">of</span> the ordinary one. <span class="hljs-keyword">When</span> running an instrumented runtime <span class="hljs-keyword">system</span>, <span class="hljs-keyword">some</span> <span class="hljs-keyword">resource</span> <span class="hljs-keyword">usage</span> <span class="hljs-keyword">data</span> can be obtained <span class="hljs-keyword">and</span> analysed <span class="hljs-keyword">using</span> the <span class="hljs-keyword">module</span> instrument. Functionally, it<br> behaves exactly <span class="hljs-keyword">like</span> an ordinary Erlang runtime system.<br> -loader Loader:<br> Specifies the method used <span class="hljs-keyword">by</span> erl_prim_loader <span class="hljs-keyword">to</span> <span class="hljs-keyword">load</span> Erlang modules <span class="hljs-keyword">into</span> the system. See erl_prim_loader(<span class="hljs-number">3</span>erl). Two Loader methods <span class="hljs-keyword">are</span> supported, efile <span class="hljs-keyword">and</span> inet. efile means <span class="hljs-keyword">use</span> the <span class="hljs-keyword">local</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">system</span>, this <span class="hljs-keyword">is</span> the default. inet means <span class="hljs-keyword">use</span> a boot <span class="hljs-keyword">server</span><br> <span class="hljs-keyword">on</span> another machine, <span class="hljs-keyword">and</span> the -<span class="hljs-keyword">id</span>, -<span class="hljs-keyword">hosts</span> <span class="hljs-keyword">and</span> -setcookie flags must be specified <span class="hljs-keyword">as</span> well. <span class="hljs-keyword">If</span> Loader <span class="hljs-keyword">is</span> something <span class="hljs-keyword">else</span>, the <span class="hljs-keyword">user</span> supplied Loader port program <span class="hljs-keyword">is</span> started.<br> -make:<br> Makes the Erlang runtime <span class="hljs-keyword">system</span> invoke make:all() <span class="hljs-keyword">in</span> the <span class="hljs-keyword">current</span> working <span class="hljs-keyword">directory</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> terminate. See make(<span class="hljs-number">3</span>erl). Implies -noinput.<br> -man <span class="hljs-keyword">Module</span>:<br> Displays the <span class="hljs-keyword">manual</span> page <span class="hljs-keyword">for</span> the Erlang <span class="hljs-keyword">module</span> Module. <span class="hljs-keyword">Only</span> supported <span class="hljs-keyword">on</span> Unix.<br> -<span class="hljs-keyword">mode</span> interactive | embedded:<br> Indicates <span class="hljs-keyword">if</span> the <span class="hljs-keyword">system</span> should <span class="hljs-keyword">load</span> code dynamically (interactive), <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span> all code should be loaded during <span class="hljs-keyword">system</span> initialization (embedded), see code(<span class="hljs-number">3</span>erl). <span class="hljs-keyword">Defaults</span> <span class="hljs-keyword">to</span> interactive.<br> -<span class="hljs-keyword">name</span> <span class="hljs-keyword">Name</span>:<br> Makes the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">distributed</span> node. This flag invokes all network servers necessary <span class="hljs-keyword">for</span> a node <span class="hljs-keyword">to</span> become distributed. See net_kernel(<span class="hljs-number">3</span>erl). It <span class="hljs-keyword">is</span> also ensured that epmd runs <span class="hljs-keyword">on</span> the <span class="hljs-keyword">current</span> host <span class="hljs-keyword">before</span> Erlang <span class="hljs-keyword">is</span> started. See<br> epmd(<span class="hljs-number">1</span>).<br> The <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> the node will be <span class="hljs-keyword">Name</span>@Host, <span class="hljs-keyword">where</span> Host <span class="hljs-keyword">is</span> the fully qualified host <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">current</span> host. <span class="hljs-keyword">For</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">names</span>, <span class="hljs-keyword">use</span> the -sname flag instead.<br> -noinput:<br> Ensures that the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">never</span> tries <span class="hljs-keyword">to</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">any</span> input. Implies -noshell.<br> -noshell:<br> Starts an Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">no</span> shell. This flag makes it possible <span class="hljs-keyword">to</span> have the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">as</span> a component <span class="hljs-keyword">in</span> a series <span class="hljs-keyword">of</span> UNIX pipes.<br> -nostick:<br> Disables the sticky <span class="hljs-keyword">directory</span> facility <span class="hljs-keyword">of</span> the Erlang code <span class="hljs-keyword">server</span>, see code(<span class="hljs-number">3</span>erl).<br> -oldshell:<br> Invokes the <span class="hljs-keyword">old</span> Erlang shell <span class="hljs-keyword">from</span> Erlang <span class="hljs-number">3.3</span>. The <span class="hljs-keyword">old</span> shell can still be used.<br> -pa Dir1 Dir2 ...:<br> Adds the specified directories <span class="hljs-keyword">to</span> the <span class="hljs-keyword">beginning</span> <span class="hljs-keyword">of</span> the code <span class="hljs-keyword">path</span>, similar <span class="hljs-keyword">to</span> code:add_pathsa/<span class="hljs-number">1.</span> See code(<span class="hljs-number">3</span>erl). <span class="hljs-keyword">As</span> an alternative <span class="hljs-keyword">to</span> -pa, <span class="hljs-keyword">if</span> several directories <span class="hljs-keyword">are</span> <span class="hljs-keyword">to</span> be prepended <span class="hljs-keyword">to</span> the code <span class="hljs-keyword">path</span> <span class="hljs-keyword">and</span> the directories have a common <span class="hljs-keyword">parent</span> <span class="hljs-keyword">directory</span>,<br> that <span class="hljs-keyword">parent</span> <span class="hljs-keyword">directory</span> could be specified <span class="hljs-keyword">in</span> the ERL_LIBS environment variable. See code(<span class="hljs-number">3</span>erl).<br> -pz Dir1 Dir2 ...:<br> Adds the specified directories <span class="hljs-keyword">to</span> the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the code <span class="hljs-keyword">path</span>, similar <span class="hljs-keyword">to</span> code:add_pathsz/<span class="hljs-number">1.</span> See code(<span class="hljs-number">3</span>erl).<br> -<span class="hljs-keyword">path</span> Dir1 Dir2 ...:<br> Replaces the <span class="hljs-keyword">path</span> specified <span class="hljs-keyword">in</span> the boot script. See script(<span class="hljs-number">5</span>).<br> -proto_dist Proto:<br> Specify a protocol <span class="hljs-keyword">for</span> Erlang distribution.<br> inet_tcp:<br> TCP <span class="hljs-keyword">over</span> IPv4 (the <span class="hljs-keyword">default</span>)<br> inet_tls:<br> distribution <span class="hljs-keyword">over</span> TLS/SSL<br> inet6_tcp:<br> TCP <span class="hljs-keyword">over</span> IPv6<br> <span class="hljs-keyword">For</span> example, <span class="hljs-keyword">to</span> <span class="hljs-keyword">start</span> up IPv6 <span class="hljs-keyword">distributed</span> nodes:<br> % erl -<span class="hljs-keyword">name</span> <span class="hljs-keyword">test</span>@ipv6node.example.com -proto_dist inet6_tcp<br> -remsh Node:<br> Starts Erlang <span class="hljs-keyword">with</span> a remote shell connected <span class="hljs-keyword">to</span> Node.<br> -rsh Program:<br> Specifies an alternative <span class="hljs-keyword">to</span> rsh <span class="hljs-keyword">for</span> <span class="hljs-keyword">starting</span> a <span class="hljs-keyword">slave</span> node <span class="hljs-keyword">on</span> a remote host. See <span class="hljs-keyword">slave</span>(<span class="hljs-number">3</span>erl).<br> -run <span class="hljs-keyword">Mod</span> [Func [Arg1, Arg2, ...]](init flag):<br> Makes init <span class="hljs-keyword">call</span> the specified function. Func <span class="hljs-keyword">defaults</span> <span class="hljs-keyword">to</span> start. <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> arguments <span class="hljs-keyword">are</span> provided, the <span class="hljs-keyword">function</span> <span class="hljs-keyword">is</span> assumed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">of</span> arity <span class="hljs-number">0.</span> Otherwise it <span class="hljs-keyword">is</span> assumed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">of</span> arity <span class="hljs-number">1</span>, taking the <span class="hljs-keyword">list</span> [Arg1,Arg2,...] <span class="hljs-keyword">as</span> argument. All arguments <span class="hljs-keyword">are</span> passed <span class="hljs-keyword">as</span><br> strings. See init(<span class="hljs-number">3</span>erl).<br> -s <span class="hljs-keyword">Mod</span> [Func [Arg1, Arg2, ...]](init flag):<br> Makes init <span class="hljs-keyword">call</span> the specified function. Func <span class="hljs-keyword">defaults</span> <span class="hljs-keyword">to</span> start. <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> arguments <span class="hljs-keyword">are</span> provided, the <span class="hljs-keyword">function</span> <span class="hljs-keyword">is</span> assumed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">of</span> arity <span class="hljs-number">0.</span> Otherwise it <span class="hljs-keyword">is</span> assumed <span class="hljs-keyword">to</span> be <span class="hljs-keyword">of</span> arity <span class="hljs-number">1</span>, taking the <span class="hljs-keyword">list</span> [Arg1,Arg2,...] <span class="hljs-keyword">as</span> argument. All arguments <span class="hljs-keyword">are</span> passed <span class="hljs-keyword">as</span><br> atoms. See init(<span class="hljs-number">3</span>erl).<br> -setcookie Cookie:<br> <span class="hljs-keyword">Sets</span> the magic cookie <span class="hljs-keyword">of</span> the node <span class="hljs-keyword">to</span> Cookie, see erlang:set_cookie/<span class="hljs-number">2.</span><br> -shutdown_time <span class="hljs-built_in">Time</span>:<br> Specifies how <span class="hljs-keyword">long</span> <span class="hljs-built_in">time</span> (<span class="hljs-keyword">in</span> milliseconds) the init process <span class="hljs-keyword">is</span> allowed <span class="hljs-keyword">to</span> spend shutting down the system. <span class="hljs-keyword">If</span> <span class="hljs-built_in">Time</span> ms have elapsed, all processes still existing <span class="hljs-keyword">are</span> killed. <span class="hljs-keyword">Defaults</span> <span class="hljs-keyword">to</span> infinity.<br> -sname <span class="hljs-keyword">Name</span>:<br> Makes the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">distributed</span> node, similar <span class="hljs-keyword">to</span> -<span class="hljs-keyword">name</span>, but the host <span class="hljs-keyword">name</span> portion <span class="hljs-keyword">of</span> the node <span class="hljs-keyword">name</span> <span class="hljs-keyword">Name</span>@Host will be the <span class="hljs-keyword">short</span> <span class="hljs-keyword">name</span>, <span class="hljs-keyword">not</span> fully qualified.<br> This <span class="hljs-keyword">is</span> sometimes the <span class="hljs-keyword">only</span> way <span class="hljs-keyword">to</span> run <span class="hljs-keyword">distributed</span> Erlang <span class="hljs-keyword">if</span> the DNS (<span class="hljs-keyword">Domain</span> <span class="hljs-keyword">Name</span> <span class="hljs-keyword">System</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> running. There can be <span class="hljs-keyword">no</span> communication <span class="hljs-keyword">between</span> nodes running <span class="hljs-keyword">with</span> the -sname flag <span class="hljs-keyword">and</span> those running <span class="hljs-keyword">with</span> the -<span class="hljs-keyword">name</span> flag, <span class="hljs-keyword">as</span> node <span class="hljs-keyword">names</span> must be <span class="hljs-keyword">unique</span> <span class="hljs-keyword">in</span><br> <span class="hljs-keyword">distributed</span> Erlang systems.<br> -smp [<span class="hljs-keyword">enable</span>|<span class="hljs-keyword">auto</span>|<span class="hljs-keyword">disable</span>]:<br> -smp <span class="hljs-keyword">enable</span> <span class="hljs-keyword">and</span> -smp starts the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> SMP support enabled. This may fail <span class="hljs-keyword">if</span> <span class="hljs-keyword">no</span> runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> SMP support <span class="hljs-keyword">is</span> available. -smp <span class="hljs-keyword">auto</span> starts the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> SMP support enabled <span class="hljs-keyword">if</span> it <span class="hljs-keyword">is</span> available <span class="hljs-keyword">and</span> more <span class="hljs-keyword">than</span> one<br> <span class="hljs-keyword">logical</span> processor <span class="hljs-keyword">are</span> detected. -smp <span class="hljs-keyword">disable</span> starts a runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">without</span> SMP support.<br> NOTE: The runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> SMP support will <span class="hljs-keyword">not</span> be available <span class="hljs-keyword">on</span> all supported platforms. See also the +S flag.<br> -<span class="hljs-keyword">version</span>(emulator flag):<br> Makes the emulator print <span class="hljs-keyword">out</span> its <span class="hljs-keyword">version</span> number. The same <span class="hljs-keyword">as</span> erl +V.<br>EMULATOR FLAGS<br> erl invokes the code <span class="hljs-keyword">for</span> the Erlang emulator (<span class="hljs-keyword">virtual</span> machine), which supports the <span class="hljs-keyword">following</span> flags:<br> +a <span class="hljs-keyword">size</span>:<br> Suggested stack <span class="hljs-keyword">size</span>, <span class="hljs-keyword">in</span> kilowords, <span class="hljs-keyword">for</span> threads <span class="hljs-keyword">in</span> the async-<span class="hljs-keyword">thread</span> pool. Valid <span class="hljs-keyword">range</span> <span class="hljs-keyword">is</span> <span class="hljs-number">16</span><span class="hljs-number">-8192</span> kilowords. The <span class="hljs-keyword">default</span> suggested stack <span class="hljs-keyword">size</span> <span class="hljs-keyword">is</span> <span class="hljs-number">16</span> kilowords, i.e, <span class="hljs-number">64</span> kilobyte <span class="hljs-keyword">on</span> <span class="hljs-number">32</span>-<span class="hljs-built_in">bit</span> architectures. This small <span class="hljs-keyword">default</span> <span class="hljs-keyword">size</span> has been chosen since the<br> amount <span class="hljs-keyword">of</span> async-threads might be quite large. The <span class="hljs-keyword">default</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">is</span> enough <span class="hljs-keyword">for</span> drivers delivered <span class="hljs-keyword">with</span> Erlang/OTP, but might <span class="hljs-keyword">not</span> be sufficiently <span class="hljs-keyword">large</span> <span class="hljs-keyword">for</span> other dynamically linked <span class="hljs-keyword">in</span> drivers that <span class="hljs-keyword">use</span> the driver_async() functionality. Note that the <span class="hljs-keyword">value</span><br> passed <span class="hljs-keyword">is</span> <span class="hljs-keyword">only</span> a suggestion, <span class="hljs-keyword">and</span> it might even be ignored <span class="hljs-keyword">on</span> <span class="hljs-keyword">some</span> platforms.<br> +A <span class="hljs-keyword">size</span>:<br> <span class="hljs-keyword">Sets</span> the <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> threads <span class="hljs-keyword">in</span> async <span class="hljs-keyword">thread</span> pool, valid <span class="hljs-keyword">range</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0</span><span class="hljs-number">-1024.</span> <span class="hljs-keyword">If</span> <span class="hljs-keyword">thread</span> support <span class="hljs-keyword">is</span> available, the <span class="hljs-keyword">default</span> <span class="hljs-keyword">is</span> <span class="hljs-number">10.</span><br> +B [c | d | i]:<br> The c <span class="hljs-keyword">option</span> makes Ctrl-C interrupt the <span class="hljs-keyword">current</span> shell instead <span class="hljs-keyword">of</span> invoking the emulator break handler. The d <span class="hljs-keyword">option</span> (same <span class="hljs-keyword">as</span> specifying +B <span class="hljs-keyword">without</span> an extra <span class="hljs-keyword">option</span>) disables the break handler. The i <span class="hljs-keyword">option</span> makes the emulator <span class="hljs-keyword">ignore</span> <span class="hljs-keyword">any</span> break signal.<br> <span class="hljs-keyword">If</span> the c <span class="hljs-keyword">option</span> <span class="hljs-keyword">is</span> used <span class="hljs-keyword">with</span> oldshell <span class="hljs-keyword">on</span> Unix, Ctrl-C will restart the shell process rather <span class="hljs-keyword">than</span> interrupt it.<br> Note that <span class="hljs-keyword">on</span> Windows, this flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">only</span> applicable <span class="hljs-keyword">for</span> werl, <span class="hljs-keyword">not</span> erl (oldshell). Note also that Ctrl-Break <span class="hljs-keyword">is</span> used instead <span class="hljs-keyword">of</span> Ctrl-C <span class="hljs-keyword">on</span> Windows.<br> +c <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>:<br> <span class="hljs-keyword">Enable</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">disable</span> <span class="hljs-built_in">time</span> correction:<br> <span class="hljs-literal">true</span>:<br> <span class="hljs-keyword">Enable</span> <span class="hljs-built_in">time</span> correction. This <span class="hljs-keyword">is</span> the <span class="hljs-keyword">default</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">time</span> correction <span class="hljs-keyword">is</span> supported <span class="hljs-keyword">on</span> the specific platform.<br> <span class="hljs-literal">false</span>:<br> <span class="hljs-keyword">Disable</span> <span class="hljs-built_in">time</span> correction.<br> <span class="hljs-keyword">For</span> backwards <span class="hljs-keyword">compatibility</span>, the <span class="hljs-built_in">boolean</span> <span class="hljs-keyword">value</span> can be omitted. This <span class="hljs-keyword">is</span> interpreted <span class="hljs-keyword">as</span> +c false.<br> +C no_time_warp | single_time_warp | multi_time_warp:<br> <span class="hljs-keyword">Set</span> <span class="hljs-built_in">time</span> warp <span class="hljs-keyword">mode</span>:<br> no_time_warp:<br> <span class="hljs-keyword">No</span> <span class="hljs-built_in">Time</span> Warp <span class="hljs-keyword">Mode</span> (the <span class="hljs-keyword">default</span>)<br> single_time_warp:<br> Single <span class="hljs-built_in">Time</span> Warp <span class="hljs-keyword">Mode</span><br> multi_time_warp:<br> Multi <span class="hljs-built_in">Time</span> Warp <span class="hljs-keyword">Mode</span><br> +d:<br> <span class="hljs-keyword">If</span> the emulator detects an internal <span class="hljs-keyword">error</span> (<span class="hljs-keyword">or</span> runs <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">memory</span>), it will <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> generate <span class="hljs-keyword">both</span> a crash dump <span class="hljs-keyword">and</span> a core dump. The core dump will, however, <span class="hljs-keyword">not</span> be very useful since the <span class="hljs-keyword">content</span> <span class="hljs-keyword">of</span> process heaps <span class="hljs-keyword">is</span> destroyed <span class="hljs-keyword">by</span> the crash dump genera鈥? tion.<br> The +d <span class="hljs-keyword">option</span> instructs the emulator <span class="hljs-keyword">to</span> <span class="hljs-keyword">only</span> produce a core dump <span class="hljs-keyword">and</span> <span class="hljs-keyword">no</span> crash dump <span class="hljs-keyword">if</span> an internal <span class="hljs-keyword">error</span> <span class="hljs-keyword">is</span> detected.<br> <span class="hljs-keyword">Calling</span> erlang:halt/<span class="hljs-number">1</span> <span class="hljs-keyword">with</span> a <span class="hljs-keyword">string</span> argument will still produce a crash dump. <span class="hljs-keyword">On</span> Unix systems, sending an emulator process a SIGUSR1 signal will also <span class="hljs-keyword">force</span> a crash dump.<br> +e <span class="hljs-built_in">Number</span>:<br> <span class="hljs-keyword">Set</span> <span class="hljs-keyword">max</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> ETS tables.<br> +ec:<br> <span class="hljs-keyword">Force</span> the compressed <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> all ETS tables. <span class="hljs-keyword">Only</span> intended <span class="hljs-keyword">for</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">and</span> evaluation.<br> +fnl:<br> The VM works <span class="hljs-keyword">with</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> they <span class="hljs-keyword">are</span> encoded <span class="hljs-keyword">using</span> the ISO-latin<span class="hljs-number">-1</span> <span class="hljs-keyword">encoding</span>, disallowing <span class="hljs-keyword">Unicode</span> <span class="hljs-keyword">characters</span> <span class="hljs-keyword">with</span> codepoints beyond <span class="hljs-number">255.</span><br> See STDLIB <span class="hljs-keyword">User</span><span class="hljs-string">'s Guide for more infomation about unicode file names. Note that this value also applies to command-line parameters and environment variables (see STDLIB User'</span>s Guide).<br> +fnu[&#123;w|i|e&#125;]:<br> The VM works <span class="hljs-keyword">with</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> they <span class="hljs-keyword">are</span> encoded <span class="hljs-keyword">using</span> UTF<span class="hljs-number">-8</span> (<span class="hljs-keyword">or</span> <span class="hljs-keyword">some</span> other <span class="hljs-keyword">system</span> specific <span class="hljs-keyword">Unicode</span> <span class="hljs-keyword">encoding</span>). This <span class="hljs-keyword">is</span> the <span class="hljs-keyword">default</span> <span class="hljs-keyword">on</span> operating systems that enforce <span class="hljs-keyword">Unicode</span> <span class="hljs-keyword">encoding</span>, i.e. Windows <span class="hljs-keyword">and</span> MacOS X.<br> The +fnu <span class="hljs-keyword">switch</span> can be followed <span class="hljs-keyword">by</span> w, i, <span class="hljs-keyword">or</span> e <span class="hljs-keyword">to</span> control the way wrongly encoded <span class="hljs-keyword">file</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">are</span> <span class="hljs-keyword">to</span> be reported. w means that a <span class="hljs-keyword">warning</span> <span class="hljs-keyword">is</span> sent <span class="hljs-keyword">to</span> the error_logger <span class="hljs-keyword">whenever</span> a wrongly encoded <span class="hljs-keyword">file</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> <span class="hljs-string">"skipped"</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">directory</span> listings, i means that<br> those wrongly encoded <span class="hljs-keyword">file</span> <span class="hljs-keyword">names</span> <span class="hljs-keyword">are</span> silently ignored <span class="hljs-keyword">and</span> e means that the API <span class="hljs-keyword">function</span> will <span class="hljs-keyword">return</span> an <span class="hljs-keyword">error</span> <span class="hljs-keyword">whenever</span> a wrongly encoded <span class="hljs-keyword">file</span> (<span class="hljs-keyword">or</span> <span class="hljs-keyword">directory</span>) <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> encountered. w <span class="hljs-keyword">is</span> the default. Note that <span class="hljs-keyword">file</span>:read_link/<span class="hljs-number">1</span> will <span class="hljs-keyword">always</span> <span class="hljs-keyword">return</span> an <span class="hljs-keyword">error</span> <span class="hljs-keyword">if</span><br> the <span class="hljs-keyword">link</span> points <span class="hljs-keyword">to</span> an invalid <span class="hljs-keyword">file</span> name.<br> See STDLIB <span class="hljs-keyword">User</span><span class="hljs-string">'s Guide for more infomation about unicode file names. Note that this value also applies to command-line parameters and environment variables (see STDLIB User'</span>s Guide).<br> +fna[&#123;w|i|e&#125;]:<br> Selection <span class="hljs-keyword">between</span> +fnl <span class="hljs-keyword">and</span> +fnu <span class="hljs-keyword">is</span> done based <span class="hljs-keyword">on</span> the <span class="hljs-keyword">current</span> locale <span class="hljs-keyword">settings</span> <span class="hljs-keyword">in</span> the OS, meaning that <span class="hljs-keyword">if</span> you have <span class="hljs-keyword">set</span> your terminal <span class="hljs-keyword">for</span> UTF<span class="hljs-number">-8</span> <span class="hljs-keyword">encoding</span>, the filesystem <span class="hljs-keyword">is</span> expected <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> the same <span class="hljs-keyword">encoding</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">file</span> names. This <span class="hljs-keyword">is</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">on</span> all operating<br> systems <span class="hljs-keyword">except</span> MacOS X <span class="hljs-keyword">and</span> Windows.<br> The +fna <span class="hljs-keyword">switch</span> can be followed <span class="hljs-keyword">by</span> w, i, <span class="hljs-keyword">or</span> e. This will have effect <span class="hljs-keyword">if</span> the locale <span class="hljs-keyword">settings</span> cause the behavior <span class="hljs-keyword">of</span> +fnu <span class="hljs-keyword">to</span> be selected. See the description <span class="hljs-keyword">of</span> +fnu above. <span class="hljs-keyword">If</span> the locale <span class="hljs-keyword">settings</span> cause the behavior <span class="hljs-keyword">of</span> +fnl <span class="hljs-keyword">to</span> be selected, <span class="hljs-keyword">then</span> w, i, <span class="hljs-keyword">or</span> e<br> will <span class="hljs-keyword">not</span> have <span class="hljs-keyword">any</span> effect.<br> See STDLIB <span class="hljs-keyword">User</span><span class="hljs-string">'s Guide for more infomation about unicode file names. Note that this value also applies to command-line parameters and environment variables (see STDLIB User'</span>s Guide).<br> +hms <span class="hljs-keyword">Size</span>:<br> <span class="hljs-keyword">Sets</span> the <span class="hljs-keyword">default</span> <span class="hljs-keyword">heap</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> processes <span class="hljs-keyword">to</span> the <span class="hljs-keyword">size</span> Size.<br> +hmbs <span class="hljs-keyword">Size</span>:<br> <span class="hljs-keyword">Sets</span> the <span class="hljs-keyword">default</span> <span class="hljs-built_in">binary</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">heap</span> <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> processes <span class="hljs-keyword">to</span> the <span class="hljs-keyword">size</span> Size.<br> +hpds <span class="hljs-keyword">Size</span>:<br> <span class="hljs-keyword">Sets</span> the <span class="hljs-keyword">initial</span> process dictionary <span class="hljs-keyword">size</span> <span class="hljs-keyword">of</span> processes <span class="hljs-keyword">to</span> the <span class="hljs-keyword">size</span> Size.<br> +K <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>:<br> Enables <span class="hljs-keyword">or</span> disables the kernel poll functionality <span class="hljs-keyword">if</span> the emulator supports it. <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">false</span> (disabled). <span class="hljs-keyword">If</span> the emulator does <span class="hljs-keyword">not</span> support kernel poll, <span class="hljs-keyword">and</span> the +K flag <span class="hljs-keyword">is</span> passed <span class="hljs-keyword">to</span> the emulator, a <span class="hljs-keyword">warning</span> <span class="hljs-keyword">is</span> issued <span class="hljs-keyword">at</span> startup.<br> +l:<br> Enables <span class="hljs-keyword">auto</span> <span class="hljs-keyword">load</span> tracing, displaying info <span class="hljs-keyword">while</span> loading code.<br> +L:<br> Don<span class="hljs-string">'t load information about source file names and line numbers. This will save some memory, but exceptions will not contain information about the file names and line numbers.<br> +MFlag Value:<br> Memory allocator specific flags, see erts_alloc(3erl) for further information.<br> +n Behavior:<br> Control behavior of signals to ports.<br> As of OTP-R16 signals to ports are truly asynchronously delivered. Note that signals always have been documented as asynchronous. The underlying implementation has, however, previously delivered these signals synchronously. Correctly written Erlang<br> programs should be able to handle this without any issues. Bugs in existing Erlang programs that make false assumptions about signals to ports may, however, be tricky to find. This switch has been introduced in order to at least make it easier to com鈥? pare behaviors during a transition period. Note that this flag is deprecated as of its introduction, and is scheduled for removal in OTP-R17. Behavior should be one of the following characters:<br> d:<br> The default. Asynchronous signals. A process that sends a signal to a port may continue execution before the signal has been delivered to the port.<br> s:<br> Synchronous signals. A processes that sends a signal to a port will not continue execution until the signal has been delivered. Should only be used for testing and debugging.<br> a:<br> Asynchronous signals. As the default, but a processes that sends a signal will even more frequently continue execution before the signal has been delivered to the port. Should only be used for testing and debugging.<br> +pc Range:<br> Sets the range of characters that the system will consider printable in heuristic detection of strings. This typically affects the shell, debugger and io:format functions (when ~tp is used in the format string).<br> Currently two values for the Range are supported:<br> latin1:<br> The default. Only characters in the ISO-latin-1 range can be considered printable, which means that a character with a code point &gt; 255 will never be considered printable and that lists containing such characters will be displayed as lists of inte鈥? gers rather than text strings by tools.<br> unicode:<br> All printable Unicode characters are considered when determining if a list of integers is to be displayed in string syntax. This may give unexpected results if for example your font does not cover all Unicode characters.<br> Se also io:printable_range/0.<br> +P Number|legacy:<br> Sets the maximum number of simultaneously existing processes for this system if a Number is passed as value. Valid range for Number is [1024-134217727]<br> NOTE: The actual maximum chosen may be much larger than the Number passed. Currently the runtime system often, but not always, chooses a value that is a power of 2. This might, however, be changed in the future. The actual value chosen can be checked<br> by calling erlang:system_info(process_limit).<br> The default value is 262144<br> If legacy is passed as value, the legacy algorithm for allocation of process identifiers will be used. Using the legacy algorithm, identifiers will be allocated in a strictly increasing fashion until largest possible identifier has been reached. Note<br> that this algorithm suffers from performance issues and can under certain circumstances be extremely expensive. The legacy algoritm is deprecated, and the legacy option is scheduled for removal in OTP-R18.<br> +Q Number|legacy:<br> Sets the maximum number of simultaneously existing ports for this system if a Number is passed as value. Valid range for Number is [1024-134217727]<br> NOTE: The actual maximum chosen may be much larger than the actual Number passed. Currently the runtime system often, but not always, chooses a value that is a power of 2. This might, however, be changed in the future. The actual value chosen can be<br> checked by calling erlang:system_info(port_limit).<br> The default value used is normally 65536. However, if the runtime system is able to determine maximum amount of file descriptors that it is allowed to open and this value is larger than 65536, the chosen value will increased to a value larger or equal<br> to the maximum amount of file descriptors that can be opened.<br> On Windows the default value is set to 8196 because the normal OS limitations are set higher than most machines can handle.<br> Previously the environment variable ERL_MAX_PORTS was used for setting the maximum number of simultaneously existing ports. This environment variable is deprecated, and scheduled for removal in OTP-R17, but can still be used.<br> If legacy is passed as value, the legacy algorithm for allocation of port identifiers will be used. Using the legacy algorithm, identifiers will be allocated in a strictly increasing fashion until largest possible identifier has been reached. Note that<br> this algorithm suffers from performance issues and can under certain circumstances be extremely expensive. The legacy algoritm is deprecated, and the legacy option is scheduled for removal in OTP-R18.<br> +R ReleaseNumber:<br> Sets the compatibility mode.<br> The distribution mechanism is not backwards compatible by default. This flags sets the emulator in compatibility mode with an earlier Erlang/OTP release ReleaseNumber. The release number must be in the range &lt;current release&gt;-2..&lt;current release&gt;. This<br> limits the emulator, making it possible for it to communicate with Erlang nodes (as well as C- and Java nodes) running that earlier release.<br> Note: Make sure all nodes (Erlang-, C-, and Java nodes) of a distributed Erlang system is of the same Erlang/OTP release, or from two different Erlang/OTP releases X and Y, where all Y nodes have compatibility mode X.<br> +r:<br> Force ets memory block to be moved on realloc.<br> +rg ReaderGroupsLimit:<br> Limits the amount of reader groups used by read/write locks optimized for read operations in the Erlang runtime system. By default the reader groups limit equals 64.<br> When the amount of schedulers is less than or equal to the reader groups limit, each scheduler has its own reader group. When the amount of schedulers is larger than the reader groups limit, schedulers share reader groups. Shared reader groups degrades<br> read lock and read unlock performance while a large amount of reader groups degrades write lock performance, so the limit is a tradeoff between performance for read operations and performance for write operations. Each reader group currently consumes<br> 64 byte in each read/write lock. Also note that a runtime system using shared reader groups benefits from binding schedulers to logical processors, since the reader groups are distributed better between schedulers.<br> +S Schedulers:SchedulerOnline:<br> Sets the number of scheduler threads to create and scheduler threads to set online when SMP support has been enabled. The maximum for both values is 1024. If the Erlang runtime system is able to determine the amount of logical processors configured and<br> logical processors available, Schedulers will default to logical processors configured, and SchedulersOnline will default to logical processors available; otherwise, the default values will be 1. Schedulers may be omitted if :SchedulerOnline is not and<br> vice versa. The number of schedulers online can be changed at run time via erlang:system_flag(schedulers_online, SchedulersOnline).<br> If Schedulers or SchedulersOnline is specified as a negative number, the value is subtracted from the default number of logical processors configured or logical processors available, respectively.<br> Specifying the value 0 for Schedulers or SchedulersOnline resets the number of scheduler threads or scheduler threads online respectively to its default value.<br> This option is ignored if the emulator doesn'</span>t have SMP support enabled (see the -smp flag).<br> +SP SchedulersPercentage:SchedulersOnlinePercentage:<br> Similar <span class="hljs-keyword">to</span> +S but uses percentages <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> the <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> scheduler threads <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span>, based <span class="hljs-keyword">on</span> <span class="hljs-keyword">logical</span> processors configured, <span class="hljs-keyword">and</span> scheduler threads <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">online</span>, based <span class="hljs-keyword">on</span> <span class="hljs-keyword">logical</span> processors available, <span class="hljs-keyword">when</span> SMP support has been enabled. Specified <span class="hljs-keyword">values</span><br> must be greater <span class="hljs-keyword">than</span> <span class="hljs-number">0.</span> <span class="hljs-keyword">For</span> example, +SP <span class="hljs-number">50</span>:<span class="hljs-number">25</span> <span class="hljs-keyword">sets</span> the <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> scheduler threads <span class="hljs-keyword">to</span> <span class="hljs-number">50</span>% <span class="hljs-keyword">of</span> the <span class="hljs-keyword">logical</span> processors configured <span class="hljs-keyword">and</span> the <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> scheduler threads <span class="hljs-keyword">online</span> <span class="hljs-keyword">to</span> <span class="hljs-number">25</span>% <span class="hljs-keyword">of</span> the <span class="hljs-keyword">logical</span> processors available. SchedulersPercentage may be omitted<br> <span class="hljs-keyword">if</span> :SchedulersOnlinePercentage <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">and</span> vice versa. The <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> schedulers <span class="hljs-keyword">online</span> can be <span class="hljs-keyword">changed</span> <span class="hljs-keyword">at</span> run <span class="hljs-built_in">time</span> via erlang:system_flag(schedulers_online, SchedulersOnline).<br> This <span class="hljs-keyword">option</span> interacts <span class="hljs-keyword">with</span> +S settings. <span class="hljs-keyword">For</span> example, <span class="hljs-keyword">on</span> a <span class="hljs-keyword">system</span> <span class="hljs-keyword">with</span> <span class="hljs-number">8</span> <span class="hljs-keyword">logical</span> cores configured <span class="hljs-keyword">and</span> <span class="hljs-number">8</span> <span class="hljs-keyword">logical</span> cores available, the combination <span class="hljs-keyword">of</span> the options +S <span class="hljs-number">4</span>:<span class="hljs-number">4</span> +SP <span class="hljs-number">50</span>:<span class="hljs-number">25</span> (<span class="hljs-keyword">in</span> either <span class="hljs-keyword">order</span>) results <span class="hljs-keyword">in</span> <span class="hljs-number">2</span> scheduler threads (<span class="hljs-number">50</span>% <span class="hljs-keyword">of</span> <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> scheduler<br> <span class="hljs-keyword">thread</span> <span class="hljs-keyword">online</span> (<span class="hljs-number">25</span>% <span class="hljs-keyword">of</span> <span class="hljs-number">4</span>).<br> This <span class="hljs-keyword">option</span> <span class="hljs-keyword">is</span> ignored <span class="hljs-keyword">if</span> the emulator doesn<span class="hljs-string">'t have SMP support enabled (see the -smp flag).<br> +SDcpu DirtyCPUSchedulers:DirtyCPUSchedulersOnline:<br> Sets the number of dirty CPU scheduler threads to create and dirty CPU scheduler threads to set online when threading support has been enabled. The maximum for both values is 1024, and each value is further limited by the settings for normal sched鈥? ulers: the number of dirty CPU scheduler threads created cannot exceed the number of normal scheduler threads created, and the number of dirty CPU scheduler threads online cannot exceed the number of normal scheduler threads online (see the +S and +SP<br> flags for more details). By default, the number of dirty CPU scheduler threads created equals the number of normal scheduler threads created, and the number of dirty CPU scheduler threads online equals the number of normal scheduler threads online.<br> DirtyCPUSchedulers may be omitted if :DirtyCPUSchedulersOnline is not and vice versa. The number of dirty CPU schedulers online can be changed at run time via erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline).<br> This option is ignored if the emulator doesn'</span>t have threading support enabled. Currently, this <span class="hljs-keyword">option</span> <span class="hljs-keyword">is</span> experimental <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> supported <span class="hljs-keyword">only</span> <span class="hljs-keyword">if</span> the emulator was configured <span class="hljs-keyword">and</span> built <span class="hljs-keyword">with</span> support <span class="hljs-keyword">for</span> dirty schedulers enabled (it<span class="hljs-string">'s disabled by default).<br> +SDPcpu DirtyCPUSchedulersPercentage:DirtyCPUSchedulersOnlinePercentage:<br> Similar to +SDcpu but uses percentages to set the number of dirty CPU scheduler threads to create and number of dirty CPU scheduler threads to set online when threading support has been enabled. Specified values must be greater than 0. For example,<br> +SDPcpu 50:25 sets the number of dirty CPU scheduler threads to 50% of the logical processors configured and the number of dirty CPU scheduler threads online to 25% of the logical processors available. DirtyCPUSchedulersPercentage may be omitted if<br> :DirtyCPUSchedulersOnlinePercentage is not and vice versa. The number of dirty CPU schedulers online can be changed at run time via erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline).<br> This option interacts with +SDcpu settings. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options +SDcpu 4:4 +SDPcpu 50:25 (in either order) results in 2 dirty CPU scheduler threads (50%<br> of 4) and 1 dirty CPU scheduler thread online (25% of 4).<br> This option is ignored if the emulator doesn'</span>t have threading support enabled. Currently, this <span class="hljs-keyword">option</span> <span class="hljs-keyword">is</span> experimental <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> supported <span class="hljs-keyword">only</span> <span class="hljs-keyword">if</span> the emulator was configured <span class="hljs-keyword">and</span> built <span class="hljs-keyword">with</span> support <span class="hljs-keyword">for</span> dirty schedulers enabled (it<span class="hljs-string">'s disabled by default).<br> +SDio IOSchedulers:<br> Sets the number of dirty I/O scheduler threads to create when threading support has been enabled. The valid range is 0-1024. By default, the number of dirty I/O scheduler threads created is 10, same as the default number of threads in the async thread<br> pool .<br> This option is ignored if the emulator doesn'</span>t have threading support enabled. Currently, this <span class="hljs-keyword">option</span> <span class="hljs-keyword">is</span> experimental <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> supported <span class="hljs-keyword">only</span> <span class="hljs-keyword">if</span> the emulator was configured <span class="hljs-keyword">and</span> built <span class="hljs-keyword">with</span> support <span class="hljs-keyword">for</span> dirty schedulers enabled (it<span class="hljs-string">'s disabled by default).<br> +sFlag Value:<br> Scheduling specific flags.<br> +sbt BindType:<br> Set scheduler bind type.<br> Schedulers can also be bound using the +stbt flag. The only difference between these two flags is how the following errors are handled:<br> * Binding of schedulers is not supported on the specific platform.<br> * No available CPU topology. That is the runtime system was not able to automatically detected the CPU topology, and no user defined CPU topology was set.<br> If any of these errors occur when +sbt has been passed, the runtime system will print an error message, and refuse to start. If any of these errors occur when +stbt has been passed, the runtime system will silently ignore the error, and start up<br> using unbound schedulers.<br> Currently valid BindTypes:<br> u:<br> unbound - Schedulers will not be bound to logical processors, i.e., the operating system decides where the scheduler threads execute, and when to migrate them. This is the default.<br> ns:<br> no_spread - Schedulers with close scheduler identifiers will be bound as close as possible in hardware.<br> ts:<br> thread_spread - Thread refers to hardware threads (e.g. Intel'</span>s hyper-threads). Schedulers <span class="hljs-keyword">with</span> <span class="hljs-keyword">low</span> scheduler identifiers, will be <span class="hljs-keyword">bound</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">first</span> hardware <span class="hljs-keyword">thread</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> core, <span class="hljs-keyword">then</span> schedulers <span class="hljs-keyword">with</span> higher scheduler identifiers will be <span class="hljs-keyword">bound</span> <span class="hljs-keyword">to</span><br> the <span class="hljs-keyword">second</span> hardware <span class="hljs-keyword">thread</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">each</span> core, etc.<br> ps:<br> processor_spread - Schedulers will be spread <span class="hljs-keyword">like</span> thread_spread, but also <span class="hljs-keyword">over</span> <span class="hljs-keyword">physical</span> processor chips.<br> s:<br> spread - Schedulers will be spread <span class="hljs-keyword">as</span> much <span class="hljs-keyword">as</span> possible.<br> nnts:<br> no_node_thread_spread - <span class="hljs-keyword">Like</span> thread_spread, but <span class="hljs-keyword">if</span> multiple NUMA (Non-<span class="hljs-keyword">Uniform</span> <span class="hljs-keyword">Memory</span> <span class="hljs-keyword">Access</span>) nodes <span class="hljs-keyword">exists</span>, schedulers will be spread <span class="hljs-keyword">over</span> one NUMA node <span class="hljs-keyword">at</span> a <span class="hljs-built_in">time</span>, i.e., all <span class="hljs-keyword">logical</span> processors <span class="hljs-keyword">of</span> one NUMA node will be <span class="hljs-keyword">bound</span> <span class="hljs-keyword">to</span> schedulers <span class="hljs-keyword">in</span><br> sequence.<br> nnps:<br> no_node_processor_spread - <span class="hljs-keyword">Like</span> processor_spread, but <span class="hljs-keyword">if</span> multiple NUMA nodes <span class="hljs-keyword">exists</span>, schedulers will be spread <span class="hljs-keyword">over</span> one NUMA node <span class="hljs-keyword">at</span> a <span class="hljs-built_in">time</span>, i.e., all <span class="hljs-keyword">logical</span> processors <span class="hljs-keyword">of</span> one NUMA node will be <span class="hljs-keyword">bound</span> <span class="hljs-keyword">to</span> schedulers <span class="hljs-keyword">in</span> sequence.<br> tnnps:<br> thread_no_node_processor_spread - A combination <span class="hljs-keyword">of</span> thread_spread, <span class="hljs-keyword">and</span> no_node_processor_spread. Schedulers will be spread <span class="hljs-keyword">over</span> hardware threads across NUMA nodes, but schedulers will <span class="hljs-keyword">only</span> be spread <span class="hljs-keyword">over</span> processors internally <span class="hljs-keyword">in</span> one NUMA node <span class="hljs-keyword">at</span> a<br> time.<br> db:<br> default_bind - Binds schedulers the <span class="hljs-keyword">default</span> way. Currently the <span class="hljs-keyword">default</span> <span class="hljs-keyword">is</span> thread_no_node_processor_spread (which might <span class="hljs-keyword">change</span> <span class="hljs-keyword">in</span> the future).<br> Binding <span class="hljs-keyword">of</span> schedulers <span class="hljs-keyword">is</span> currently <span class="hljs-keyword">only</span> supported <span class="hljs-keyword">on</span> newer Linux, Solaris, FreeBSD, <span class="hljs-keyword">and</span> Windows systems.<br> <span class="hljs-keyword">If</span> <span class="hljs-keyword">no</span> CPU topology <span class="hljs-keyword">is</span> available <span class="hljs-keyword">when</span> the +sbt flag <span class="hljs-keyword">is</span> processed <span class="hljs-keyword">and</span> BindType <span class="hljs-keyword">is</span> <span class="hljs-keyword">any</span> other <span class="hljs-keyword">type</span> <span class="hljs-keyword">than</span> u, the runtime <span class="hljs-keyword">system</span> will fail <span class="hljs-keyword">to</span> start. CPU topology can be defined <span class="hljs-keyword">using</span> the +sct flag. Note that the +sct flag may have <span class="hljs-keyword">to</span> be passed <span class="hljs-keyword">before</span> the<br> +sbt flag <span class="hljs-keyword">on</span> the command line (<span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">no</span> CPU topology has been automatically detected).<br> The runtime <span class="hljs-keyword">system</span> will <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">not</span> bind schedulers <span class="hljs-keyword">to</span> <span class="hljs-keyword">logical</span> processors.<br> NOTE: <span class="hljs-keyword">If</span> the Erlang runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">is</span> the <span class="hljs-keyword">only</span> operating <span class="hljs-keyword">system</span> process that binds threads <span class="hljs-keyword">to</span> <span class="hljs-keyword">logical</span> processors, this improves the <span class="hljs-keyword">performance</span> <span class="hljs-keyword">of</span> the runtime system. However, <span class="hljs-keyword">if</span> other operating <span class="hljs-keyword">system</span> processes (<span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span> example another Erlang runtime<br> <span class="hljs-keyword">system</span>) also bind threads <span class="hljs-keyword">to</span> <span class="hljs-keyword">logical</span> processors, there might be a <span class="hljs-keyword">performance</span> penalty instead. <span class="hljs-keyword">In</span> <span class="hljs-keyword">some</span> cases this <span class="hljs-keyword">performance</span> penalty might be severe. <span class="hljs-keyword">If</span> this <span class="hljs-keyword">is</span> the <span class="hljs-keyword">case</span>, you <span class="hljs-keyword">are</span> advised <span class="hljs-keyword">to</span> <span class="hljs-keyword">not</span> bind the schedulers.<br> How schedulers <span class="hljs-keyword">are</span> <span class="hljs-keyword">bound</span> matters. <span class="hljs-keyword">For</span> example, <span class="hljs-keyword">in</span> situations <span class="hljs-keyword">when</span> there <span class="hljs-keyword">are</span> fewer running processes <span class="hljs-keyword">than</span> schedulers <span class="hljs-keyword">online</span>, the runtime <span class="hljs-keyword">system</span> tries <span class="hljs-keyword">to</span> migrate processes <span class="hljs-keyword">to</span> schedulers <span class="hljs-keyword">with</span> <span class="hljs-keyword">low</span> scheduler identifiers. The more the schedulers <span class="hljs-keyword">are</span> spread<br> <span class="hljs-keyword">over</span> the hardware, the more resources will be available <span class="hljs-keyword">to</span> the runtime <span class="hljs-keyword">system</span> <span class="hljs-keyword">in</span> such situations.<br> NOTE: <span class="hljs-keyword">If</span> a scheduler fails <span class="hljs-keyword">to</span> bind, this will often be silently ignored. This since it isn<span class="hljs-string">'t always possible to verify valid logical processor identifiers. If an error is reported, it will be reported to the error_logger. If you want to verify that<br> the schedulers actually have bound as requested, call erlang:system_info(scheduler_bindings).<br> +sbwt none|very_short|short|medium|long|very_long:<br> Set scheduler busy wait threshold. Default is medium. The threshold determines how long schedulers should busy wait when running out of work before going to sleep.<br> NOTE: This flag may be removed or changed at any time without prior notice.<br> +scl true|false:<br> Enable or disable scheduler compaction of load. By default scheduler compaction of load is enabled. When enabled, load balancing will strive for a load distribution which causes as many scheduler threads as possible to be fully loaded (i.e., not run<br> out of work). This is accomplished by migrating load (e.g. runnable processes) into a smaller set of schedulers when schedulers frequently run out of work. When disabled, the frequency with which schedulers run out of work will not be taken into<br> account by the load balancing logic.<br> +scl false is similar to +sub true with the difference that +sub true also will balance scheduler utilization between schedulers.<br> +sct CpuTopology:<br> * &lt;Id&gt; = integer(); when 0 =&lt; &lt;Id&gt; =&lt; 65535<br> * &lt;IdRange&gt; = &lt;Id&gt;-&lt;Id&gt;<br> * &lt;IdOrIdRange&gt; = &lt;Id&gt; | &lt;IdRange&gt;<br> * &lt;IdList&gt; = &lt;IdOrIdRange&gt;,&lt;IdOrIdRange&gt; | &lt;IdOrIdRange&gt;<br> * &lt;LogicalIds&gt; = L&lt;IdList&gt;<br> * &lt;ThreadIds&gt; = T&lt;IdList&gt; | t&lt;IdList&gt;<br> * &lt;CoreIds&gt; = C&lt;IdList&gt; | c&lt;IdList&gt;<br> * &lt;ProcessorIds&gt; = P&lt;IdList&gt; | p&lt;IdList&gt;<br> * &lt;NodeIds&gt; = N&lt;IdList&gt; | n&lt;IdList&gt;<br> * &lt;IdDefs&gt; = &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;ProcessorIds&gt;&lt;NodeIds&gt; | &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;NodeIds&gt;&lt;ProcessorIds&gt;<br> * CpuTopology = &lt;IdDefs&gt;:&lt;IdDefs&gt; | &lt;IdDefs&gt;<br> Set a user defined CPU topology. The user defined CPU topology will override any automatically detected CPU topology. The CPU topology is used when binding schedulers to logical processors.<br> Upper-case letters signify real identifiers and lower-case letters signify fake identifiers only used for description of the topology. Identifiers passed as real identifiers may be used by the runtime system when trying to access specific hardware<br> and if they are not correct the behavior is undefined. Faked logical CPU identifiers are not accepted since there is no point in defining the CPU topology without real logical CPU identifiers. Thread, core, processor, and node identifiers may be left<br> out. If left out, thread id defaults to t0, core id defaults to c0, processor id defaults to p0, and node id will be left undefined. Either each logical processor must belong to one and only one NUMA node, or no logical processors must belong to any<br> NUMA nodes.<br> Both increasing and decreasing &lt;IdRange&gt;s are allowed.<br> NUMA node identifiers are system wide. That is, each NUMA node on the system have to have a unique identifier. Processor identifiers are also system wide. Core identifiers are processor wide. Thread identifiers are core wide.<br> The order of the identifier types imply the hierarchy of the CPU topology. Valid orders are either &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;ProcessorIds&gt;&lt;NodeIds&gt;, or &lt;LogicalIds&gt;&lt;ThreadIds&gt;&lt;CoreIds&gt;&lt;NodeIds&gt;&lt;ProcessorIds&gt;. That is, thread is part of a core<br> which is part of a processor which is part of a NUMA node, or thread is part of a core which is part of a NUMA node which is part of a processor. A cpu topology can consist of both processor external, and processor internal NUMA nodes as long as each<br> logical processor belongs to one and only one NUMA node. If &lt;ProcessorIds&gt; is left out, its default position will be before &lt;NodeIds&gt;. That is, the default is processor external NUMA nodes.<br> If a list of identifiers is used in an &lt;IdDefs&gt;:<br> * &lt;LogicalIds&gt; have to be a list of identifiers.<br> * At least one other identifier type apart from &lt;LogicalIds&gt; also have to have a list of identifiers.<br> * All lists of identifiers have to produce the same amount of identifiers.<br> A simple example. A single quad core processor may be described this way:<br> % erl +sct L0-3c0-3<br> 1&gt; erlang:system_info(cpu_topology).<br> [&#123;processor,[&#123;core,&#123;logical,0&#125;&#125;,<br> &#123;core,&#123;logical,1&#125;&#125;,<br> &#123;core,&#123;logical,2&#125;&#125;,<br> &#123;core,&#123;logical,3&#125;&#125;]&#125;]<br> A little more complicated example. Two quad core processors. Each processor in its own NUMA node. The ordering of logical processors is a little weird. This in order to give a better example of identifier lists:<br> % erl +sct L0-1,3-2c0-3p0N0:L7,4,6-5c0-3p1N1<br> 1&gt; erlang:system_info(cpu_topology).<br> [&#123;node,[&#123;processor,[&#123;core,&#123;logical,0&#125;&#125;,<br> &#123;core,&#123;logical,1&#125;&#125;,<br> &#123;core,&#123;logical,3&#125;&#125;,<br> &#123;core,&#123;logical,2&#125;&#125;]&#125;]&#125;,<br> &#123;node,[&#123;processor,[&#123;core,&#123;logical,7&#125;&#125;,<br> &#123;core,&#123;logical,4&#125;&#125;,<br> &#123;core,&#123;logical,6&#125;&#125;,<br> &#123;core,&#123;logical,5&#125;&#125;]&#125;]&#125;]<br> As long as real identifiers are correct it is okay to pass a CPU topology that is not a correct description of the CPU topology. When used with care this can actually be very useful. This in order to trick the emulator to bind its schedulers as you<br> want. For example, if you want to run multiple Erlang runtime systems on the same machine, you want to reduce the amount of schedulers used and manipulate the CPU topology so that they bind to different logical CPUs. An example, with two Erlang run鈥? time systems on a quad core machine:<br> % erl +sct L0-3c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname one<br> % erl +sct L3-0c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname two<br> In this example each runtime system have two schedulers each online, and all schedulers online will run on different cores. If we change to one scheduler online on one runtime system, and three schedulers online on the other, all schedulers online<br> will still run on different cores.<br> Note that a faked CPU topology that does not reflect how the real CPU topology looks like is likely to decrease the performance of the runtime system.<br> For more information, see erlang:system_info(cpu_topology).<br> +secio true|false:<br> Enable or disable eager check I/O scheduling. The default is currently true. The default was changed from false to true as of erts version 7.0. The behaviour before this flag was introduced corresponds to +secio false.<br> The flag effects when schedulers will check for I/O operations possible to execute, and when such I/O operations will execute. As the name of the parameter implies, schedulers will be more eager to check for I/O when true is passed. This however also<br> implies that execution of outstanding I/O operation will not be prioritized to the same extent as when false is passed.<br> erlang:system_info(eager_check_io) returns the value of this parameter used when starting the VM.<br> +sfwi Interval:<br> Set scheduler forced wakeup interval. All run queues will be scanned each Interval milliseconds. While there are sleeping schedulers in the system, one scheduler will be woken for each non-empty run queue found. An Interval of zero disables this fea鈥? ture, which also is the default.<br> This feature has been introduced as a temporary workaround for long-executing native code, and native code that does not bump reductions properly in OTP. When these bugs have be fixed the +sfwi flag will be removed.<br> +stbt BindType:<br> Try to set scheduler bind type. The same as the +sbt flag with the exception of how some errors are handled. For more information, see the documentation of the +sbt flag.<br> +sub true|false:<br> Enable or disable scheduler utilization balancing of load. By default scheduler utilization balancing is disabled and instead scheduler compaction of load is enabled which will strive for a load distribution which causes as many scheduler threads as<br> possible to be fully loaded (i.e., not run out of work). When scheduler utilization balancing is enabled the system will instead try to balance scheduler utilization between schedulers. That is, strive for equal scheduler utilization on all sched鈥? ulers.<br> +sub true is only supported on systems where the runtime system detects and uses a monotonically increasing high resolution clock. On other systems, the runtime system will fail to start.<br> +sub true implies +scl false. The difference between +sub true and +scl false is that +scl false will not try to balance the scheduler utilization.<br> +swct very_eager|eager|medium|lazy|very_lazy:<br> Set scheduler wake cleanup threshold. Default is medium. This flag controls how eager schedulers should be requesting wake up due to certain cleanup operations. When a lazy setting is used, more outstanding cleanup operations can be left undone while<br> a scheduler is idling. When an eager setting is used, schedulers will more frequently be woken, potentially increasing CPU-utilization.<br> NOTE: This flag may be removed or changed at any time without prior notice.<br> +sws default|legacy:<br> Set scheduler wakeup strategy. Default strategy changed in erts-5.10/OTP-R16A. This strategy was previously known as proposal in OTP-R15. The legacy strategy was used as default from R13 up to and including R15.<br> NOTE: This flag may be removed or changed at any time without prior notice.<br> +swt very_low|low|medium|high|very_high:<br> Set scheduler wakeup threshold. Default is medium. The threshold determines when to wake up sleeping schedulers when more work than can be handled by currently awake schedulers exist. A low threshold will cause earlier wakeups, and a high threshold<br> will cause later wakeups. Early wakeups will distribute work over multiple schedulers faster, but work will more easily bounce between schedulers.<br> NOTE: This flag may be removed or changed at any time without prior notice.<br> +spp Bool:<br> Set default scheduler hint for port parallelism. If set to true, the VM will schedule port tasks when doing so will improve parallelism in the system. If set to false, the VM will try to perform port tasks immediately, improving latency at the<br> expense of parallelism. If this flag has not been passed, the default scheduler hint for port parallelism is currently false. The default used can be inspected in runtime by calling erlang:system_info(port_parallelism). The default can be overriden<br> on port creation by passing the parallelism option to open_port/2.<br> +sss size:<br> Suggested stack size, in kilowords, for scheduler threads. Valid range is 4-8192 kilowords. The default stack size is OS dependent.<br> +t size:<br> Set the maximum number of atoms the VM can handle. Default is 1048576.<br> +T Level:<br> Enables modified timing and sets the modified timing level. Currently valid range is 0-9. The timing of the runtime system will change. A high level usually means a greater change than a low level. Changing the timing can be very useful for finding<br> timing related bugs.<br> Currently, modified timing affects the following:<br> Process spawning:<br> A process calling spawn, spawn_link, spawn_monitor, or spawn_opt will be scheduled out immediately after completing the call. When higher modified timing levels are used, the caller will also sleep for a while after being scheduled out.<br> Context reductions:<br> The amount of reductions a process is a allowed to use before being scheduled out is increased or reduced.<br> Input reductions:<br> The amount of reductions performed before checking I/O is increased or reduced.<br> NOTE: Performance will suffer when modified timing is enabled. This flag is only intended for testing and debugging. Also note that return_to and return_from trace messages will be lost when tracing on the spawn BIFs. This flag may be removed or<br> changed at any time without prior notice.<br> +V:<br> Makes the emulator print out its version number.<br> +v:<br> Verbose.<br> +W w | i | e:<br> Sets the mapping of warning messages for error_logger. Messages sent to the error logger using one of the warning routines can be mapped either to errors (+W e), warnings (+W w), or info reports (+W i). The default is warnings. The current mapping can<br> be retrieved using error_logger:warning_map/0. See error_logger(3erl) for further information.<br> +zFlag Value:<br> Miscellaneous flags.<br> +zdbbl size:<br> Set the distribution buffer busy limit (dist_buf_busy_limit) in kilobytes. Valid range is 1-2097151. Default is 1024.<br> A larger buffer limit will allow processes to buffer more outgoing messages over the distribution. When the buffer limit has been reached, sending processes will be suspended until the buffer size has shrunk. The buffer limit is per distribution<br> channel. A higher limit will give lower latency and higher throughput at the expense of higher memory usage.<br> +zdntgc time:<br> Set the delayed node table garbage collection time (delayed_node_table_gc) in seconds. Valid values are either infinity or an integer in the range [0-100000000]. Default is 60.<br> Node table entries that are not referred will linger in the table for at least the amount of time that this parameter determines. The lingering prevents repeated deletions and insertions in the tables from occurring.<br>ENVIRONMENT VARIABLES<br> ERL_CRASH_DUMP:<br> If the emulator needs to write a crash dump, the value of this variable will be the file name of the crash dump file. If the variable is not set, the name of the crash dump file will be erl_crash.dump in the current directory.<br> ERL_CRASH_DUMP_NICE:<br> Unix systems: If the emulator needs to write a crash dump, it will use the value of this variable to set the nice value for the process, thus lowering its priority. The allowable range is 1 through 39 (higher values will be replaced with 39). The high鈥? est value, 39, will give the process the lowest priority.<br> ERL_CRASH_DUMP_SECONDS:<br> Unix systems: This variable gives the number of seconds that the emulator will be allowed to spend writing a crash dump. When the given number of seconds have elapsed, the emulator will be terminated by a SIGALRM signal.<br> If the environment variable is not set or it is set to zero seconds, ERL_CRASH_DUMP_SECONDS=0, the runtime system will not even attempt to write the crash dump file. It will just terminate.<br> If the environment variable is set to negative valie, e.g. ERL_CRASH_DUMP_SECONDS=-1, the runtime system will wait indefinitely for the crash dump file to be written.<br> This environment variable is used in conjuction with heart if heart is running:<br> ERL_CRASH_DUMP_SECONDS=0:<br> Suppresses the writing a crash dump file entirely, thus rebooting the runtime system immediately. This is the same as not setting the environment variable.<br> ERL_CRASH_DUMP_SECONDS=-1:<br> Setting the environment variable to a negative value will cause the termination of the runtime system to wait until the crash dump file has been completly written.<br> ERL_CRASH_DUMP_SECONDS=S:<br> Will wait for S seconds to complete the crash dump file and then terminate the runtime system.<br> ERL_AFLAGS:<br> The content of this environment variable will be added to the beginning of the command line for erl.<br> The -extra flag is treated specially. Its scope ends at the end of the environment variable content. Arguments following an -extra flag are moved on the command line into the -extra section, i.e. the end of the command line following after an -extra<br> flag.<br> ERL_ZFLAGS and ERL_FLAGS:<br> The content of these environment variables will be added to the end of the command line for erl.<br> The -extra flag is treated specially. Its scope ends at the end of the environment variable content. Arguments following an -extra flag are moved on the command line into the -extra section, i.e. the end of the command line following after an -extra<br> flag.<br> ERL_LIBS:<br> This environment variable contains a list of additional library directories that the code server will search for applications and add to the code path. See code(3erl).<br> ERL_EPMD_ADDRESS:<br> This environment variable may be set to a comma-separated list of IP addresses, in which case the epmd daemon will listen only on the specified address(es) and on the loopback address (which is implicitly added to the list if it has not been speci鈥? fied).<br> ERL_EPMD_PORT:<br> This environment variable can contain the port number to use when communicating with epmd. The default port will work fine in most cases. A different port can be specified to allow nodes of independent clusters to co-exist on the same host. All nodes<br> in a cluster must use the same epmd port number.<br>CONFIGURATION<br> The standard Erlang/OTP system can be re-configured to change the default behavior on start-up.<br> The .erlang Start-up File:<br> When Erlang/OTP is started, the system searches for a file named .erlang in the directory where Erlang/OTP is started. If not found, the user'</span>s home <span class="hljs-keyword">directory</span> <span class="hljs-keyword">is</span> searched <span class="hljs-keyword">for</span> an .erlang file.<br> <span class="hljs-keyword">If</span> an .erlang <span class="hljs-keyword">file</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">found</span>, it <span class="hljs-keyword">is</span> assumed <span class="hljs-keyword">to</span> contain valid Erlang expressions. These expressions <span class="hljs-keyword">are</span> evaluated <span class="hljs-keyword">as</span> <span class="hljs-keyword">if</span> they were <span class="hljs-keyword">input</span> <span class="hljs-keyword">to</span> the shell.<br> A typical .erlang <span class="hljs-keyword">file</span> contains a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">search</span> paths, <span class="hljs-keyword">for</span> example:<br> io:<span class="hljs-keyword">format</span>(<span class="hljs-string">"executing user profile in HOME/.erlang\n"</span>,[]).<br> code:add_path(<span class="hljs-string">"/home/calvin/test/ebin"</span>).<br> code:add_path(<span class="hljs-string">"/home/hobbes/bigappl-1.2/ebin"</span>).<br> io:<span class="hljs-keyword">format</span>(<span class="hljs-string">".erlang rc finished\n"</span>,[]).<br> user_default <span class="hljs-keyword">and</span> shell_default:<br> Functions <span class="hljs-keyword">in</span> the shell which <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> prefixed <span class="hljs-keyword">by</span> a <span class="hljs-keyword">module</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">are</span> assumed <span class="hljs-keyword">to</span> be functional objects (Funs), built-<span class="hljs-keyword">in</span> functions (BIFs), <span class="hljs-keyword">or</span> belong <span class="hljs-keyword">to</span> the <span class="hljs-keyword">module</span> user_default <span class="hljs-keyword">or</span> shell_default.<br> <span class="hljs-keyword">To</span> <span class="hljs-keyword">include</span> <span class="hljs-keyword">private</span> shell commands, <span class="hljs-keyword">define</span> them <span class="hljs-keyword">in</span> a <span class="hljs-keyword">module</span> user_default <span class="hljs-keyword">and</span> <span class="hljs-keyword">add</span> the <span class="hljs-keyword">following</span> argument <span class="hljs-keyword">as</span> the <span class="hljs-keyword">first</span> line <span class="hljs-keyword">in</span> the .erlang file.<br> code:load_abs(<span class="hljs-string">"..../user_default"</span>).<br> erl:<br> <span class="hljs-keyword">If</span> the <span class="hljs-keyword">contents</span> <span class="hljs-keyword">of</span> .erlang <span class="hljs-keyword">are</span> <span class="hljs-keyword">changed</span> <span class="hljs-keyword">and</span> a <span class="hljs-keyword">private</span> <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> user_default <span class="hljs-keyword">is</span> defined, it <span class="hljs-keyword">is</span> possible <span class="hljs-keyword">to</span> customize the Erlang/OTP environment. More powerful changes can be made <span class="hljs-keyword">by</span> supplying command line arguments <span class="hljs-keyword">in</span> the <span class="hljs-keyword">start</span>-up script erl. Refer <span class="hljs-keyword">to</span><br> erl(<span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> init(<span class="hljs-number">3</span>erl) <span class="hljs-keyword">for</span> further information.<br>SEE ALSO<br> init(<span class="hljs-number">3</span>erl), erl_prim_loader(<span class="hljs-number">3</span>erl), erl_boot_server(<span class="hljs-number">3</span>erl), code(<span class="hljs-number">3</span>erl), application(<span class="hljs-number">3</span>erl), heart(<span class="hljs-number">3</span>erl), net_kernel(<span class="hljs-number">3</span>erl), auth(<span class="hljs-number">3</span>erl), make(<span class="hljs-number">3</span>erl), epmd(<span class="hljs-number">1</span>), erts_alloc(<span class="hljs-number">3</span>erl)<br>Ericsson AB erts <span class="hljs-number">7.3</span> erl(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> erlang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>avl tree</title>
      <link href="/2015/05/02/2016/avl_tree/"/>
      <url>/2015/05/02/2016/avl_tree/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><p>一棵空二叉树是AVL树，如果T是非空二叉树，TL和TR分别是其左子树和右子树，<br>则当且仅当TL和TR都为AVL树且|HL-HR|&lt;=1时，T是AVL树。<br>AVL树的高度:（固定节点数计算最大高度）<br>AVL树节点的平衡因子:<br>AVL树节点的平衡因子定义为其左子树的高度减去右子树的高度，我们可以在插入和删除操作的时候更新平衡因子。<br>一棵AVL树的各节点平衡因子为1，-1, 0</p><h2 id="树的旋转"><a href="#树的旋转" class="headerlink" title="树的旋转:"></a>树的旋转:</h2><p>当树的平衡因子的绝对值大于1，则该avl树不平衡。旋转通过调整子树和根的位置来重新获得平衡。</p><h2 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析:"></a>理论分析:</h2><blockquote><p>T代表树根节点，TL代表左子树，TR代表又子树。以此类推。*H表示树高。’代表旋转后的新值。</p></blockquote><p>由于旋转具有对称性，所有只讨论左旋。</p><p>左旋后以TR的节点为根(T’=TR)，TRR成为新的右子树(TR’=TRR)。TL’=T</p><blockquote><p>HL’=max(HL,HRL)+1。</p><p>新的平衡因子G’为HL’-HR’=max(HL,HRL)-HRR+1;</p><p>HL-max(HRL,HRR)-1&lt;-1  =&gt;  HL&lt; max(HRL,HRR)</p></blockquote><p>若HRL&gt;HRR,HL,G’=GR’+1.有可能破坏平衡</p><p>若HRR&gt;HRL。HL&lt;HRL,G’=GR’+1(不会破坏平衡)</p><p>针对HRL&gt;HRR,使用特殊的旋转。</p><h2 id="实际分析"><a href="#实际分析" class="headerlink" title="实际分析:"></a>实际分析:</h2><p>G代表平衡因子。<br>插入操作，导致某处的G为2或-2.<br>右旋时的分析:</p><p><img src="/blog_images/s.png" alt=""><br>针对GL==-1这种情况简单右旋不能使之平衡。故使用左-右旋。</p><p><img src="/blog_images/b.png" alt=""></p><p>对于左旋，有相同的性质，只是左右互换。<br>由此推出以下性质:  </p><ol><li>旋转不会改变其子树的平衡状态  </li><li>旋转以后会使树高-1.</li></ol><p>插入:随着插入，树的平衡性会被打破，此时可以4种选择方法解决。  </p><ol><li>简单右旋:当插入项位于最近的平衡因子为+2的祖先节点的左孩子的左子树中时。LL  </li><li>简单左旋:当插入项位于最近的平衡因子为- 2的祖先节点的右孩子的右子树中时。RR  </li><li>左—右旋:当插入项位于最近的平衡因子为+2的祖先节点的左孩子的右子树中时。LR  </li><li>右—左旋:当插入项位于最近的平衡因子为- 2的祖先节点的右孩子的左子树中时。RL<br>这样旋转以后树的高度不变。</li></ol><p>D为插入的元素。</p><p>插入操作<br>旋转操作能使树高-1，使破坏的平衡恢复<br>当G=-2时，使用左旋，G’=GR+1。  仅当GR=-1时GL’=0，其余GL’=-1.<br>    若GR=1,则对TR使用右旋，GR’=-1,再对T使用左旋，G’=0.<br>当G= 2时，使用右旋， G’=GL-1。仅当GL=    1时GR’=0，其余GR’=1.<br>    若GL=-1,则对TL使用左旋， GL’= 1,再对T使用右旋，G’=0.</p><p>插入时使用递归函数可以获得子数的状态，通过返回一个高度参数grow，来进行平衡因子的修正。</p><p>1.根据数值判断插入的方向<br>    int g;<br>            if(insertData(pNode-&gt;m_pLChild,data,g,route)==exist)<br>2.若左子树增长，在G==-1时，树高不变。在其余情况下树高增加。<br>   若右子树增长，在G== 1时，树高不变。在其余情况下树高增加。<br>3.判断是否破坏平衡。</p><p><img src="/blog_images/a.png" alt=""></p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">删除元素有可能使树高<span class="hljs-number">-1</span>，使用平衡操作（旋转）后。该子树进入平衡状态，但有可能导致父节点的不平衡。<br>类似插入操作，通过递归来获得树高的变化。<br>但是在子树高度减少的情况下树高变化不同。<br></code></pre></td></tr></table></figure><p>若左子树减少，在G== 1时，树高不变。在其余情况下树高减少。<br>若右子树减少，在G==-1时，树高不变。在其余情况下树高减少。</p><p>以上分析对删除叶节点有效，在删除中间节点时。删除节点的子树处理比较困难。<br>因而使用交换，将删除节点与右子树的最小元素交换。再使用删除操作，转化为删除叶节点。</p><p>程序分析:<br>对T的右旋操作</p><p>1.将保存L,断开T-L,。</p><p>2.断开L-LR,LR成为T的左子树</p><p>3.T成为L的右子树，L成为新的根。</p><hr><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">balance</span><span class="hljs-params">(avl* &amp;root,<span class="hljs-keyword">int</span> cl,<span class="hljs-keyword">int</span> cr)</span><br></span>&#123;<br>avl*tl=root-&gt;l,*tr=root-&gt;r;<br>avl* t=root;<br><span class="hljs-keyword">if</span>((cr-cl)==<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(deep(tr-&gt;l)&gt;deep(tr-&gt;r))&#123;<br><span class="hljs-keyword">auto</span> nroot=tr-&gt;l;<br>t-&gt;r=nroot-&gt;l;<br>tr-&gt;l=nroot-&gt;r;<br>root=nroot;<br>root-&gt;l=t;<br>root-&gt;r=tr;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>t-&gt;r=tr-&gt;l;<br>root=tr;<br>root-&gt;l=t;<br>&#125;<br><span class="hljs-keyword">return</span> cr;<br>&#125;<br><span class="hljs-keyword">if</span>((cl-cr)==<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(deep(tl-&gt;l)&lt;deep(tl-&gt;r))&#123;<br><span class="hljs-keyword">auto</span> nroot=tl-&gt;r;<br>t-&gt;l=nroot-&gt;r;<br>tl-&gt;r=nroot-&gt;l;<br>root=nroot;<br>root-&gt;r=t;<br>root-&gt;l=tl;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>t-&gt;l=tl-&gt;r;<br>root=tl;<br>root-&gt;r=t;<br>&#125;<br><span class="hljs-keyword">return</span> cl;<br>&#125;<br>assert(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>AVL树并不是非要旋转才行。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>erlang 数据传递</title>
      <link href="/2015/05/02/2016/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
      <url>/2015/05/02/2016/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>学习完erlang的基本语法，发觉这门语言的语法还算简单，要掌握的东西并不多，有几点感悟:<strong>模式匹配</strong>实在是太好用了，<strong>无全局变量</strong>、<strong>不能修改变量</strong>这两条似乎处处制约着编写程序。</p><p><code>Talk is cheap,show me the code</code></p><h1 id="简单的双人聊天室"><a href="#简单的双人聊天室" class="headerlink" title="简单的双人聊天室"></a>简单的双人聊天室</h1><p>这里需要三个角色:user1，user2，server。</p><p>user需要2个操作:send，recv。</p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><figure class="hljs highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">1.</span> user1发出消息，那么系统将其收入待处理的队列中。<br><span class="hljs-number">2.</span> 随后user2接收了消息，<span class="hljs-comment">remain队列中的数据同时交给user2和history队列，remain变空。</span><br></code></pre></td></tr></table></figure><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><figure class="hljs highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">1.</span> <span class="hljs-comment">remain、history队列在每次请求之后都会变化。</span><br><span class="hljs-number">2.</span> 没有全局变量，该如何取得<span class="hljs-number">2</span>个队列<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">其实第一个问题的答案不言而喻，erlang只能使用函数来修改数据。所以代码应该长成这样<br></code></pre></td></tr></table></figure><figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">handle</span><span class="hljs-params">(S)</span>-&gt;</span><br>    NewS...<br>    handle(NewS).<br></code></pre></td></tr></table></figure><figure class="hljs highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">这个参数S从在修改的过程中随处可见，不正是所需要的<span class="hljs-string">"全局变量"</span>?<br>只要将修改、获取的操作都放在<span class="hljs-keyword">handle</span>里，这样一来二个问题都解决了。<br></code></pre></td></tr></table></figure><p>但是这又引入了新的问题，handle不能空转，它需要user给它指示。<br>erlang自带的消息功能将派上大用场。</p><figure class="hljs highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Send:<br>pid| <span class="hljs-type">registered</span> name |  <span class="hljs-type">&#123;Name</span>,Node&#125;  ! message<br><br>receive<br>    Pattern1 [when GuardSeq1] -&gt; Body1<br>    [<span class="hljs-built_in">after</span> <span class="hljs-keyword">Timeout</span>-&gt;Body2]<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>每一个进程都有自己的信箱，只有匹配的信件才会被取出。利用信箱来完成消息的同步，就能实现以聊天功能了。顺便模仿一下gen_server的写法。其主要特点有:1.使用behaviour模式，使得灵活地创建各类模块；2.用一个结构化变量来存储所需的数据。</p><p>下面给出完整代码:</p><p>s_gen_server.erl:<br><figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author PC</span><br><span class="hljs-comment">%%% @copyright (C) 2016, &lt;COMPANY&gt;</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%%</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 15. 涓冩湀 2016 10:04</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(s_gen_server)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">"PC"</span>)</span>.<br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([call/<span class="hljs-number">2</span>, terminate/<span class="hljs-number">1</span>, main/<span class="hljs-number">1</span>])</span>.<br><span class="hljs-comment">%% behaviour</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([start_link/<span class="hljs-number">2</span>, behaviour_info/<span class="hljs-number">1</span>, handle/<span class="hljs-number">1</span>, init/<span class="hljs-number">2</span>])</span>.<br><span class="hljs-comment">%%-spec init(Arg)-&gt;&#123;ok,state&#125;|&#123;error,Reason&#125;.</span><br><span class="hljs-comment">%%-spec handle_call(Request,From,State) -&gt; &#123;ok,new_state&#125;|&#123;error,Reason&#125;.</span><br><span class="hljs-comment">%%-spec start_link(Module, Args)-&gt;Result.</span><br><span class="hljs-comment">%%Result=&#123;ok,Pid&#125;.</span><br><span class="hljs-function"><span class="hljs-title">behaviour_info</span><span class="hljs-params">(callbacks)</span> -&gt;</span><br> [&#123;init, <span class="hljs-number">1</span>&#125;,<br> &#123;handle_call, <span class="hljs-number">3</span>&#125;];<br><span class="hljs-function"><span class="hljs-title">behaviour_info</span><span class="hljs-params">(_Other)</span> -&gt;</span><br> undefined.<br><span class="hljs-function"><span class="hljs-title">handle</span><span class="hljs-params">(State)</span> -&gt;</span><br> <span class="hljs-keyword">receive</span><br> &#123;Module, From, Request&#125; -&gt;<br> <span class="hljs-keyword">case</span> Module:handle_call(Request, From, State) <span class="hljs-keyword">of</span><br> &#123;_Type, _State&#125; -&gt; From ! &#123;_Type, _State&#125;, handle(_State)<br> <span class="hljs-keyword">end</span>;<br> stop -&gt;<br> <span class="hljs-keyword">receive</span><br> Bagger -&gt; io:format(<span class="hljs-string">"~p~n"</span>, [Bagger])<br> <span class="hljs-keyword">after</span><br> <span class="hljs-number">1</span> -&gt; finish<br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">end</span>.<br><span class="hljs-comment">%%API</span><br><span class="hljs-function"><span class="hljs-title">start_link</span><span class="hljs-params">(Module, Args)</span> -&gt;</span><br> Pid=spawn(?MODULE, init, [Module, Args]),<br> register(Module,Pid).<br><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">(Module, Args)</span> -&gt;</span><br> &#123;ok, State&#125; = Module:init(Args),<br> handle(State).<br><span class="hljs-function"><span class="hljs-title">call</span><span class="hljs-params">(Module, Request)</span> -&gt;</span><br> Module ! &#123;Module, self(), Request&#125;,<br> <span class="hljs-keyword">receive</span><br> &#123;noreply, _State&#125; -&gt; ok;<br> &#123;reply, State&#125; -&gt; State<br> <span class="hljs-keyword">end</span>.<br><span class="hljs-function"><span class="hljs-title">terminate</span><span class="hljs-params">(Module)</span> -&gt;</span><br> Module ! stop.<br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">(_T)</span> -&gt;</span><br> start_link(chat, <span class="hljs-string">"chat_center"</span>).<br></code></pre></td></tr></table></figure></p><p>chat_server.erl:<br><figure class="hljs highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-comment">%%% @author PC</span><br><span class="hljs-comment">%%% @copyright (C) 2016, &lt;COMPANY&gt;</span><br><span class="hljs-comment">%%% @doc</span><br><span class="hljs-comment">%%%</span><br><span class="hljs-comment">%%% @end</span><br><span class="hljs-comment">%%% Created : 15. 涓冩湀 2016 10:23</span><br><span class="hljs-comment">%%%-------------------------------------------------------------------</span><br><span class="hljs-keyword">-module</span><span class="hljs-params">(chat_server)</span>.<br><span class="hljs-keyword">-author</span><span class="hljs-params">(<span class="hljs-string">"PC"</span>)</span>.<br><span class="hljs-keyword">-behaviour</span><span class="hljs-params">(s_gen_server)</span>.<br><span class="hljs-comment">%% history=[Msg::&#123;who,string()&#125;]</span><br><span class="hljs-keyword">-record</span><span class="hljs-params">(state, &#123;history = [], remain = [], servername&#125;)</span>.<br><span class="hljs-keyword">-export</span><span class="hljs-params">([init/<span class="hljs-number">1</span>, handle_call/<span class="hljs-number">3</span>])</span>.<br><span class="hljs-comment">%% API</span><br><span class="hljs-keyword">-export</span><span class="hljs-params">([start_link/<span class="hljs-number">0</span>, recv/<span class="hljs-number">0</span>, send/<span class="hljs-number">2</span>,stop/<span class="hljs-number">0</span>,show_history/<span class="hljs-number">0</span>])</span>.<br><span class="hljs-function"><span class="hljs-title">start_link</span><span class="hljs-params">()</span> -&gt;</span><br> s_gen_server:start_link(?MODULE, <span class="hljs-string">"chat_center"</span>).<br><span class="hljs-function"><span class="hljs-title">send</span><span class="hljs-params">(Who, Word)</span> -&gt;</span><br> s_gen_server:call(?MODULE, &#123;send, Who, Word&#125;).<br><span class="hljs-function"><span class="hljs-title">show_history</span><span class="hljs-params">()</span> -&gt;</span><br> State = s_gen_server:call(?MODULE, fetch),<br> State#state.history.<br><span class="hljs-function"><span class="hljs-title">stop</span><span class="hljs-params">()</span> -&gt;</span><br> s_gen_server:terminate(?MODULE).<br><span class="hljs-keyword">-spec</span> recv<span class="hljs-params">()</span> -&gt; #state&#123;&#125; .<br><span class="hljs-function"><span class="hljs-title">recv</span><span class="hljs-params">()</span> -&gt;</span><br> State = s_gen_server:call(?MODULE, fetch),<br> s_gen_server:call(?MODULE, &#123;update, State#state&#123;remain = [], history = State#state.history ++ [State#state.remain]&#125;&#125;),<br> State#state.remain.<br><span class="hljs-comment">%% behaviour</span><br><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">(_Arg)</span> -&gt;</span><br> &#123;ok, #state&#123;servername = _Arg&#125;&#125;.<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;send, Who, String&#125;, _From, State)</span> -&gt;</span><br> &#123;noreply, #state&#123;remain = State#state.remain ++ [&#123;Who, String&#125;]&#125;&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(fetch, _From, State)</span> -&gt;</span><br> &#123;reply, State&#125;;<br><span class="hljs-function"><span class="hljs-title">handle_call</span><span class="hljs-params">(&#123;update, NewState&#125;, _From, _)</span> -&gt;</span><br> &#123;noreply, NewState&#125;.<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> erlang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>erl 数据结构</title>
      <link href="/2015/05/02/2016/struct/"/>
      <url>/2015/05/02/2016/struct/</url>
      
        <content type="html"><![CDATA[<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><p>##record<br>使用预编译指令<code>-record(Name, {Field1 [= Value1],              ...               FieldN [= ValueN]}).</code><br>声明一个结构体。但本质上它是一个tuple，但erlang提供了一些方便的写法。</p><figure class="hljs highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">-record(myStruct,&#123;a=&#123;1,2&#125;,b=[0,0],c&#125;).<br><br>$ 创建实例<br>S=<span class="hljs-comment">#myStruct&#123;a=[2],c=1&#125;,</span><br>% 修改某项（修改的是拷贝后的数据）<br>T=S<span class="hljs-comment">#myStruct&#123;a=2&#125;,</span><br>% 模式匹配<br><span class="hljs-comment">#myStruct&#123;a=A,b=B&#125; = S,</span><br>% 取出某一项<br>S<span class="hljs-comment">#myStruct.a.</span><br></code></pre></td></tr></table></figure><p>##map<br>虽然也是以#打头但不是同样的东西。<br>创建map<code>{Key1=&gt;Value1,...,KeyN=&gt;ValueN}</code></p><p>有一个专门的模块maps来操作map:</p><figure class="hljs highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">1&gt; </span>M1 = #&#123;name=&gt;adam,age=&gt;<span class="hljs-number">24</span>,date=&gt;&#123;july,<span class="hljs-number">29</span>&#125;&#125;.<br>#&#123;age =&gt; <span class="hljs-number">24</span>,date =&gt; &#123;july,<span class="hljs-number">29</span>&#125;,name =&gt; adam&#125;<br><span class="hljs-meta">2&gt; </span>maps:get(name,M1).<br>adam<br><span class="hljs-meta">3&gt; </span>M1#&#123;age=&gt;<span class="hljs-number">25</span>&#125;. <span class="hljs-comment">%快捷方式</span><br>#&#123;age =&gt; <span class="hljs-number">25</span>,date =&gt; &#123;july,<span class="hljs-number">29</span>&#125;,name =&gt; adam&#125;<br><span class="hljs-meta">4&gt; </span>M2 = maps:update(age,<span class="hljs-number">25</span>,M1).<br>#&#123;age =&gt; <span class="hljs-number">25</span>,date =&gt; &#123;july,<span class="hljs-number">29</span>&#125;,name =&gt; adam&#125;<br><span class="hljs-meta">5&gt; </span>map_size(M).<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>###已知key获取value<br><code>maps:get(key,Map)</code></p><p><code>#{key := A}=Map % 区别record</code></p><p>###增加、修改数据</p><p><code>Map#{newkey=&gt;value}.</code></p>]]></content>
      
      
      <categories>
          
          <category> erlang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>references</title>
      <link href="/2015/05/02/2016/references/"/>
      <url>/2015/05/02/2016/references/</url>
      
        <content type="html"><![CDATA[<p>引用比我想象中的难，因此我觉得有必要单独来讲。</p><p>首先提一下引用的作用:1. 取代指针 2.延长生命周期</p><p>引用的声明很简单，总共就2种形式。<br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">T&amp;;为左值引用<br><span class="hljs-keyword">int</span>&amp;&amp;;右值引用<br>T&amp;&amp;;或为左值引用或为右值引用。叫泛引用（universal reference）<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Widget&amp;&amp; param)</span></span>; <span class="hljs-comment">// rvalue reference</span><br>Widget&amp;&amp; var1 = Widget(); <span class="hljs-comment">// rvalue reference</span><br><span class="hljs-keyword">auto</span>&amp;&amp; var2 = var1; <span class="hljs-comment">// not rvalue reference</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;T&gt;&amp;&amp; param)</span></span>; <span class="hljs-comment">// rvalue reference</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;&amp; param)</span></span>; <span class="hljs-comment">// not rvalue reference</span><br></code></pre></td></tr></table></figure></p><p>大家可以使用如下方法实验:<br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">type</span>;</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f3</span><span class="hljs-params">(T&amp;&amp;a)</span><br></span>&#123;<br><span class="hljs-keyword">return</span> type&lt;<span class="hljs-keyword">decltype</span>(a)&gt; ();<span class="hljs-comment">//widget&amp;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><br>    <span class="hljs-keyword">auto</span>&amp;&amp; w0=(f2());<br>    w0.print();<br>    <span class="hljs-keyword">auto</span>&amp;&amp; w1 = w0;<br>    <span class="hljs-keyword">decltype</span>(w0)&amp;&amp; w2 = f2();<br>    type&lt;<span class="hljs-keyword">decltype</span>(w0)&gt;();<span class="hljs-comment">//widget&amp;&amp;</span><br>    type&lt;<span class="hljs-keyword">decltype</span>(w1)&gt;();<span class="hljs-comment">//widget&amp;</span><br>    type&lt;<span class="hljs-keyword">decltype</span>(w2)&gt;();<span class="hljs-comment">//widget&amp;&amp;</span><br>    f3(w0);<br>    widget &amp;&amp; w3=w0;<span class="hljs-comment">//error 无法将右值引用绑定到左值</span><br> &#125;<br></code></pre></td></tr></table></figure></p><p>结果可以在编译器的错误信息里面得到</p><p>以上结果可以得到以下信息:</p><blockquote><ol><li>类型推导（auto\template\decltype）加上&amp;&amp; 得到的是泛引用。</li><li>普通类型+&amp;&amp;,只是右值引用。</li><li>右值引用在使用的时候可以理解为左值。</li><li>泛引用到底是左值还是右值引用，是根据在初始化时的初始变量的类型。</li></ol></blockquote><p>在最开始的例子中<code>void f(std::vector&lt;T&gt;&amp;&amp; param); // rvalue reference</code>虽然使用了template，但函数的参数是<code>std::vector&lt;T&gt; &amp;&amp;</code>，这意味着其实它是一个vector类型，因此对于一个具体的特点类型&amp;&amp; 仅仅表示右值引用。</p><p>#移动语义<br><figure class="hljs highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">std::thread t(my_func),t1;<br>t1=std::<span class="hljs-keyword">move</span>(t);<span class="hljs-comment">//转移线程资源，否则会有资源冲突</span><br></code></pre></td></tr></table></figure></p><p>当我们打算移动某个数据时，使用<code>std::move</code>绝对是个明智的选择。在上面的例子中，它的确做到了我们想要的。<br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Ty</span>&gt; <span class="hljs-title">inline</span><br>_<span class="hljs-title">CONST_FUN</span> <span class="hljs-title">typename</span> <span class="hljs-title">remove_reference</span>&lt;_Ty&gt;:</span>:<span class="hljs-function">type&amp;&amp;<br><span class="hljs-title">move</span><span class="hljs-params">(_Ty&amp;&amp; _Arg)</span> _NOEXCEPT<br></span>&#123;<span class="hljs-comment">// forward _Arg as movable</span><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">typename</span> remove_reference&lt;_Ty&gt;::type&amp;&amp;&gt;(_Arg));<br>&#125;<br></code></pre></td></tr></table></figure></p><p>然而事实上<code>move</code>并没有转移任何资源，唯一可以肯定的是它返回的是一个右值引用。<code>move</code>只提供一个语义上的说明。换个说法就是一个右值引用的变量是一个即将销毁的变量，我们应该赶紧利用它。即便说在上面的例子中t不是一个临时变量，但那也意味着它应该被清除，在move之后t不能再掌管线程资源。</p><p>所以要想合理的使用move就要求我们所使用的类支持move语义。</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">int</span> a1 = <span class="hljs-number">4</span>,a2;<br>a2 = move(a1);<span class="hljs-comment">//只是做了一个拷贝~~~</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string</span> &#123;</span> <span class="hljs-comment">// std::string is actually a</span><br><span class="hljs-keyword">public</span>: <span class="hljs-comment">// typedef for std::basic_string&lt;char&gt;</span><br>…<br><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; rhs); <span class="hljs-comment">// copy assignment</span><br><span class="hljs-built_in">string</span>&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-built_in">string</span>&amp;&amp; rhs); <span class="hljs-comment">// move assignment</span><br>…<br>&#125;;<span class="hljs-comment">//这样的类才能正确的使用move</span><br></code></pre></td></tr></table></figure><p>但是值得注意c++的隐式类型转换。一个const string&amp;&amp; 与 string&amp;&amp; 是不匹配的，然而它却与const string&amp; 匹配。所以多加个const的结果是事与愿违，在使用move的时候不要加const!<strong>不要、不要、不要 const</strong>！</p><p>这并不是语言设计上的错误，而是编程逻辑的错误。使用move的对象应该是即将被销毁的，而const却又保护了它。唯一的缺陷是编译器没有报错，甚至是警告。</p><h1 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h1><p>与move类似，forward只是在类型上面做文章。其作用也很简单，就是保留变量的类型。<br><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Widget&amp; lvalParam)</span></span>; <span class="hljs-comment">// process lvalues</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(Widget&amp;&amp; rvalParam)</span></span>; <span class="hljs-comment">// process rvalues</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">// template that passes</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">logAndProcess</span><span class="hljs-params">(T&amp;&amp; param)</span> <span class="hljs-comment">// param to process</span><br></span>&#123;<br><span class="hljs-keyword">auto</span> now = <span class="hljs-comment">// get current time</span><br><span class="hljs-built_in">std</span>::chrono::system_clock::now();<br>makeLogEntry(<span class="hljs-string">"Calling 'process'"</span>, now);<br>process(<span class="hljs-built_in">std</span>::forward&lt;T&gt;(param));<span class="hljs-comment">//不用forward将调用process lvalues</span><br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>forward的本质就是带条件的类型转换<br><figure class="hljs highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">// conceptual impl. of</span><br>T&amp;&amp; <span class="hljs-comment">// std::forward (in</span><br>forward(T&amp;&amp; param) <span class="hljs-comment">// namespace std)</span><br>&#123;<br><span class="hljs-built_in">if</span> (is_lvalue_reference&lt;T&gt;::value) &#123; <span class="hljs-comment">// if T indicates lvalue</span><br><span class="hljs-built_in">return</span> param; <span class="hljs-comment">// return param as lvalue</span><br>&#125; <span class="hljs-built_in">else</span> &#123; <span class="hljs-comment">// else</span><br><span class="hljs-built_in">return</span> <span class="hljs-built_in">move</span>(param); <span class="hljs-comment">// return param as rvalue</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>forward的使用也很单一，就是在使用泛引用而不知道到底是左值引用还是右值引用时。利用forward原封不动的传给其他调用者。</p><p>#生命周期</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function">widget <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> widget();<br>&#125;<br><span class="hljs-function">widget&amp; <span class="hljs-title">f3</span><span class="hljs-params">()</span> </span>&#123;<br>widget t;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function">widget&amp;&amp; <span class="hljs-title">f4</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> f2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">auto</span>&amp; w0=(f3());<br>    <span class="hljs-keyword">auto</span>&amp; w2 = (f2());<br>    widget&amp;&amp; w1 = f4();<br>    w0.print(); <span class="hljs-comment">//error</span><br>    w2.print(); <span class="hljs-comment">//正确</span><br>    w1.print();<span class="hljs-comment">//error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用引用来延长临时变量的生命周期是函数的返回值必须是非引用类型的。<br><figure class="hljs highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function">widget <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">widget</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function">widget <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//结果没问题，但是在return 的时候会调用一次move构造函数。</span><br>    widget t;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在c中函数的调用过程其实是先拷贝参数，在return的时候返回一份拷贝。在c++中返回的是带move语义的拷贝。</p><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">函数调用过程<br> copy -&gt; <span class="hljs-built_in">param</span> <span class="hljs-keyword">a</span>         <br>         ....<br> move &lt;- <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span><br>         destructed <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p>f3,f4的错误在于尽管我们试图利用引用来延长生命周期，但拷贝后的引用失去了这一作用。或许它仅仅对所初始化的对象有效，在f3,f4中它可能延长了另一个引用的生命周期。</p>]]></content>
      
      
      <categories>
          
          <category> c plus plus </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE HTML><html><head><meta name="generator" content="Hexo 3.8.0">  <meta http-equiv="content-type" content="text/html;charset=utf-8;">  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">  <meta name="robots" content="all">  <meta name="robots" content="index,follow">  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"></head><body>  <script type="text/plain" src="https://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">  </script>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<p>分类</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<p>Tags</p>]]></content>
      
    </entry>
    
    
  
</search>
